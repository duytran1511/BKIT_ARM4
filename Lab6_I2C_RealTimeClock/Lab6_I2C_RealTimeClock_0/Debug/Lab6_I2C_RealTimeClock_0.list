
Lab6_I2C_RealTimeClock_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c30  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f98  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d50  08007d50  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007d50  08007d50  00017d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d58  08007d58  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d58  08007d58  00017d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d5c  08007d5c  00017d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000001d4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e8  200001e8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011b36  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000300b  00000000  00000000  00031bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b8  00000000  00000000  00034bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000db9  00000000  00000000  00035d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003e66  00000000  00000000  00036b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016eed  00000000  00000000  0003a99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf771  00000000  00000000  0005188c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004928  00000000  00000000  00121000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00125928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004da0 	.word	0x08004da0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004da0 	.word	0x08004da0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ds3231_init>:
uint8_t ds3231_date = 0;
uint8_t ds3231_day = 0;
uint8_t ds3231_month = 0;
uint8_t ds3231_year = 0;

void ds3231_init() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(30); //second
 80004c8:	201e      	movs	r0, #30
 80004ca:	f001 faf9 	bl	8001ac0 <DEC2BCD>
 80004ce:	4603      	mov	r3, r0
 80004d0:	461a      	mov	r2, r3
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <ds3231_init+0x80>)
 80004d4:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(22); //minute
 80004d6:	2016      	movs	r0, #22
 80004d8:	f001 faf2 	bl	8001ac0 <DEC2BCD>
 80004dc:	4603      	mov	r3, r0
 80004de:	461a      	mov	r2, r3
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <ds3231_init+0x80>)
 80004e2:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(21); //hour
 80004e4:	2015      	movs	r0, #21
 80004e6:	f001 faeb 	bl	8001ac0 <DEC2BCD>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <ds3231_init+0x80>)
 80004f0:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80004f2:	2006      	movs	r0, #6
 80004f4:	f001 fae4 	bl	8001ac0 <DEC2BCD>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <ds3231_init+0x80>)
 80004fe:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(15); //date
 8000500:	200f      	movs	r0, #15
 8000502:	f001 fadd 	bl	8001ac0 <DEC2BCD>
 8000506:	4603      	mov	r3, r0
 8000508:	461a      	mov	r2, r3
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <ds3231_init+0x80>)
 800050c:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(9);  //month
 800050e:	2009      	movs	r0, #9
 8000510:	f001 fad6 	bl	8001ac0 <DEC2BCD>
 8000514:	4603      	mov	r3, r0
 8000516:	461a      	mov	r2, r3
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <ds3231_init+0x80>)
 800051a:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(23); //year
 800051c:	2017      	movs	r0, #23
 800051e:	f001 facf 	bl	8001ac0 <DEC2BCD>
 8000522:	4603      	mov	r3, r0
 8000524:	461a      	mov	r2, r3
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <ds3231_init+0x80>)
 8000528:	719a      	strb	r2, [r3, #6]

	if (HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK) {
 800052a:	2332      	movs	r3, #50	; 0x32
 800052c:	2203      	movs	r2, #3
 800052e:	21d0      	movs	r1, #208	; 0xd0
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <ds3231_init+0x84>)
 8000532:	f002 fad5 	bl	8002ae0 <HAL_I2C_IsDeviceReady>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d000      	beq.n	800053e <ds3231_init+0x7a>
		while (1)
 800053c:	e7fe      	b.n	800053c <ds3231_init+0x78>
			;
	};
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000030 	.word	0x20000030
 8000548:	20000094 	.word	0x20000094

0800054c <ds3231_write>:

void ds3231_write(uint8_t address, uint8_t value) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af04      	add	r7, sp, #16
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	4618      	mov	r0, r3
 8000560:	f001 faae 	bl	8001ac0 <DEC2BCD>
 8000564:	4603      	mov	r3, r0
 8000566:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT,
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	b29a      	uxth	r2, r3
 800056c:	230a      	movs	r3, #10
 800056e:	9302      	str	r3, [sp, #8]
 8000570:	2301      	movs	r3, #1
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	f107 030f 	add.w	r3, r7, #15
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	21d0      	movs	r1, #208	; 0xd0
 800057e:	4803      	ldr	r0, [pc, #12]	; (800058c <ds3231_write+0x40>)
 8000580:	f001 ff8e 	bl	80024a0 <HAL_I2C_Mem_Write>
			&temp, 1, 10);
}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000094 	.word	0x20000094

08000590 <ds3231_read_time>:
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT,
			ds3231_buffer, 7, 10);

}

void ds3231_read_time() {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT,
 8000596:	230a      	movs	r3, #10
 8000598:	9302      	str	r3, [sp, #8]
 800059a:	2307      	movs	r3, #7
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	4b25      	ldr	r3, [pc, #148]	; (8000634 <ds3231_read_time+0xa4>)
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	2301      	movs	r3, #1
 80005a4:	2200      	movs	r2, #0
 80005a6:	21d0      	movs	r1, #208	; 0xd0
 80005a8:	4823      	ldr	r0, [pc, #140]	; (8000638 <ds3231_read_time+0xa8>)
 80005aa:	f002 f873 	bl	8002694 <HAL_I2C_Mem_Read>
			ds3231_buffer, 7, 10);

	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 80005ae:	4b21      	ldr	r3, [pc, #132]	; (8000634 <ds3231_read_time+0xa4>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 fa6a 	bl	8001a8c <BCD2DEC>
 80005b8:	4603      	mov	r3, r0
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <ds3231_read_time+0xac>)
 80005be:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <ds3231_read_time+0xa4>)
 80005c2:	785b      	ldrb	r3, [r3, #1]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fa61 	bl	8001a8c <BCD2DEC>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <ds3231_read_time+0xb0>)
 80005d0:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80005d2:	4b18      	ldr	r3, [pc, #96]	; (8000634 <ds3231_read_time+0xa4>)
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fa58 	bl	8001a8c <BCD2DEC>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <ds3231_read_time+0xb4>)
 80005e2:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80005e4:	4b13      	ldr	r3, [pc, #76]	; (8000634 <ds3231_read_time+0xa4>)
 80005e6:	78db      	ldrb	r3, [r3, #3]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fa4f 	bl	8001a8c <BCD2DEC>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <ds3231_read_time+0xb8>)
 80005f4:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <ds3231_read_time+0xa4>)
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 fa46 	bl	8001a8c <BCD2DEC>
 8000600:	4603      	mov	r3, r0
 8000602:	461a      	mov	r2, r3
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <ds3231_read_time+0xbc>)
 8000606:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <ds3231_read_time+0xa4>)
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fa3d 	bl	8001a8c <BCD2DEC>
 8000612:	4603      	mov	r3, r0
 8000614:	461a      	mov	r2, r3
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <ds3231_read_time+0xc0>)
 8000618:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <ds3231_read_time+0xa4>)
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fa34 	bl	8001a8c <BCD2DEC>
 8000624:	4603      	mov	r3, r0
 8000626:	461a      	mov	r2, r3
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <ds3231_read_time+0xc4>)
 800062a:	701a      	strb	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000030 	.word	0x20000030
 8000638:	20000094 	.word	0x20000094
 800063c:	20000039 	.word	0x20000039
 8000640:	20000038 	.word	0x20000038
 8000644:	20000037 	.word	0x20000037
 8000648:	2000003b 	.word	0x2000003b
 800064c:	2000003a 	.word	0x2000003a
 8000650:	2000003c 	.word	0x2000003c
 8000654:	2000003d 	.word	0x2000003d

08000658 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08e      	sub	sp, #56	; 0x38
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]
 8000670:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
 8000680:	615a      	str	r2, [r3, #20]
 8000682:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000684:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <MX_FSMC_Init+0xec>)
 8000686:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800068a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800068c:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <MX_FSMC_Init+0xec>)
 800068e:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <MX_FSMC_Init+0xf0>)
 8000690:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <MX_FSMC_Init+0xec>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_FSMC_Init+0xec>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_FSMC_Init+0xec>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_FSMC_Init+0xec>)
 80006a6:	2210      	movs	r2, #16
 80006a8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_FSMC_Init+0xec>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_FSMC_Init+0xec>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_FSMC_Init+0xec>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_FSMC_Init+0xec>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_FSMC_Init+0xec>)
 80006c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_FSMC_Init+0xec>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_FSMC_Init+0xec>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_FSMC_Init+0xec>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_FSMC_Init+0xec>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_FSMC_Init+0xec>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80006ea:	230f      	movs	r3, #15
 80006ec:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80006ee:	230f      	movs	r3, #15
 80006f0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80006f2:	233c      	movs	r3, #60	; 0x3c
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80006fa:	2310      	movs	r3, #16
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80006fe:	2311      	movs	r3, #17
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000702:	2300      	movs	r3, #0
 8000704:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000706:	2308      	movs	r3, #8
 8000708:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800070a:	230f      	movs	r3, #15
 800070c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800070e:	2309      	movs	r3, #9
 8000710:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000716:	2310      	movs	r3, #16
 8000718:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800071a:	2311      	movs	r3, #17
 800071c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000722:	463a      	mov	r2, r7
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_FSMC_Init+0xec>)
 800072c:	f003 fd76 	bl	800421c <HAL_SRAM_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000736:	f000 ff5d 	bl	80015f4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800073a:	bf00      	nop
 800073c:	3738      	adds	r7, #56	; 0x38
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000040 	.word	0x20000040
 8000748:	a0000104 	.word	0xa0000104

0800074c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <HAL_FSMC_MspInit+0x88>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d131      	bne.n	80007cc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_FSMC_MspInit+0x88>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6393      	str	r3, [r2, #56]	; 0x38
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_FSMC_MspInit+0x8c>)
 8000780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800078a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800078e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <HAL_FSMC_MspInit+0x90>)
 80007a6:	f001 fb81 	bl	8001eac <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80007aa:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80007ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80007bc:	230c      	movs	r3, #12
 80007be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <HAL_FSMC_MspInit+0x94>)
 80007c6:	f001 fb71 	bl	8001eac <HAL_GPIO_Init>
 80007ca:	e000      	b.n	80007ce <HAL_FSMC_MspInit+0x82>
    return;
 80007cc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000090 	.word	0x20000090
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40020c00 	.word	0x40020c00

080007e4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80007ec:	f7ff ffae 	bl	800074c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08c      	sub	sp, #48	; 0x30
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
 8000812:	4b6f      	ldr	r3, [pc, #444]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a6e      	ldr	r2, [pc, #440]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000818:	f043 0310 	orr.w	r3, r3, #16
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b6c      	ldr	r3, [pc, #432]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0310 	and.w	r3, r3, #16
 8000826:	61bb      	str	r3, [r7, #24]
 8000828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
 800082e:	4b68      	ldr	r3, [pc, #416]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a67      	ldr	r2, [pc, #412]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000834:	f043 0304 	orr.w	r3, r3, #4
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b65      	ldr	r3, [pc, #404]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0304 	and.w	r3, r3, #4
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
 800084a:	4b61      	ldr	r3, [pc, #388]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a60      	ldr	r2, [pc, #384]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b5e      	ldr	r3, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b5a      	ldr	r3, [pc, #360]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a59      	ldr	r2, [pc, #356]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a52      	ldr	r2, [pc, #328]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a4b      	ldr	r2, [pc, #300]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a44      	ldr	r2, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <MX_GPIO_Init+0x1d8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2170      	movs	r1, #112	; 0x70
 80008d6:	483f      	ldr	r0, [pc, #252]	; (80009d4 <MX_GPIO_Init+0x1dc>)
 80008d8:	f001 fc84 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	483d      	ldr	r0, [pc, #244]	; (80009d8 <MX_GPIO_Init+0x1e0>)
 80008e4:	f001 fc7e 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	483b      	ldr	r0, [pc, #236]	; (80009dc <MX_GPIO_Init+0x1e4>)
 80008ee:	f001 fc79 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f8:	4839      	ldr	r0, [pc, #228]	; (80009e0 <MX_GPIO_Init+0x1e8>)
 80008fa:	f001 fc73 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2108      	movs	r1, #8
 8000902:	4838      	ldr	r0, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x1ec>)
 8000904:	f001 fc6e 	bl	80021e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000908:	2370      	movs	r3, #112	; 0x70
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	482d      	ldr	r0, [pc, #180]	; (80009d4 <MX_GPIO_Init+0x1dc>)
 8000920:	f001 fac4 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4826      	ldr	r0, [pc, #152]	; (80009d8 <MX_GPIO_Init+0x1e0>)
 800093e:	f001 fab5 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000942:	23c0      	movs	r3, #192	; 0xc0
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4822      	ldr	r0, [pc, #136]	; (80009e0 <MX_GPIO_Init+0x1e8>)
 8000956:	f001 faa9 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800095a:	2330      	movs	r3, #48	; 0x30
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	481a      	ldr	r0, [pc, #104]	; (80009d8 <MX_GPIO_Init+0x1e0>)
 800096e:	f001 fa9d 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4814      	ldr	r0, [pc, #80]	; (80009dc <MX_GPIO_Init+0x1e4>)
 800098a:	f001 fa8f 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800098e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_GPIO_Init+0x1e8>)
 80009a8:	f001 fa80 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80009ac:	2308      	movs	r3, #8
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4808      	ldr	r0, [pc, #32]	; (80009e4 <MX_GPIO_Init+0x1ec>)
 80009c4:	f001 fa72 	bl	8001eac <HAL_GPIO_Init>

}
 80009c8:	bf00      	nop
 80009ca:	3730      	adds	r7, #48	; 0x30
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40020800 	.word	0x40020800
 80009dc:	40021800 	.word	0x40021800
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020c00 	.word	0x40020c00

080009e8 <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009ee:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <MX_I2C1_Init+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_I2C1_Init+0x58>)
 80009f6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_I2C1_Init+0x50>)
 8000a26:	f001 fbf7 	bl	8002218 <HAL_I2C_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000a30:	f000 fde0 	bl	80015f4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000094 	.word	0x20000094
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	000186a0 	.word	0x000186a0

08000a44 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	; 0x28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
	if (i2cHandle->Instance == I2C1) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a19      	ldr	r2, [pc, #100]	; (8000ac8 <HAL_I2C_MspInit+0x84>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d12b      	bne.n	8000abe <HAL_I2C_MspInit+0x7a>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB6     ------> I2C1_SCL
		 PB7     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000a82:	23c0      	movs	r3, #192	; 0xc0
 8000a84:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a86:	2312      	movs	r3, #18
 8000a88:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a92:	2304      	movs	r3, #4
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <HAL_I2C_MspInit+0x8c>)
 8000a9e:	f001 fa05 	bl	8001eac <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_I2C_MspInit+0x88>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3728      	adds	r7, #40	; 0x28
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40005400 	.word	0x40005400
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400

08000ad4 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <LCD_WR_REG+0x1c>)
 8000ae0:	88fb      	ldrh	r3, [r7, #6]
 8000ae2:	8013      	strh	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	600ffffe 	.word	0x600ffffe

08000af4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <LCD_WR_DATA+0x1c>)
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	8053      	strh	r3, [r2, #2]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	600ffffe 	.word	0x600ffffe

08000b14 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <LCD_RD_DATA+0x20>)
 8000b1c:	885b      	ldrh	r3, [r3, #2]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000b22:	88fb      	ldrh	r3, [r7, #6]
 8000b24:	b29b      	uxth	r3, r3
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	600ffffe 	.word	0x600ffffe

08000b38 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4604      	mov	r4, r0
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4623      	mov	r3, r4
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
 8000b52:	4613      	mov	r3, r2
 8000b54:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 8000b56:	202a      	movs	r0, #42	; 0x2a
 8000b58:	f7ff ffbc 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	0a1b      	lsrs	r3, r3, #8
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffc6 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffc0 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8000b74:	887b      	ldrh	r3, [r7, #2]
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ffba 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ffb4 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8000b8c:	202b      	movs	r0, #43	; 0x2b
 8000b8e:	f7ff ffa1 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ffab 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8000b9e:	88bb      	ldrh	r3, [r7, #4]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ffa5 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8000baa:	883b      	ldrh	r3, [r7, #0]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff9f 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000bb6:	883b      	ldrh	r3, [r7, #0]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff99 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000bc2:	202c      	movs	r0, #44	; 0x2c
 8000bc4:	f7ff ff86 	bl	8000ad4 <LCD_WR_REG>
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}

08000bd0 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <lcd_clear+0x60>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <lcd_clear+0x60>)
 8000be4:	885b      	ldrh	r3, [r3, #2]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff ffa3 	bl	8000b38 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	81fb      	strh	r3, [r7, #14]
 8000bf6:	e011      	b.n	8000c1c <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	81bb      	strh	r3, [r7, #12]
 8000bfc:	e006      	b.n	8000c0c <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff77 	bl	8000af4 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8000c06:	89bb      	ldrh	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	81bb      	strh	r3, [r7, #12]
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <lcd_clear+0x60>)
 8000c0e:	885b      	ldrh	r3, [r3, #2]
 8000c10:	89ba      	ldrh	r2, [r7, #12]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d3f3      	bcc.n	8000bfe <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	81fb      	strh	r3, [r7, #14]
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <lcd_clear+0x60>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	89fa      	ldrh	r2, [r7, #14]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d3e8      	bcc.n	8000bf8 <lcd_clear+0x28>
		}
	}
}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000e8 	.word	0x200000e8

08000c34 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80fb      	strh	r3, [r7, #6]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	80bb      	strh	r3, [r7, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	88b9      	ldrh	r1, [r7, #4]
 8000c4c:	88f8      	ldrh	r0, [r7, #6]
 8000c4e:	f7ff ff73 	bl	8000b38 <lcd_set_address>
	LCD_WR_DATA(color);
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff4d 	bl	8000af4 <LCD_WR_DATA>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	4611      	mov	r1, r2
 8000c70:	461a      	mov	r2, r3
 8000c72:	4623      	mov	r3, r4
 8000c74:	80fb      	strh	r3, [r7, #6]
 8000c76:	4603      	mov	r3, r0
 8000c78:	80bb      	strh	r3, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	70fb      	strb	r3, [r7, #3]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000c8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	08db      	lsrs	r3, r3, #3
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	461a      	mov	r2, r3
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	fb12 f303 	smulbb	r3, r2, r3
 8000cba:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	3b20      	subs	r3, #32
 8000cc0:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	4413      	add	r3, r2
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b29c      	uxth	r4, r3
 8000cd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	88bb      	ldrh	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	88b9      	ldrh	r1, [r7, #4]
 8000ce2:	88f8      	ldrh	r0, [r7, #6]
 8000ce4:	4622      	mov	r2, r4
 8000ce6:	f7ff ff27 	bl	8000b38 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	827b      	strh	r3, [r7, #18]
 8000cee:	e07a      	b.n	8000de6 <lcd_show_char+0x182>
		if (sizey == 12)
 8000cf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cf4:	2b0c      	cmp	r3, #12
 8000cf6:	d028      	beq.n	8000d4a <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000cf8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	d108      	bne.n	8000d12 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000d00:	78fa      	ldrb	r2, [r7, #3]
 8000d02:	8a7b      	ldrh	r3, [r7, #18]
 8000d04:	493c      	ldr	r1, [pc, #240]	; (8000df8 <lcd_show_char+0x194>)
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	440a      	add	r2, r1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	75fb      	strb	r3, [r7, #23]
 8000d10:	e01b      	b.n	8000d4a <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000d12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d16:	2b18      	cmp	r3, #24
 8000d18:	d10b      	bne.n	8000d32 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8000d1a:	78fa      	ldrb	r2, [r7, #3]
 8000d1c:	8a79      	ldrh	r1, [r7, #18]
 8000d1e:	4837      	ldr	r0, [pc, #220]	; (8000dfc <lcd_show_char+0x198>)
 8000d20:	4613      	mov	r3, r2
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4413      	add	r3, r2
 8000d26:	011b      	lsls	r3, r3, #4
 8000d28:	4403      	add	r3, r0
 8000d2a:	440b      	add	r3, r1
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	75fb      	strb	r3, [r7, #23]
 8000d30:	e00b      	b.n	8000d4a <lcd_show_char+0xe6>
		else if (sizey == 32)
 8000d32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d36:	2b20      	cmp	r3, #32
 8000d38:	d15a      	bne.n	8000df0 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8000d3a:	78fa      	ldrb	r2, [r7, #3]
 8000d3c:	8a7b      	ldrh	r3, [r7, #18]
 8000d3e:	4930      	ldr	r1, [pc, #192]	; (8000e00 <lcd_show_char+0x19c>)
 8000d40:	0192      	lsls	r2, r2, #6
 8000d42:	440a      	add	r2, r1
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	75bb      	strb	r3, [r7, #22]
 8000d4e:	e044      	b.n	8000dda <lcd_show_char+0x176>
			if (!mode) {
 8000d50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d120      	bne.n	8000d9a <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8000d58:	7dfa      	ldrb	r2, [r7, #23]
 8000d5a:	7dbb      	ldrb	r3, [r7, #22]
 8000d5c:	fa42 f303 	asr.w	r3, r2, r3
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d004      	beq.n	8000d72 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8000d68:	883b      	ldrh	r3, [r7, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fec2 	bl	8000af4 <LCD_WR_DATA>
 8000d70:	e003      	b.n	8000d7a <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8000d72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff febd 	bl	8000af4 <LCD_WR_DATA>
				m++;
 8000d7a:	7d7b      	ldrb	r3, [r7, #21]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000d80:	7d7b      	ldrb	r3, [r7, #21]
 8000d82:	7bfa      	ldrb	r2, [r7, #15]
 8000d84:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d88:	fb01 f202 	mul.w	r2, r1, r2
 8000d8c:	1a9b      	subs	r3, r3, r2
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d11f      	bne.n	8000dd4 <lcd_show_char+0x170>
					m = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	757b      	strb	r3, [r7, #21]
					break;
 8000d98:	e022      	b.n	8000de0 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8000d9a:	7dfa      	ldrb	r2, [r7, #23]
 8000d9c:	7dbb      	ldrb	r3, [r7, #22]
 8000d9e:	fa42 f303 	asr.w	r3, r2, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d005      	beq.n	8000db6 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8000daa:	883a      	ldrh	r2, [r7, #0]
 8000dac:	88b9      	ldrh	r1, [r7, #4]
 8000dae:	88fb      	ldrh	r3, [r7, #6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff3f 	bl	8000c34 <lcd_draw_point>
				x++;
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	3301      	adds	r3, #1
 8000dba:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8000dbc:	88fa      	ldrh	r2, [r7, #6]
 8000dbe:	8a3b      	ldrh	r3, [r7, #16]
 8000dc0:	1ad2      	subs	r2, r2, r3
 8000dc2:	7bfb      	ldrb	r3, [r7, #15]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d105      	bne.n	8000dd4 <lcd_show_char+0x170>
					x = x0;
 8000dc8:	8a3b      	ldrh	r3, [r7, #16]
 8000dca:	80fb      	strh	r3, [r7, #6]
					y++;
 8000dcc:	88bb      	ldrh	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	80bb      	strh	r3, [r7, #4]
					break;
 8000dd2:	e005      	b.n	8000de0 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8000dd4:	7dbb      	ldrb	r3, [r7, #22]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	75bb      	strb	r3, [r7, #22]
 8000dda:	7dbb      	ldrb	r3, [r7, #22]
 8000ddc:	2b07      	cmp	r3, #7
 8000dde:	d9b7      	bls.n	8000d50 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000de0:	8a7b      	ldrh	r3, [r7, #18]
 8000de2:	3301      	adds	r3, #1
 8000de4:	827b      	strh	r3, [r7, #18]
 8000de6:	8a7a      	ldrh	r2, [r7, #18]
 8000de8:	89bb      	ldrh	r3, [r7, #12]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d380      	bcc.n	8000cf0 <lcd_show_char+0x8c>
 8000dee:	e000      	b.n	8000df2 <lcd_show_char+0x18e>
			return;
 8000df0:	bf00      	nop
				}
			}
		}
	}
}
 8000df2:	371c      	adds	r7, #28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	08004db8 	.word	0x08004db8
 8000dfc:	080053a8 	.word	0x080053a8
 8000e00:	08006578 	.word	0x08006578

08000e04 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	460a      	mov	r2, r1
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000e18:	e004      	b.n	8000e24 <mypow+0x20>
		result *= m;
 8000e1a:	79fa      	ldrb	r2, [r7, #7]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	fb02 f303 	mul.w	r3, r2, r3
 8000e22:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	1e5a      	subs	r2, r3, #1
 8000e28:	71ba      	strb	r2, [r7, #6]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f5      	bne.n	8000e1a <mypow+0x16>
	return result;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af04      	add	r7, sp, #16
 8000e42:	4604      	mov	r4, r0
 8000e44:	4608      	mov	r0, r1
 8000e46:	4611      	mov	r1, r2
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	807b      	strh	r3, [r7, #2]
 8000e56:	4613      	mov	r3, r2
 8000e58:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8000e5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e059      	b.n	8000f20 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8000e6c:	887c      	ldrh	r4, [r7, #2]
 8000e6e:	787a      	ldrb	r2, [r7, #1]
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	3b01      	subs	r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	200a      	movs	r0, #10
 8000e7e:	f7ff ffc1 	bl	8000e04 <mypow>
 8000e82:	4603      	mov	r3, r0
 8000e84:	fbb4 f1f3 	udiv	r1, r4, r3
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <lcd_show_int_num+0xf8>)
 8000e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	4613      	mov	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	1aca      	subs	r2, r1, r3
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8000e9e:	7bbb      	ldrb	r3, [r7, #14]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d121      	bne.n	8000ee8 <lcd_show_int_num+0xac>
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	787b      	ldrb	r3, [r7, #1]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	da1c      	bge.n	8000ee8 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8000eae:	7b3b      	ldrb	r3, [r7, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d117      	bne.n	8000ee4 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	fb12 f303 	smulbb	r3, r2, r3
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b298      	uxth	r0, r3
 8000ec8:	8c3a      	ldrh	r2, [r7, #32]
 8000eca:	88b9      	ldrh	r1, [r7, #4]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	4613      	mov	r3, r2
 8000edc:	2220      	movs	r2, #32
 8000ede:	f7ff fec1 	bl	8000c64 <lcd_show_char>
				continue;
 8000ee2:	e01a      	b.n	8000f1a <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	7b7b      	ldrb	r3, [r7, #13]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	fb12 f303 	smulbb	r3, r2, r3
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b298      	uxth	r0, r3
 8000efc:	7b3b      	ldrb	r3, [r7, #12]
 8000efe:	3330      	adds	r3, #48	; 0x30
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	8c3c      	ldrh	r4, [r7, #32]
 8000f04:	88b9      	ldrh	r1, [r7, #4]
 8000f06:	2300      	movs	r3, #0
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	4623      	mov	r3, r4
 8000f16:	f7ff fea5 	bl	8000c64 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	787b      	ldrb	r3, [r7, #1]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3a1      	bcc.n	8000e6c <lcd_show_int_num+0x30>
	}
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	cccccccd 	.word	0xcccccccd

08000f38 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <lcd_set_direction+0x44>)
 8000f54:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f58:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <lcd_set_direction+0x44>)
 8000f5c:	22f0      	movs	r2, #240	; 0xf0
 8000f5e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8000f60:	e006      	b.n	8000f70 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <lcd_set_direction+0x44>)
 8000f64:	22f0      	movs	r2, #240	; 0xf0
 8000f66:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <lcd_set_direction+0x44>)
 8000f6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f6e:	805a      	strh	r2, [r3, #2]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	200000e8 	.word	0x200000e8

08000f80 <lcd_init>:

void lcd_init(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8a:	48aa      	ldr	r0, [pc, #680]	; (8001234 <lcd_init+0x2b4>)
 8000f8c:	f001 f92a 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f94:	f000 fe54 	bl	8001c40 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9e:	48a5      	ldr	r0, [pc, #660]	; (8001234 <lcd_init+0x2b4>)
 8000fa0:	f001 f920 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fa8:	f000 fe4a 	bl	8001c40 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff ffc3 	bl	8000f38 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8000fb2:	20d3      	movs	r0, #211	; 0xd3
 8000fb4:	f7ff fd8e 	bl	8000ad4 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8000fb8:	f7ff fdac 	bl	8000b14 <LCD_RD_DATA>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b9d      	ldr	r3, [pc, #628]	; (8001238 <lcd_init+0x2b8>)
 8000fc2:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000fc4:	f7ff fda6 	bl	8000b14 <LCD_RD_DATA>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b9a      	ldr	r3, [pc, #616]	; (8001238 <lcd_init+0x2b8>)
 8000fce:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000fd0:	f7ff fda0 	bl	8000b14 <LCD_RD_DATA>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b97      	ldr	r3, [pc, #604]	; (8001238 <lcd_init+0x2b8>)
 8000fda:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8000fdc:	4b96      	ldr	r3, [pc, #600]	; (8001238 <lcd_init+0x2b8>)
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b94      	ldr	r3, [pc, #592]	; (8001238 <lcd_init+0x2b8>)
 8000fe6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8000fe8:	f7ff fd94 	bl	8000b14 <LCD_RD_DATA>
 8000fec:	4603      	mov	r3, r0
 8000fee:	461a      	mov	r2, r3
 8000ff0:	4b91      	ldr	r3, [pc, #580]	; (8001238 <lcd_init+0x2b8>)
 8000ff2:	889b      	ldrh	r3, [r3, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	4b8f      	ldr	r3, [pc, #572]	; (8001238 <lcd_init+0x2b8>)
 8000ffa:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000ffc:	20cf      	movs	r0, #207	; 0xcf
 8000ffe:	f7ff fd69 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001002:	2000      	movs	r0, #0
 8001004:	f7ff fd76 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001008:	20c1      	movs	r0, #193	; 0xc1
 800100a:	f7ff fd73 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800100e:	2030      	movs	r0, #48	; 0x30
 8001010:	f7ff fd70 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001014:	20ed      	movs	r0, #237	; 0xed
 8001016:	f7ff fd5d 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800101a:	2064      	movs	r0, #100	; 0x64
 800101c:	f7ff fd6a 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001020:	2003      	movs	r0, #3
 8001022:	f7ff fd67 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001026:	2012      	movs	r0, #18
 8001028:	f7ff fd64 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800102c:	2081      	movs	r0, #129	; 0x81
 800102e:	f7ff fd61 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001032:	20e8      	movs	r0, #232	; 0xe8
 8001034:	f7ff fd4e 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001038:	2085      	movs	r0, #133	; 0x85
 800103a:	f7ff fd5b 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800103e:	2010      	movs	r0, #16
 8001040:	f7ff fd58 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001044:	207a      	movs	r0, #122	; 0x7a
 8001046:	f7ff fd55 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800104a:	20cb      	movs	r0, #203	; 0xcb
 800104c:	f7ff fd42 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001050:	2039      	movs	r0, #57	; 0x39
 8001052:	f7ff fd4f 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001056:	202c      	movs	r0, #44	; 0x2c
 8001058:	f7ff fd4c 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff fd49 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001062:	2034      	movs	r0, #52	; 0x34
 8001064:	f7ff fd46 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff fd43 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800106e:	20f7      	movs	r0, #247	; 0xf7
 8001070:	f7ff fd30 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001074:	2020      	movs	r0, #32
 8001076:	f7ff fd3d 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800107a:	20ea      	movs	r0, #234	; 0xea
 800107c:	f7ff fd2a 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fd37 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fd34 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 800108c:	20c0      	movs	r0, #192	; 0xc0
 800108e:	f7ff fd21 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001092:	201b      	movs	r0, #27
 8001094:	f7ff fd2e 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001098:	20c1      	movs	r0, #193	; 0xc1
 800109a:	f7ff fd1b 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff fd28 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80010a4:	20c5      	movs	r0, #197	; 0xc5
 80010a6:	f7ff fd15 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80010aa:	2030      	movs	r0, #48	; 0x30
 80010ac:	f7ff fd22 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80010b0:	2030      	movs	r0, #48	; 0x30
 80010b2:	f7ff fd1f 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80010b6:	20c7      	movs	r0, #199	; 0xc7
 80010b8:	f7ff fd0c 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80010bc:	20b7      	movs	r0, #183	; 0xb7
 80010be:	f7ff fd19 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80010c2:	2036      	movs	r0, #54	; 0x36
 80010c4:	f7ff fd06 	bl	8000ad4 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 80010c8:	2008      	movs	r0, #8
 80010ca:	f7ff fd13 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80010ce:	203a      	movs	r0, #58	; 0x3a
 80010d0:	f7ff fd00 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80010d4:	2055      	movs	r0, #85	; 0x55
 80010d6:	f7ff fd0d 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80010da:	20b1      	movs	r0, #177	; 0xb1
 80010dc:	f7ff fcfa 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff fd07 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80010e6:	201a      	movs	r0, #26
 80010e8:	f7ff fd04 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80010ec:	20b6      	movs	r0, #182	; 0xb6
 80010ee:	f7ff fcf1 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80010f2:	200a      	movs	r0, #10
 80010f4:	f7ff fcfe 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80010f8:	20a2      	movs	r0, #162	; 0xa2
 80010fa:	f7ff fcfb 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80010fe:	20f2      	movs	r0, #242	; 0xf2
 8001100:	f7ff fce8 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fcf5 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800110a:	2026      	movs	r0, #38	; 0x26
 800110c:	f7ff fce2 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff fcef 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001116:	20e0      	movs	r0, #224	; 0xe0
 8001118:	f7ff fcdc 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800111c:	200f      	movs	r0, #15
 800111e:	f7ff fce9 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001122:	202a      	movs	r0, #42	; 0x2a
 8001124:	f7ff fce6 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001128:	2028      	movs	r0, #40	; 0x28
 800112a:	f7ff fce3 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800112e:	2008      	movs	r0, #8
 8001130:	f7ff fce0 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001134:	200e      	movs	r0, #14
 8001136:	f7ff fcdd 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800113a:	2008      	movs	r0, #8
 800113c:	f7ff fcda 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001140:	2054      	movs	r0, #84	; 0x54
 8001142:	f7ff fcd7 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001146:	20a9      	movs	r0, #169	; 0xa9
 8001148:	f7ff fcd4 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 800114c:	2043      	movs	r0, #67	; 0x43
 800114e:	f7ff fcd1 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001152:	200a      	movs	r0, #10
 8001154:	f7ff fcce 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001158:	200f      	movs	r0, #15
 800115a:	f7ff fccb 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fcc8 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fcc5 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800116a:	2000      	movs	r0, #0
 800116c:	f7ff fcc2 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fcbf 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001176:	20e1      	movs	r0, #225	; 0xe1
 8001178:	f7ff fcac 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff fcb9 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001182:	2015      	movs	r0, #21
 8001184:	f7ff fcb6 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001188:	2017      	movs	r0, #23
 800118a:	f7ff fcb3 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800118e:	2007      	movs	r0, #7
 8001190:	f7ff fcb0 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001194:	2011      	movs	r0, #17
 8001196:	f7ff fcad 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800119a:	2006      	movs	r0, #6
 800119c:	f7ff fcaa 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80011a0:	202b      	movs	r0, #43	; 0x2b
 80011a2:	f7ff fca7 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80011a6:	2056      	movs	r0, #86	; 0x56
 80011a8:	f7ff fca4 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80011ac:	203c      	movs	r0, #60	; 0x3c
 80011ae:	f7ff fca1 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80011b2:	2005      	movs	r0, #5
 80011b4:	f7ff fc9e 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80011b8:	2010      	movs	r0, #16
 80011ba:	f7ff fc9b 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011be:	200f      	movs	r0, #15
 80011c0:	f7ff fc98 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80011c4:	203f      	movs	r0, #63	; 0x3f
 80011c6:	f7ff fc95 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80011ca:	203f      	movs	r0, #63	; 0x3f
 80011cc:	f7ff fc92 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80011d0:	200f      	movs	r0, #15
 80011d2:	f7ff fc8f 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80011d6:	202b      	movs	r0, #43	; 0x2b
 80011d8:	f7ff fc7c 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fc89 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff fc86 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fc83 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80011ee:	203f      	movs	r0, #63	; 0x3f
 80011f0:	f7ff fc80 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80011f4:	202a      	movs	r0, #42	; 0x2a
 80011f6:	f7ff fc6d 	bl	8000ad4 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fc7a 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fc77 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fc74 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800120c:	20ef      	movs	r0, #239	; 0xef
 800120e:	f7ff fc71 	bl	8000af4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8001212:	2011      	movs	r0, #17
 8001214:	f7ff fc5e 	bl	8000ad4 <LCD_WR_REG>
	HAL_Delay(120);
 8001218:	2078      	movs	r0, #120	; 0x78
 800121a:	f000 fd11 	bl	8001c40 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800121e:	2029      	movs	r0, #41	; 0x29
 8001220:	f7ff fc58 	bl	8000ad4 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <lcd_init+0x2bc>)
 800122c:	f000 ffda 	bl	80021e4 <HAL_GPIO_WritePin>
}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40020800 	.word	0x40020800
 8001238:	200000e8 	.word	0x200000e8
 800123c:	40020000 	.word	0x40020000

08001240 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001244:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <led_7seg_display+0x104>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b2db      	uxtb	r3, r3
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <led_7seg_display+0x104>)
 800124e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8001250:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <led_7seg_display+0x108>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b3d      	ldr	r3, [pc, #244]	; (800134c <led_7seg_display+0x10c>)
 8001258:	5c9b      	ldrb	r3, [r3, r2]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <led_7seg_display+0x104>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <led_7seg_display+0x104>)
 800126c:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <led_7seg_display+0x108>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	2b03      	cmp	r3, #3
 8001274:	d846      	bhi.n	8001304 <led_7seg_display+0xc4>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <led_7seg_display+0x3c>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	0800128d 	.word	0x0800128d
 8001280:	080012ab 	.word	0x080012ab
 8001284:	080012c9 	.word	0x080012c9
 8001288:	080012e7 	.word	0x080012e7
	case 0:
		spi_buffer |= 0x00b0;
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <led_7seg_display+0x104>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001294:	b29a      	uxth	r2, r3
 8001296:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <led_7seg_display+0x104>)
 8001298:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <led_7seg_display+0x104>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <led_7seg_display+0x104>)
 80012a6:	801a      	strh	r2, [r3, #0]
		break;
 80012a8:	e02d      	b.n	8001306 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <led_7seg_display+0x104>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <led_7seg_display+0x104>)
 80012b6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80012b8:	4b22      	ldr	r3, [pc, #136]	; (8001344 <led_7seg_display+0x104>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	f023 0320 	bic.w	r3, r3, #32
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <led_7seg_display+0x104>)
 80012c4:	801a      	strh	r2, [r3, #0]
		break;
 80012c6:	e01e      	b.n	8001306 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <led_7seg_display+0x104>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <led_7seg_display+0x104>)
 80012d4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <led_7seg_display+0x104>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	f023 0310 	bic.w	r3, r3, #16
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <led_7seg_display+0x104>)
 80012e2:	801a      	strh	r2, [r3, #0]
		break;
 80012e4:	e00f      	b.n	8001306 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <led_7seg_display+0x104>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <led_7seg_display+0x104>)
 80012f2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <led_7seg_display+0x104>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <led_7seg_display+0x104>)
 8001300:	801a      	strh	r2, [r3, #0]
		break;
 8001302:	e000      	b.n	8001306 <led_7seg_display+0xc6>
	default:
		break;
 8001304:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <led_7seg_display+0x108>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	425a      	negs	r2, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	bf58      	it	pl
 8001318:	4253      	negpl	r3, r2
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <led_7seg_display+0x108>)
 800131e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2140      	movs	r1, #64	; 0x40
 8001324:	480a      	ldr	r0, [pc, #40]	; (8001350 <led_7seg_display+0x110>)
 8001326:	f000 ff5d 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 800132a:	2301      	movs	r3, #1
 800132c:	2202      	movs	r2, #2
 800132e:	4905      	ldr	r1, [pc, #20]	; (8001344 <led_7seg_display+0x104>)
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <led_7seg_display+0x114>)
 8001332:	f002 fd6c 	bl	8003e0e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001336:	2201      	movs	r2, #1
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <led_7seg_display+0x110>)
 800133c:	f000 ff52 	bl	80021e4 <HAL_GPIO_WritePin>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000004 	.word	0x20000004
 8001348:	200000ee 	.word	0x200000ee
 800134c:	20000000 	.word	0x20000000
 8001350:	40021800 	.word	0x40021800
 8001354:	200000fc 	.word	0x200000fc

08001358 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800135c:	f000 fbfe 	bl	8001b5c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001360:	f000 f822 	bl	80013a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001364:	f7ff fa48 	bl	80007f8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001368:	f000 fab2 	bl	80018d0 <MX_TIM2_Init>
	MX_SPI1_Init();
 800136c:	f000 f9ba 	bl	80016e4 <MX_SPI1_Init>
	MX_FSMC_Init();
 8001370:	f7ff f972 	bl	8000658 <MX_FSMC_Init>
	MX_I2C1_Init();
 8001374:	f7ff fb38 	bl	80009e8 <MX_I2C1_Init>
	MX_TIM4_Init();
 8001378:	f000 faf6 	bl	8001968 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 800137c:	f000 f87e 	bl	800147c <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	lcd_clear(BLACK);
 8001380:	2000      	movs	r0, #0
 8001382:	f7ff fc25 	bl	8000bd0 <lcd_clear>
	updateTime();
 8001386:	f000 f897 	bl	80014b8 <updateTime>

	while (1) {
		while (!timer2_flag)
 800138a:	bf00      	nop
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <main+0x4c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0fb      	beq.n	800138c <main+0x34>
			;
		timer2_flag = 0;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <main+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	701a      	strb	r2, [r3, #0]

		ds3231_read_time();
 800139a:	f7ff f8f9 	bl	8000590 <ds3231_read_time>

		displayTime();
 800139e:	f000 f8ab 	bl	80014f8 <displayTime>
		while (!timer2_flag)
 80013a2:	e7f2      	b.n	800138a <main+0x32>
 80013a4:	200000f0 	.word	0x200000f0

080013a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ae:	f107 0320 	add.w	r3, r7, #32
 80013b2:	2230      	movs	r2, #48	; 0x30
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f003 fcc6 	bl	8004d48 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <SystemClock_Config+0xcc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a27      	ldr	r2, [pc, #156]	; (8001474 <SystemClock_Config+0xcc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b25      	ldr	r3, [pc, #148]	; (8001474 <SystemClock_Config+0xcc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <SystemClock_Config+0xd0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a21      	ldr	r2, [pc, #132]	; (8001478 <SystemClock_Config+0xd0>)
 80013f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <SystemClock_Config+0xd0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001404:	2302      	movs	r3, #2
 8001406:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140c:	2310      	movs	r3, #16
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001414:	2300      	movs	r3, #0
 8001416:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001418:	2308      	movs	r3, #8
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800141c:	23a8      	movs	r3, #168	; 0xa8
 800141e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001424:	2304      	movs	r3, #4
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4618      	mov	r0, r3
 800142e:	f001 ffe1 	bl	80033f4 <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x94>
		Error_Handler();
 8001438:	f000 f8dc 	bl	80015f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001448:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800144c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800144e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001452:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001454:	f107 030c 	add.w	r3, r7, #12
 8001458:	2105      	movs	r1, #5
 800145a:	4618      	mov	r0, r3
 800145c:	f002 fa42 	bl	80038e4 <HAL_RCC_ClockConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SystemClock_Config+0xc2>
		Error_Handler();
 8001466:	f000 f8c5 	bl	80015f4 <Error_Handler>
	}
}
 800146a:	bf00      	nop
 800146c:	3750      	adds	r7, #80	; 0x50
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40007000 	.word	0x40007000

0800147c <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2120      	movs	r1, #32
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <system_init+0x38>)
 8001486:	f000 fead 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2140      	movs	r1, #64	; 0x40
 800148e:	4809      	ldr	r0, [pc, #36]	; (80014b4 <system_init+0x38>)
 8001490:	f000 fea8 	bl	80021e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2110      	movs	r1, #16
 8001498:	4806      	ldr	r0, [pc, #24]	; (80014b4 <system_init+0x38>)
 800149a:	f000 fea3 	bl	80021e4 <HAL_GPIO_WritePin>

	lcd_init();
 800149e:	f7ff fd6f 	bl	8000f80 <lcd_init>
	ds3231_init();
 80014a2:	f7ff f80f 	bl	80004c4 <ds3231_init>

	timer2_init();
 80014a6:	f000 f8ab 	bl	8001600 <timer2_init>
	timer2_set(50);
 80014aa:	2032      	movs	r0, #50	; 0x32
 80014ac:	f000 f8b2 	bl	8001614 <timer2_set>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40021000 	.word	0x40021000

080014b8 <updateTime>:

void updateTime() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	ds3231_write(ADDRESS_YEAR, 23);
 80014bc:	2117      	movs	r1, #23
 80014be:	2006      	movs	r0, #6
 80014c0:	f7ff f844 	bl	800054c <ds3231_write>
	ds3231_write(ADDRESS_MONTH, 10);
 80014c4:	210a      	movs	r1, #10
 80014c6:	2005      	movs	r0, #5
 80014c8:	f7ff f840 	bl	800054c <ds3231_write>
	ds3231_write(ADDRESS_DATE, 20);
 80014cc:	2114      	movs	r1, #20
 80014ce:	2004      	movs	r0, #4
 80014d0:	f7ff f83c 	bl	800054c <ds3231_write>
	ds3231_write(ADDRESS_DAY, 6);
 80014d4:	2106      	movs	r1, #6
 80014d6:	2003      	movs	r0, #3
 80014d8:	f7ff f838 	bl	800054c <ds3231_write>
	ds3231_write(ADDRESS_HOUR, 20);
 80014dc:	2114      	movs	r1, #20
 80014de:	2002      	movs	r0, #2
 80014e0:	f7ff f834 	bl	800054c <ds3231_write>
	ds3231_write(ADDRESS_MIN, 11);
 80014e4:	210b      	movs	r1, #11
 80014e6:	2001      	movs	r0, #1
 80014e8:	f7ff f830 	bl	800054c <ds3231_write>
	ds3231_write(ADDRESS_SEC, 23);
 80014ec:	2117      	movs	r1, #23
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff f82c 	bl	800054c <ds3231_write>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <displayTime>:

void displayTime() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af04      	add	r7, sp, #16
	lcd_show_int_num(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <displayTime+0xe0>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b29a      	uxth	r2, r3
 8001504:	2318      	movs	r3, #24
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2302      	movs	r3, #2
 8001514:	2164      	movs	r1, #100	; 0x64
 8001516:	2046      	movs	r0, #70	; 0x46
 8001518:	f7ff fc90 	bl	8000e3c <lcd_show_int_num>
	lcd_show_int_num(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <displayTime+0xe4>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b29a      	uxth	r2, r3
 8001522:	2318      	movs	r3, #24
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	2300      	movs	r3, #0
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	2164      	movs	r1, #100	; 0x64
 8001534:	206e      	movs	r0, #110	; 0x6e
 8001536:	f7ff fc81 	bl	8000e3c <lcd_show_int_num>
	lcd_show_int_num(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800153a:	4b29      	ldr	r3, [pc, #164]	; (80015e0 <displayTime+0xe8>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b29a      	uxth	r2, r3
 8001540:	2318      	movs	r3, #24
 8001542:	9302      	str	r3, [sp, #8]
 8001544:	2300      	movs	r3, #0
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2302      	movs	r3, #2
 8001550:	2164      	movs	r1, #100	; 0x64
 8001552:	2096      	movs	r0, #150	; 0x96
 8001554:	f7ff fc72 	bl	8000e3c <lcd_show_int_num>
	lcd_show_int_num(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <displayTime+0xec>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b29a      	uxth	r2, r3
 800155e:	2318      	movs	r3, #24
 8001560:	9302      	str	r3, [sp, #8]
 8001562:	2300      	movs	r3, #0
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2302      	movs	r3, #2
 800156e:	2182      	movs	r1, #130	; 0x82
 8001570:	2014      	movs	r0, #20
 8001572:	f7ff fc63 	bl	8000e3c <lcd_show_int_num>
	lcd_show_int_num(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <displayTime+0xf0>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b29a      	uxth	r2, r3
 800157c:	2318      	movs	r3, #24
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2300      	movs	r3, #0
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2302      	movs	r3, #2
 800158c:	2182      	movs	r1, #130	; 0x82
 800158e:	2046      	movs	r0, #70	; 0x46
 8001590:	f7ff fc54 	bl	8000e3c <lcd_show_int_num>
	lcd_show_int_num(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <displayTime+0xf4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b29a      	uxth	r2, r3
 800159a:	2318      	movs	r3, #24
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2300      	movs	r3, #0
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	2302      	movs	r3, #2
 80015aa:	2182      	movs	r1, #130	; 0x82
 80015ac:	206e      	movs	r0, #110	; 0x6e
 80015ae:	f7ff fc45 	bl	8000e3c <lcd_show_int_num>
	lcd_show_int_num(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <displayTime+0xf8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	2318      	movs	r3, #24
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2300      	movs	r3, #0
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2302      	movs	r3, #2
 80015c8:	2182      	movs	r1, #130	; 0x82
 80015ca:	2096      	movs	r0, #150	; 0x96
 80015cc:	f7ff fc36 	bl	8000e3c <lcd_show_int_num>
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000037 	.word	0x20000037
 80015dc:	20000038 	.word	0x20000038
 80015e0:	20000039 	.word	0x20000039
 80015e4:	2000003b 	.word	0x2000003b
 80015e8:	2000003a 	.word	0x2000003a
 80015ec:	2000003c 	.word	0x2000003c
 80015f0:	2000003d 	.word	0x2000003d

080015f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015fc:	e7fe      	b.n	80015fc <Error_Handler+0x8>
	...

08001600 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <timer2_init+0x10>)
 8001606:	f002 fe9d 	bl	8004344 <HAL_TIM_Base_Start_IT>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000154 	.word	0x20000154

08001614 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b07      	ldr	r3, [pc, #28]	; (8001640 <timer2_set+0x2c>)
 8001622:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <timer2_set+0x2c>)
 8001626:	881a      	ldrh	r2, [r3, #0]
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <timer2_set+0x30>)
 800162a:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <timer2_set+0x34>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	200000f4 	.word	0x200000f4
 8001644:	200000f2 	.word	0x200000f2
 8001648:	200000f0 	.word	0x200000f0

0800164c <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800165c:	d114      	bne.n	8001688 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d010      	beq.n	8001688 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001670:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d106      	bne.n	8001688 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x80>)
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001682:	881a      	ldrh	r2, [r3, #0]
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001686:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d116      	bne.n	80016c0 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d010      	beq.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016a4:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d106      	bne.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80016b6:	881a      	ldrh	r2, [r3, #0]
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80016ba:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 80016bc:	f7ff fdc0 	bl	8001240 <led_7seg_display>
	}
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200000f2 	.word	0x200000f2
 80016cc:	200000f0 	.word	0x200000f0
 80016d0:	200000f4 	.word	0x200000f4
 80016d4:	40000800 	.word	0x40000800
 80016d8:	200000f8 	.word	0x200000f8
 80016dc:	200000f6 	.word	0x200000f6
 80016e0:	200000fa 	.word	0x200000fa

080016e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_SPI1_Init+0x64>)
 80016ea:	4a18      	ldr	r2, [pc, #96]	; (800174c <MX_SPI1_Init+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MX_SPI1_Init+0x64>)
 80016f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI1_Init+0x64>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_SPI1_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_SPI1_Init+0x64>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI1_Init+0x64>)
 800170a:	2200      	movs	r2, #0
 800170c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_SPI1_Init+0x64>)
 8001710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001714:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI1_Init+0x64>)
 8001718:	2200      	movs	r2, #0
 800171a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_SPI1_Init+0x64>)
 800171e:	2200      	movs	r2, #0
 8001720:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI1_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_SPI1_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI1_Init+0x64>)
 8001730:	220a      	movs	r2, #10
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_SPI1_Init+0x64>)
 8001736:	f002 fae1 	bl	8003cfc <HAL_SPI_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001740:	f7ff ff58 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	200000fc 	.word	0x200000fc
 800174c:	40013000 	.word	0x40013000

08001750 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_SPI_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12b      	bne.n	80017ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 800177c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_SPI_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017aa:	2338      	movs	r3, #56	; 0x38
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ba:	2305      	movs	r3, #5
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_SPI_MspInit+0x8c>)
 80017c6:	f000 fb71 	bl	8001eac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40013000 	.word	0x40013000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020400 	.word	0x40020400

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_MspInit+0x4c>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a0f      	ldr	r2, [pc, #60]	; (800182c <HAL_MspInit+0x4c>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_MspInit+0x4c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_MspInit+0x4c>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	4a08      	ldr	r2, [pc, #32]	; (800182c <HAL_MspInit+0x4c>)
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	6413      	str	r3, [r2, #64]	; 0x40
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40023800 	.word	0x40023800

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler+0x4>

08001836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	e7fe      	b.n	8001840 <MemManage_Handler+0x4>

08001842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler+0x4>

0800184e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800187c:	f000 f9c0 	bl	8001c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <TIM2_IRQHandler+0x10>)
 800188a:	f002 fdcb 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000154 	.word	0x20000154

08001898 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <TIM4_IRQHandler+0x10>)
 800189e:	f002 fdc1 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2000019c 	.word	0x2000019c

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d6:	f107 0308 	add.w	r3, r7, #8
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e4:	463b      	mov	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_TIM2_Init+0x94>)
 80018ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_TIM2_Init+0x94>)
 80018f6:	f240 3247 	movw	r2, #839	; 0x347
 80018fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_TIM2_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_TIM2_Init+0x94>)
 8001904:	2263      	movs	r2, #99	; 0x63
 8001906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_TIM2_Init+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM2_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_TIM2_Init+0x94>)
 8001916:	f002 fcc5 	bl	80042a4 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001920:	f7ff fe68 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <MX_TIM2_Init+0x94>)
 8001932:	f002 fe7f 	bl	8004634 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800193c:	f7ff fe5a 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_TIM2_Init+0x94>)
 800194e:	f003 f89b 	bl	8004a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001958:	f7ff fe4c 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000154 	.word	0x20000154

08001968 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	463b      	mov	r3, r7
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <MX_TIM4_Init+0x94>)
 8001986:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <MX_TIM4_Init+0x98>)
 8001988:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <MX_TIM4_Init+0x94>)
 800198c:	f240 3247 	movw	r2, #839	; 0x347
 8001990:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_TIM4_Init+0x94>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_TIM4_Init+0x94>)
 800199a:	2263      	movs	r2, #99	; 0x63
 800199c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_TIM4_Init+0x94>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_TIM4_Init+0x94>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019aa:	4814      	ldr	r0, [pc, #80]	; (80019fc <MX_TIM4_Init+0x94>)
 80019ac:	f002 fc7a 	bl	80042a4 <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80019b6:	f7ff fe1d 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	480d      	ldr	r0, [pc, #52]	; (80019fc <MX_TIM4_Init+0x94>)
 80019c8:	f002 fe34 	bl	8004634 <HAL_TIM_ConfigClockSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80019d2:	f7ff fe0f 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	4619      	mov	r1, r3
 80019e2:	4806      	ldr	r0, [pc, #24]	; (80019fc <MX_TIM4_Init+0x94>)
 80019e4:	f003 f850 	bl	8004a88 <HAL_TIMEx_MasterConfigSynchronization>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80019ee:	f7ff fe01 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000019c 	.word	0x2000019c
 8001a00:	40000800 	.word	0x40000800

08001a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a14:	d116      	bne.n	8001a44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b1a      	ldr	r3, [pc, #104]	; (8001a84 <HAL_TIM_Base_MspInit+0x80>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <HAL_TIM_Base_MspInit+0x80>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_TIM_Base_MspInit+0x80>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	201c      	movs	r0, #28
 8001a38:	f000 fa01 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a3c:	201c      	movs	r0, #28
 8001a3e:	f000 fa1a 	bl	8001e76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a42:	e01a      	b.n	8001a7a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_TIM_Base_MspInit+0x84>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d115      	bne.n	8001a7a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_TIM_Base_MspInit+0x80>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <HAL_TIM_Base_MspInit+0x80>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x80>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201e      	movs	r0, #30
 8001a70:	f000 f9e5 	bl	8001e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a74:	201e      	movs	r0, #30
 8001a76:	f000 f9fe 	bl	8001e76 <HAL_NVIC_EnableIRQ>
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40000800 	.word	0x40000800

08001a8c <BCD2DEC>:
 */
#include "utils.h"

#include <stdlib.h>

uint8_t BCD2DEC(uint8_t data) {
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	0092      	lsls	r2, r2, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	b2db      	uxtb	r3, r3
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <DEC2BCD+0x44>)
 8001ace:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	b258      	sxtb	r0, r3
 8001ada:	79fa      	ldrb	r2, [r7, #7]
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <DEC2BCD+0x44>)
 8001ade:	fba3 1302 	umull	r1, r3, r3, r2
 8001ae2:	08d9      	lsrs	r1, r3, #3
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	4303      	orrs	r3, r0
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	cccccccd 	.word	0xcccccccd

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b32:	f7ff febb 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f003 f90f 	bl	8004d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fc0d 	bl	8001358 <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b4c:	08007d60 	.word	0x08007d60
  ldr r2, =_sbss
 8001b50:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b54:	200001e8 	.word	0x200001e8

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f94f 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f000 f808 	bl	8001ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fe26 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x54>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x58>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f967 	bl	8001e92 <HAL_SYSTICK_Config>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e00e      	b.n	8001bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b0f      	cmp	r3, #15
 8001bd2:	d80a      	bhi.n	8001bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	f000 f92f 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be0:	4a06      	ldr	r2, [pc, #24]	; (8001bfc <HAL_InitTick+0x5c>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	2000000c 	.word	0x2000000c

08001c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x20>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x24>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4413      	add	r3, r2
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_IncTick+0x24>)
 8001c12:	6013      	str	r3, [r2, #0]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000010 	.word	0x20000010
 8001c24:	200001e4 	.word	0x200001e4

08001c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_GetTick+0x14>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200001e4 	.word	0x200001e4

08001c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff ffee 	bl	8001c28 <HAL_GetTick>
 8001c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	d005      	beq.n	8001c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <HAL_Delay+0x44>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c66:	bf00      	nop
 8001c68:	f7ff ffde 	bl	8001c28 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f7      	bhi.n	8001c68 <HAL_Delay+0x28>
  {
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000010 	.word	0x20000010

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e16b      	b.n	80021a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	f040 815a 	bne.w	800219a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d005      	beq.n	8001efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d130      	bne.n	8001f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	2203      	movs	r2, #3
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f34:	2201      	movs	r2, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d017      	beq.n	8001f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d123      	bne.n	8001ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	08da      	lsrs	r2, r3, #3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3208      	adds	r2, #8
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	08da      	lsrs	r2, r3, #3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3208      	adds	r2, #8
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0203 	and.w	r2, r3, #3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 80b4 	beq.w	800219a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b60      	ldr	r3, [pc, #384]	; (80021b8 <HAL_GPIO_Init+0x30c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a5f      	ldr	r2, [pc, #380]	; (80021b8 <HAL_GPIO_Init+0x30c>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <HAL_GPIO_Init+0x30c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204e:	4a5b      	ldr	r2, [pc, #364]	; (80021bc <HAL_GPIO_Init+0x310>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	089b      	lsrs	r3, r3, #2
 8002054:	3302      	adds	r3, #2
 8002056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	220f      	movs	r2, #15
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_GPIO_Init+0x314>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02b      	beq.n	80020d2 <HAL_GPIO_Init+0x226>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_GPIO_Init+0x318>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x222>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_GPIO_Init+0x31c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x21e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_GPIO_Init+0x320>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x21a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4e      	ldr	r2, [pc, #312]	; (80021d0 <HAL_GPIO_Init+0x324>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x216>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4d      	ldr	r2, [pc, #308]	; (80021d4 <HAL_GPIO_Init+0x328>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x212>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4c      	ldr	r2, [pc, #304]	; (80021d8 <HAL_GPIO_Init+0x32c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4b      	ldr	r2, [pc, #300]	; (80021dc <HAL_GPIO_Init+0x330>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x20a>
 80020b2:	2307      	movs	r3, #7
 80020b4:	e00e      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020b6:	2308      	movs	r3, #8
 80020b8:	e00c      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020ba:	2306      	movs	r3, #6
 80020bc:	e00a      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020be:	2305      	movs	r3, #5
 80020c0:	e008      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020c2:	2304      	movs	r3, #4
 80020c4:	e006      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e004      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e002      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <HAL_GPIO_Init+0x228>
 80020d2:	2300      	movs	r3, #0
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	f002 0203 	and.w	r2, r2, #3
 80020da:	0092      	lsls	r2, r2, #2
 80020dc:	4093      	lsls	r3, r2
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e4:	4935      	ldr	r1, [pc, #212]	; (80021bc <HAL_GPIO_Init+0x310>)
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	089b      	lsrs	r3, r3, #2
 80020ea:	3302      	adds	r3, #2
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_GPIO_Init+0x334>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_GPIO_Init+0x334>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_GPIO_Init+0x334>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002140:	4a27      	ldr	r2, [pc, #156]	; (80021e0 <HAL_GPIO_Init+0x334>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_GPIO_Init+0x334>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800216a:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_GPIO_Init+0x334>)
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002170:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_GPIO_Init+0x334>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002194:	4a12      	ldr	r2, [pc, #72]	; (80021e0 <HAL_GPIO_Init+0x334>)
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3301      	adds	r3, #1
 800219e:	61fb      	str	r3, [r7, #28]
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	f67f ae90 	bls.w	8001ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3724      	adds	r7, #36	; 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40013800 	.word	0x40013800
 80021c0:	40020000 	.word	0x40020000
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40020800 	.word	0x40020800
 80021cc:	40020c00 	.word	0x40020c00
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40021400 	.word	0x40021400
 80021d8:	40021800 	.word	0x40021800
 80021dc:	40021c00 	.word	0x40021c00
 80021e0:	40013c00 	.word	0x40013c00

080021e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	807b      	strh	r3, [r7, #2]
 80021f0:	4613      	mov	r3, r2
 80021f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002200:	e003      	b.n	800220a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002202:	887b      	ldrh	r3, [r7, #2]
 8002204:	041a      	lsls	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	619a      	str	r2, [r3, #24]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e12b      	b.n	8002482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d106      	bne.n	8002244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe fc00 	bl	8000a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2224      	movs	r2, #36	; 0x24
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800227c:	f001 fd2a 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8002280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a81      	ldr	r2, [pc, #516]	; (800248c <HAL_I2C_Init+0x274>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d807      	bhi.n	800229c <HAL_I2C_Init+0x84>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4a80      	ldr	r2, [pc, #512]	; (8002490 <HAL_I2C_Init+0x278>)
 8002290:	4293      	cmp	r3, r2
 8002292:	bf94      	ite	ls
 8002294:	2301      	movls	r3, #1
 8002296:	2300      	movhi	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e006      	b.n	80022aa <HAL_I2C_Init+0x92>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4a7d      	ldr	r2, [pc, #500]	; (8002494 <HAL_I2C_Init+0x27c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	bf94      	ite	ls
 80022a4:	2301      	movls	r3, #1
 80022a6:	2300      	movhi	r3, #0
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0e7      	b.n	8002482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a78      	ldr	r2, [pc, #480]	; (8002498 <HAL_I2C_Init+0x280>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9b      	lsrs	r3, r3, #18
 80022bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_I2C_Init+0x274>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d802      	bhi.n	80022ec <HAL_I2C_Init+0xd4>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	3301      	adds	r3, #1
 80022ea:	e009      	b.n	8002300 <HAL_I2C_Init+0xe8>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_I2C_Init+0x284>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	3301      	adds	r3, #1
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	430b      	orrs	r3, r1
 8002306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	495c      	ldr	r1, [pc, #368]	; (800248c <HAL_I2C_Init+0x274>)
 800231c:	428b      	cmp	r3, r1
 800231e:	d819      	bhi.n	8002354 <HAL_I2C_Init+0x13c>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e59      	subs	r1, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fbb1 f3f3 	udiv	r3, r1, r3
 800232e:	1c59      	adds	r1, r3, #1
 8002330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002334:	400b      	ands	r3, r1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_I2C_Init+0x138>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e59      	subs	r1, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fbb1 f3f3 	udiv	r3, r1, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234e:	e051      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 8002350:	2304      	movs	r3, #4
 8002352:	e04f      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <HAL_I2C_Init+0x168>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1e58      	subs	r0, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	440b      	add	r3, r1
 800236a:	fbb0 f3f3 	udiv	r3, r0, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	2b00      	cmp	r3, #0
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e012      	b.n	80023a6 <HAL_I2C_Init+0x18e>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	0099      	lsls	r1, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_I2C_Init+0x196>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e022      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10e      	bne.n	80023d4 <HAL_I2C_Init+0x1bc>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1e58      	subs	r0, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6859      	ldr	r1, [r3, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	440b      	add	r3, r1
 80023c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d2:	e00f      	b.n	80023f4 <HAL_I2C_Init+0x1dc>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	6809      	ldr	r1, [r1, #0]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6911      	ldr	r1, [r2, #16]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	430b      	orrs	r3, r1
 8002436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	000186a0 	.word	0x000186a0
 8002490:	001e847f 	.word	0x001e847f
 8002494:	003d08ff 	.word	0x003d08ff
 8002498:	431bde83 	.word	0x431bde83
 800249c:	10624dd3 	.word	0x10624dd3

080024a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	4608      	mov	r0, r1
 80024aa:	4611      	mov	r1, r2
 80024ac:	461a      	mov	r2, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	817b      	strh	r3, [r7, #10]
 80024b2:	460b      	mov	r3, r1
 80024b4:	813b      	strh	r3, [r7, #8]
 80024b6:	4613      	mov	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024ba:	f7ff fbb5 	bl	8001c28 <HAL_GetTick>
 80024be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	f040 80d9 	bne.w	8002680 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2319      	movs	r3, #25
 80024d4:	2201      	movs	r2, #1
 80024d6:	496d      	ldr	r1, [pc, #436]	; (800268c <HAL_I2C_Mem_Write+0x1ec>)
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 fdad 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
 80024e6:	e0cc      	b.n	8002682 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_I2C_Mem_Write+0x56>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e0c5      	b.n	8002682 <HAL_I2C_Mem_Write+0x1e2>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d007      	beq.n	800251c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2221      	movs	r2, #33	; 0x21
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a3a      	ldr	r2, [r7, #32]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800254c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4a4d      	ldr	r2, [pc, #308]	; (8002690 <HAL_I2C_Mem_Write+0x1f0>)
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255e:	88f8      	ldrh	r0, [r7, #6]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	8979      	ldrh	r1, [r7, #10]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	4603      	mov	r3, r0
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fbe4 	bl	8002d3c <I2C_RequestMemoryWrite>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d052      	beq.n	8002620 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e081      	b.n	8002682 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 fe2e 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00d      	beq.n	80025aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	2b04      	cmp	r3, #4
 8002594:	d107      	bne.n	80025a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	781a      	ldrb	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d11b      	bne.n	8002620 <HAL_I2C_Mem_Write+0x180>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d017      	beq.n	8002620 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	781a      	ldrb	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1aa      	bne.n	800257e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 fe1a 	bl	8003266 <I2C_WaitOnBTFFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	2b04      	cmp	r3, #4
 800263e:	d107      	bne.n	8002650 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e016      	b.n	8002682 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2220      	movs	r2, #32
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	e000      	b.n	8002682 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	00100002 	.word	0x00100002
 8002690:	ffff0000 	.word	0xffff0000

08002694 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	; 0x30
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	817b      	strh	r3, [r7, #10]
 80026a6:	460b      	mov	r3, r1
 80026a8:	813b      	strh	r3, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026ae:	f7ff fabb 	bl	8001c28 <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b20      	cmp	r3, #32
 80026be:	f040 8208 	bne.w	8002ad2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2319      	movs	r3, #25
 80026c8:	2201      	movs	r2, #1
 80026ca:	497b      	ldr	r1, [pc, #492]	; (80028b8 <HAL_I2C_Mem_Read+0x224>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fcb3 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026d8:	2302      	movs	r3, #2
 80026da:	e1fb      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_I2C_Mem_Read+0x56>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e1f4      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d007      	beq.n	8002710 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2222      	movs	r2, #34	; 0x22
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800273a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a5b      	ldr	r2, [pc, #364]	; (80028bc <HAL_I2C_Mem_Read+0x228>)
 8002750:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002752:	88f8      	ldrh	r0, [r7, #6]
 8002754:	893a      	ldrh	r2, [r7, #8]
 8002756:	8979      	ldrh	r1, [r7, #10]
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4603      	mov	r3, r0
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fb80 	bl	8002e68 <I2C_RequestMemoryRead>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1b0      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	623b      	str	r3, [r7, #32]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e184      	b.n	8002aac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d11b      	bne.n	80027e2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e164      	b.n	8002aac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d11b      	bne.n	8002822 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002808:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	e144      	b.n	8002aac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002838:	e138      	b.n	8002aac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283e:	2b03      	cmp	r3, #3
 8002840:	f200 80f1 	bhi.w	8002a26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002848:	2b01      	cmp	r3, #1
 800284a:	d123      	bne.n	8002894 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fd49 	bl	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e139      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691a      	ldr	r2, [r3, #16]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002892:	e10b      	b.n	8002aac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b02      	cmp	r3, #2
 800289a:	d14e      	bne.n	800293a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	2200      	movs	r2, #0
 80028a4:	4906      	ldr	r1, [pc, #24]	; (80028c0 <HAL_I2C_Mem_Read+0x22c>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fbc6 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e10e      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
 80028b6:	bf00      	nop
 80028b8:	00100002 	.word	0x00100002
 80028bc:	ffff0000 	.word	0xffff0000
 80028c0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691a      	ldr	r2, [r3, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292e:	b29b      	uxth	r3, r3
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002938:	e0b8      	b.n	8002aac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002940:	2200      	movs	r2, #0
 8002942:	4966      	ldr	r1, [pc, #408]	; (8002adc <HAL_I2C_Mem_Read+0x448>)
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fb77 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0bf      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691a      	ldr	r2, [r3, #16]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	1c5a      	adds	r2, r3, #1
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298c:	b29b      	uxth	r3, r3
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299c:	2200      	movs	r2, #0
 800299e:	494f      	ldr	r1, [pc, #316]	; (8002adc <HAL_I2C_Mem_Read+0x448>)
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fb49 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e091      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a24:	e042      	b.n	8002aac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 fc5c 	bl	80032e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e04c      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d118      	bne.n	8002aac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f aec2 	bne.w	800283a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2220      	movs	r2, #32
 8002aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	e000      	b.n	8002ad4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	00010004 	.word	0x00010004

08002ae0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08a      	sub	sp, #40	; 0x28
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	460b      	mov	r3, r1
 8002aee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff f89a 	bl	8001c28 <HAL_GetTick>
 8002af4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002af6:	2301      	movs	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	f040 8111 	bne.w	8002d2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2319      	movs	r3, #25
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4988      	ldr	r1, [pc, #544]	; (8002d34 <HAL_I2C_IsDeviceReady+0x254>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fa90 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e104      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_I2C_IsDeviceReady+0x50>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e0fd      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x24c>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d007      	beq.n	8002b56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2224      	movs	r2, #36	; 0x24
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a70      	ldr	r2, [pc, #448]	; (8002d38 <HAL_I2C_IsDeviceReady+0x258>)
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fa4e 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb0:	d103      	bne.n	8002bba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0b6      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bbe:	897b      	ldrh	r3, [r7, #10]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bcc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002bce:	f7ff f82b 	bl	8001c28 <HAL_GetTick>
 8002bd2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c02:	e025      	b.n	8002c50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c04:	f7ff f810 	bl	8001c28 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <HAL_I2C_IsDeviceReady+0x13a>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	22a0      	movs	r2, #160	; 0xa0
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2ba0      	cmp	r3, #160	; 0xa0
 8002c5a:	d005      	beq.n	8002c68 <HAL_I2C_IsDeviceReady+0x188>
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <HAL_I2C_IsDeviceReady+0x188>
 8002c62:	7dbb      	ldrb	r3, [r7, #22]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0cd      	beq.n	8002c04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d129      	bne.n	8002cd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2319      	movs	r3, #25
 8002caa:	2201      	movs	r2, #1
 8002cac:	4921      	ldr	r1, [pc, #132]	; (8002d34 <HAL_I2C_IsDeviceReady+0x254>)
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f9c2 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e036      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e02c      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2319      	movs	r3, #25
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	490f      	ldr	r1, [pc, #60]	; (8002d34 <HAL_I2C_IsDeviceReady+0x254>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 f99e 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e012      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	f4ff af32 	bcc.w	8002b7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d2a:	2302      	movs	r3, #2
  }
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	00100002 	.word	0x00100002
 8002d38:	ffff0000 	.word	0xffff0000

08002d3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	4608      	mov	r0, r1
 8002d46:	4611      	mov	r1, r2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	817b      	strh	r3, [r7, #10]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	813b      	strh	r3, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f960 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00d      	beq.n	8002d9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8c:	d103      	bne.n	8002d96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e05f      	b.n	8002e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	492d      	ldr	r1, [pc, #180]	; (8002e64 <I2C_RequestMemoryWrite+0x128>)
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f998 	bl	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e04c      	b.n	8002e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f000 fa02 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00d      	beq.n	8002e02 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d107      	bne.n	8002dfe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e02b      	b.n	8002e5a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d105      	bne.n	8002e14 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e08:	893b      	ldrh	r3, [r7, #8]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]
 8002e12:	e021      	b.n	8002e58 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e14:	893b      	ldrh	r3, [r7, #8]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f9dc 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d107      	bne.n	8002e4a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e005      	b.n	8002e5a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e4e:	893b      	ldrh	r3, [r7, #8]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	00010002 	.word	0x00010002

08002e68 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e90:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8c2 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec8:	d103      	bne.n	8002ed2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0aa      	b.n	800302c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ee4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	4952      	ldr	r1, [pc, #328]	; (8003034 <I2C_RequestMemoryRead+0x1cc>)
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f8fa 	bl	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e097      	b.n	800302c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f964 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d107      	bne.n	8002f3a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e076      	b.n	800302c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f44:	893b      	ldrh	r3, [r7, #8]
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]
 8002f4e:	e021      	b.n	8002f94 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f50:	893b      	ldrh	r3, [r7, #8]
 8002f52:	0a1b      	lsrs	r3, r3, #8
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f60:	6a39      	ldr	r1, [r7, #32]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f93e 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d107      	bne.n	8002f86 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e050      	b.n	800302c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f8a:	893b      	ldrh	r3, [r7, #8]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	6a39      	ldr	r1, [r7, #32]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f923 	bl	80031e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d107      	bne.n	8002fbc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e035      	b.n	800302c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f82b 	bl	8003038 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00d      	beq.n	8003004 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff6:	d103      	bne.n	8003000 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e013      	b.n	800302c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003004:	897b      	ldrh	r3, [r7, #10]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	6a3a      	ldr	r2, [r7, #32]
 8003018:	4906      	ldr	r1, [pc, #24]	; (8003034 <I2C_RequestMemoryRead+0x1cc>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f863 	bl	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010002 	.word	0x00010002

08003038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003048:	e025      	b.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d021      	beq.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fde9 	bl	8001c28 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d116      	bne.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f043 0220 	orr.w	r2, r3, #32
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e023      	b.n	80030de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	e00c      	b.n	80030d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d0b6      	beq.n	800304a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f4:	e051      	b.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003104:	d123      	bne.n	800314e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003114:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f043 0204 	orr.w	r2, r3, #4
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e046      	b.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d021      	beq.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7fe fd67 	bl	8001c28 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d116      	bne.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e020      	b.n	80031dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10c      	bne.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	43da      	mvns	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4013      	ands	r3, r2
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e00b      	b.n	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf14      	ite	ne
 80031d0:	2301      	movne	r3, #1
 80031d2:	2300      	moveq	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d18d      	bne.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f0:	e02d      	b.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8ce 	bl	8003394 <I2C_IsAcknowledgeFailed>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e02d      	b.n	800325e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d021      	beq.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fd0d 	bl	8001c28 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d116      	bne.n	800324e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e007      	b.n	800325e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d1ca      	bne.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003272:	e02d      	b.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 f88d 	bl	8003394 <I2C_IsAcknowledgeFailed>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e02d      	b.n	80032e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d021      	beq.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328c:	f7fe fccc 	bl	8001c28 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d116      	bne.n	80032d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d1ca      	bne.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f4:	e042      	b.n	800337c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d119      	bne.n	8003338 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0210 	mvn.w	r2, #16
 800330c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e029      	b.n	800338c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003338:	f7fe fc76 	bl	8001c28 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	429a      	cmp	r2, r3
 8003346:	d302      	bcc.n	800334e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d116      	bne.n	800337c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d1b5      	bne.n	80032f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033aa:	d11b      	bne.n	80033e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e267      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d075      	beq.n	80034fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00c      	beq.n	8003438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b85      	ldr	r3, [pc, #532]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003426:	2b08      	cmp	r3, #8
 8003428:	d112      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b82      	ldr	r3, [pc, #520]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003436:	d10b      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4b7e      	ldr	r3, [pc, #504]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05b      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d157      	bne.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e242      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x74>
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x98>
 8003472:	4b70      	ldr	r3, [pc, #448]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6f      	ldr	r2, [pc, #444]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6c      	ldr	r2, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 800348c:	4b69      	ldr	r3, [pc, #420]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a68      	ldr	r2, [pc, #416]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b66      	ldr	r3, [pc, #408]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fbbc 	bl	8001c28 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fbb8 	bl	8001c28 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e207      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5b      	ldr	r3, [pc, #364]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fba8 	bl	8001c28 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe fba4 	bl	8001c28 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	; 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1f3      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b51      	ldr	r3, [pc, #324]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b47      	ldr	r3, [pc, #284]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b44      	ldr	r3, [pc, #272]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b41      	ldr	r3, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1c7      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3b      	ldr	r3, [pc, #236]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4937      	ldr	r1, [pc, #220]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_RCC_OscConfig+0x244>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fb5d 	bl	8001c28 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7fe fb59 	bl	8001c28 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1a8      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2b      	ldr	r3, [pc, #172]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4925      	ldr	r1, [pc, #148]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b24      	ldr	r3, [pc, #144]	; (8003638 <HAL_RCC_OscConfig+0x244>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe fb3c 	bl	8001c28 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe fb38 	bl	8001c28 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e187      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d036      	beq.n	800364c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_RCC_OscConfig+0x248>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe fb1c 	bl	8001c28 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe fb18 	bl	8001c28 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e167      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_OscConfig+0x240>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x200>
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <HAL_RCC_OscConfig+0x248>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fb05 	bl	8001c28 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00e      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fb01 	bl	8001c28 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d907      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e150      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b88      	ldr	r3, [pc, #544]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ea      	bne.n	8003622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b81      	ldr	r3, [pc, #516]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b7d      	ldr	r3, [pc, #500]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a7c      	ldr	r2, [pc, #496]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b7a      	ldr	r3, [pc, #488]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b77      	ldr	r3, [pc, #476]	; (8003868 <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b74      	ldr	r3, [pc, #464]	; (8003868 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a73      	ldr	r2, [pc, #460]	; (8003868 <HAL_RCC_OscConfig+0x474>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fac1 	bl	8001c28 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe fabd 	bl	8001c28 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e10c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b6a      	ldr	r3, [pc, #424]	; (8003868 <HAL_RCC_OscConfig+0x474>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x2ea>
 80036d0:	4b64      	ldr	r3, [pc, #400]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d4:	4a63      	ldr	r2, [pc, #396]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	; 0x70
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x30c>
 80036e6:	4b5f      	ldr	r3, [pc, #380]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a5e      	ldr	r2, [pc, #376]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	4b5c      	ldr	r3, [pc, #368]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	4a5b      	ldr	r2, [pc, #364]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	; 0x70
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 8003700:	4b58      	ldr	r3, [pc, #352]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a57      	ldr	r2, [pc, #348]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	4b55      	ldr	r3, [pc, #340]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a54      	ldr	r2, [pc, #336]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fa82 	bl	8001c28 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fe fa7e 	bl	8001c28 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0cb      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	4b49      	ldr	r3, [pc, #292]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RCC_OscConfig+0x334>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe fa6c 	bl	8001c28 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe fa68 	bl	8001c28 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0b5      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	4b3e      	ldr	r3, [pc, #248]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b39      	ldr	r3, [pc, #228]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	4a38      	ldr	r2, [pc, #224]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80a1 	beq.w	80038d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003792:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d05c      	beq.n	8003858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d141      	bne.n	800382a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b31      	ldr	r3, [pc, #196]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fa3c 	bl	8001c28 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fa38 	bl	8001c28 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e087      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	491b      	ldr	r1, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x478>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fa11 	bl	8001c28 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe fa0d 	bl	8001c28 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e05c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x416>
 8003828:	e054      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_RCC_OscConfig+0x478>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe f9fa 	bl	8001c28 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe f9f6 	bl	8001c28 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e045      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_OscConfig+0x470>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x444>
 8003856:	e03d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e038      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	40007000 	.word	0x40007000
 800386c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003870:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCC_OscConfig+0x4ec>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d028      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d121      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d11a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0cc      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b68      	ldr	r3, [pc, #416]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d90c      	bls.n	8003920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b65      	ldr	r3, [pc, #404]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b63      	ldr	r3, [pc, #396]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b8      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003938:	4b59      	ldr	r3, [pc, #356]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a58      	ldr	r2, [pc, #352]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003950:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a52      	ldr	r2, [pc, #328]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800395a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b50      	ldr	r3, [pc, #320]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	494d      	ldr	r1, [pc, #308]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d119      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b3f      	ldr	r3, [pc, #252]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3b      	ldr	r3, [pc, #236]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e067      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b37      	ldr	r3, [pc, #220]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4934      	ldr	r1, [pc, #208]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe f928 	bl	8001c28 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe f924 	bl	8001c28 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e04f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d20c      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e032      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4916      	ldr	r1, [pc, #88]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a56:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	490e      	ldr	r1, [pc, #56]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 f821 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	490a      	ldr	r1, [pc, #40]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a86:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe f888 	bl	8001ba0 <HAL_InitTick>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023c00 	.word	0x40023c00
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08007d38 	.word	0x08007d38
 8003aa8:	20000008 	.word	0x20000008
 8003aac:	2000000c 	.word	0x2000000c

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab4:	b094      	sub	sp, #80	; 0x50
 8003ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	647b      	str	r3, [r7, #68]	; 0x44
 8003abc:	2300      	movs	r3, #0
 8003abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac8:	4b79      	ldr	r3, [pc, #484]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d00d      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	f200 80e1 	bhi.w	8003c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae2:	e0db      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b73      	ldr	r3, [pc, #460]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ae8:	e0db      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aea:	4b73      	ldr	r3, [pc, #460]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aee:	e0d8      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af0:	4b6f      	ldr	r3, [pc, #444]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afa:	4b6d      	ldr	r3, [pc, #436]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d063      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b6a      	ldr	r3, [pc, #424]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	f04f 0000 	mov.w	r0, #0
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	0159      	lsls	r1, r3, #5
 8003b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b34:	0150      	lsls	r0, r2, #5
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	1a51      	subs	r1, r2, r1
 8003b3e:	6139      	str	r1, [r7, #16]
 8003b40:	4629      	mov	r1, r5
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b54:	4659      	mov	r1, fp
 8003b56:	018b      	lsls	r3, r1, #6
 8003b58:	4651      	mov	r1, sl
 8003b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b5e:	4651      	mov	r1, sl
 8003b60:	018a      	lsls	r2, r1, #6
 8003b62:	4651      	mov	r1, sl
 8003b64:	ebb2 0801 	subs.w	r8, r2, r1
 8003b68:	4659      	mov	r1, fp
 8003b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b82:	4690      	mov	r8, r2
 8003b84:	4699      	mov	r9, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	eb18 0303 	adds.w	r3, r8, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	462b      	mov	r3, r5
 8003b90:	eb49 0303 	adc.w	r3, r9, r3
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	024b      	lsls	r3, r1, #9
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bac:	4621      	mov	r1, r4
 8003bae:	024a      	lsls	r2, r1, #9
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bc0:	f7fc fb02 	bl	80001c8 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	e058      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4611      	mov	r1, r2
 8003bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	2300      	movs	r3, #0
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
 8003be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	0159      	lsls	r1, r3, #5
 8003bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfa:	0150      	lsls	r0, r2, #5
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4641      	mov	r1, r8
 8003c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c20:	ebb2 040a 	subs.w	r4, r2, sl
 8003c24:	eb63 050b 	sbc.w	r5, r3, fp
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	00eb      	lsls	r3, r5, #3
 8003c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c36:	00e2      	lsls	r2, r4, #3
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4643      	mov	r3, r8
 8003c3e:	18e3      	adds	r3, r4, r3
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	464b      	mov	r3, r9
 8003c44:	eb45 0303 	adc.w	r3, r5, r3
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c56:	4629      	mov	r1, r5
 8003c58:	028b      	lsls	r3, r1, #10
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c60:	4621      	mov	r1, r4
 8003c62:	028a      	lsls	r2, r1, #10
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	61fa      	str	r2, [r7, #28]
 8003c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c74:	f7fc faa8 	bl	80001c8 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3750      	adds	r7, #80	; 0x50
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	007a1200 	.word	0x007a1200

08003cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000008 	.word	0x20000008

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff0 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0a9b      	lsrs	r3, r3, #10
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4903      	ldr	r1, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	08007d48 	.word	0x08007d48

08003cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e07b      	b.n	8003e06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d1e:	d009      	beq.n	8003d34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
 8003d26:	e005      	b.n	8003d34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fcfe 	bl	8001750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db8:	ea42 0103 	orr.w	r1, r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	f003 0104 	and.w	r1, r3, #4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0210 	and.w	r2, r3, #16
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b088      	sub	sp, #32
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_SPI_Transmit+0x22>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e126      	b.n	800407e <HAL_SPI_Transmit+0x270>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e38:	f7fd fef6 	bl	8001c28 <HAL_GetTick>
 8003e3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d002      	beq.n	8003e54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e52:	e10b      	b.n	800406c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_SPI_Transmit+0x52>
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d102      	bne.n	8003e66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e64:	e102      	b.n	800406c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	88fa      	ldrh	r2, [r7, #6]
 8003e7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eac:	d10f      	bne.n	8003ece <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ebc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ecc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	d007      	beq.n	8003eec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef4:	d14b      	bne.n	8003f8e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_SPI_Transmit+0xf6>
 8003efe:	8afb      	ldrh	r3, [r7, #22]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d13e      	bne.n	8003f82 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	881a      	ldrh	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	1c9a      	adds	r2, r3, #2
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f28:	e02b      	b.n	8003f82 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d112      	bne.n	8003f5e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	1c9a      	adds	r2, r3, #2
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f5c:	e011      	b.n	8003f82 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5e:	f7fd fe63 	bl	8001c28 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d803      	bhi.n	8003f76 <HAL_SPI_Transmit+0x168>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Transmit+0x16e>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d102      	bne.n	8003f82 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f80:	e074      	b.n	800406c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1ce      	bne.n	8003f2a <HAL_SPI_Transmit+0x11c>
 8003f8c:	e04c      	b.n	8004028 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_Transmit+0x18e>
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d140      	bne.n	800401e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	7812      	ldrb	r2, [r2, #0]
 8003fa8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fc2:	e02c      	b.n	800401e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d113      	bne.n	8003ffa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	1c5a      	adds	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ff8:	e011      	b.n	800401e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ffa:	f7fd fe15 	bl	8001c28 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d803      	bhi.n	8004012 <HAL_SPI_Transmit+0x204>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d102      	bne.n	8004018 <HAL_SPI_Transmit+0x20a>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800401c:	e026      	b.n	800406c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1cd      	bne.n	8003fc4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	6839      	ldr	r1, [r7, #0]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f8b3 	bl	8004198 <SPI_EndRxTxTransaction>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d002      	beq.n	800403e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	77fb      	strb	r3, [r7, #31]
 8004068:	e000      	b.n	800406c <HAL_SPI_Transmit+0x25e>
  }

error:
 800406a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800407c:	7ffb      	ldrb	r3, [r7, #31]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004098:	f7fd fdc6 	bl	8001c28 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	4413      	add	r3, r2
 80040a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80040a8:	f7fd fdbe 	bl	8001c28 <HAL_GetTick>
 80040ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80040ae:	4b39      	ldr	r3, [pc, #228]	; (8004194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	015b      	lsls	r3, r3, #5
 80040b4:	0d1b      	lsrs	r3, r3, #20
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040be:	e054      	b.n	800416a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c6:	d050      	beq.n	800416a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040c8:	f7fd fdae 	bl	8001c28 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d902      	bls.n	80040de <SPI_WaitFlagStateUntilTimeout+0x56>
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d13d      	bne.n	800415a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040f6:	d111      	bne.n	800411c <SPI_WaitFlagStateUntilTimeout+0x94>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004100:	d004      	beq.n	800410c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d107      	bne.n	800411c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004124:	d10f      	bne.n	8004146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e017      	b.n	800418a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3b01      	subs	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	429a      	cmp	r2, r3
 8004178:	bf0c      	ite	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	2300      	movne	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	429a      	cmp	r2, r3
 8004186:	d19b      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000008 	.word	0x20000008

08004198 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <SPI_EndRxTxTransaction+0x7c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <SPI_EndRxTxTransaction+0x80>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	0d5b      	lsrs	r3, r3, #21
 80041b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b4:	fb02 f303 	mul.w	r3, r2, r3
 80041b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c2:	d112      	bne.n	80041ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	2200      	movs	r2, #0
 80041cc:	2180      	movs	r1, #128	; 0x80
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff ff5a 	bl	8004088 <SPI_WaitFlagStateUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d016      	beq.n	8004208 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00f      	b.n	800420a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b80      	cmp	r3, #128	; 0x80
 8004202:	d0f2      	beq.n	80041ea <SPI_EndRxTxTransaction+0x52>
 8004204:	e000      	b.n	8004208 <SPI_EndRxTxTransaction+0x70>
        break;
 8004206:	bf00      	nop
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000008 	.word	0x20000008
 8004218:	165e9f81 	.word	0x165e9f81

0800421c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e034      	b.n	800429c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7fc facc 	bl	80007e4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3308      	adds	r3, #8
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f000 fca6 	bl	8004ba8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	461a      	mov	r2, r3
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	f000 fcf0 	bl	8004c4c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6858      	ldr	r0, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	f000 fd25 	bl	8004cc8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	6892      	ldr	r2, [r2, #8]
 8004286:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	6892      	ldr	r2, [r2, #8]
 8004292:	f041 0101 	orr.w	r1, r1, #1
 8004296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e041      	b.n	800433a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fb9a 	bl	8001a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fa96 	bl	8004814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d001      	beq.n	800435c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e04e      	b.n	80043fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0201 	orr.w	r2, r2, #1
 8004372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a23      	ldr	r2, [pc, #140]	; (8004408 <HAL_TIM_Base_Start_IT+0xc4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d022      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x80>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004386:	d01d      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x80>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1f      	ldr	r2, [pc, #124]	; (800440c <HAL_TIM_Base_Start_IT+0xc8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d018      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x80>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <HAL_TIM_Base_Start_IT+0xcc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x80>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <HAL_TIM_Base_Start_IT+0xd0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00e      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x80>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1b      	ldr	r2, [pc, #108]	; (8004418 <HAL_TIM_Base_Start_IT+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x80>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a19      	ldr	r2, [pc, #100]	; (800441c <HAL_TIM_Base_Start_IT+0xd8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d004      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x80>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <HAL_TIM_Base_Start_IT+0xdc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d111      	bne.n	80043e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b06      	cmp	r3, #6
 80043d4:	d010      	beq.n	80043f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f042 0201 	orr.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e6:	e007      	b.n	80043f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40010000 	.word	0x40010000
 800440c:	40000400 	.word	0x40000400
 8004410:	40000800 	.word	0x40000800
 8004414:	40000c00 	.word	0x40000c00
 8004418:	40010400 	.word	0x40010400
 800441c:	40014000 	.word	0x40014000
 8004420:	40001800 	.word	0x40001800

08004424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b02      	cmp	r3, #2
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0202 	mvn.w	r2, #2
 8004450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f9b5 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f9a7 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f9b8 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d122      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b04      	cmp	r3, #4
 800449a:	d11b      	bne.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0204 	mvn.w	r2, #4
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f98b 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f97d 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f98e 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0308 	and.w	r3, r3, #8
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0208 	mvn.w	r2, #8
 80044f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2204      	movs	r2, #4
 80044fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f961 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f953 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f964 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b10      	cmp	r3, #16
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b10      	cmp	r3, #16
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0210 	mvn.w	r2, #16
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2208      	movs	r2, #8
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f937 	bl	80047d6 <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f929 	bl	80047c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f93a 	bl	80047ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b01      	cmp	r3, #1
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0201 	mvn.w	r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fd f852 	bl	800164c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d10e      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d107      	bne.n	80045d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fae0 	bl	8004b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	2b40      	cmp	r3, #64	; 0x40
 80045e0:	d10e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f8ff 	bl	80047fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b20      	cmp	r3, #32
 800460c:	d10e      	bne.n	800462c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b20      	cmp	r3, #32
 800461a:	d107      	bne.n	800462c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f06f 0220 	mvn.w	r2, #32
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 faaa 	bl	8004b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800462c:	bf00      	nop
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d101      	bne.n	8004650 <HAL_TIM_ConfigClockSource+0x1c>
 800464c:	2302      	movs	r3, #2
 800464e:	e0b4      	b.n	80047ba <HAL_TIM_ConfigClockSource+0x186>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800466e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004688:	d03e      	beq.n	8004708 <HAL_TIM_ConfigClockSource+0xd4>
 800468a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468e:	f200 8087 	bhi.w	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004696:	f000 8086 	beq.w	80047a6 <HAL_TIM_ConfigClockSource+0x172>
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	d87f      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b70      	cmp	r3, #112	; 0x70
 80046a2:	d01a      	beq.n	80046da <HAL_TIM_ConfigClockSource+0xa6>
 80046a4:	2b70      	cmp	r3, #112	; 0x70
 80046a6:	d87b      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b60      	cmp	r3, #96	; 0x60
 80046aa:	d050      	beq.n	800474e <HAL_TIM_ConfigClockSource+0x11a>
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d877      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b50      	cmp	r3, #80	; 0x50
 80046b2:	d03c      	beq.n	800472e <HAL_TIM_ConfigClockSource+0xfa>
 80046b4:	2b50      	cmp	r3, #80	; 0x50
 80046b6:	d873      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b40      	cmp	r3, #64	; 0x40
 80046ba:	d058      	beq.n	800476e <HAL_TIM_ConfigClockSource+0x13a>
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d86f      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b30      	cmp	r3, #48	; 0x30
 80046c2:	d064      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b30      	cmp	r3, #48	; 0x30
 80046c6:	d86b      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d060      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d867      	bhi.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d05c      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d05a      	beq.n	800478e <HAL_TIM_ConfigClockSource+0x15a>
 80046d8:	e062      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6899      	ldr	r1, [r3, #8]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f000 f9ad 	bl	8004a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	609a      	str	r2, [r3, #8]
      break;
 8004706:	e04f      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6899      	ldr	r1, [r3, #8]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f000 f996 	bl	8004a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472a:	609a      	str	r2, [r3, #8]
      break;
 800472c:	e03c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	461a      	mov	r2, r3
 800473c:	f000 f90a 	bl	8004954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2150      	movs	r1, #80	; 0x50
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f963 	bl	8004a12 <TIM_ITRx_SetConfig>
      break;
 800474c:	e02c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	461a      	mov	r2, r3
 800475c:	f000 f929 	bl	80049b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2160      	movs	r1, #96	; 0x60
 8004766:	4618      	mov	r0, r3
 8004768:	f000 f953 	bl	8004a12 <TIM_ITRx_SetConfig>
      break;
 800476c:	e01c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6859      	ldr	r1, [r3, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	461a      	mov	r2, r3
 800477c:	f000 f8ea 	bl	8004954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f943 	bl	8004a12 <TIM_ITRx_SetConfig>
      break;
 800478c:	e00c      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	4610      	mov	r0, r2
 800479a:	f000 f93a 	bl	8004a12 <TIM_ITRx_SetConfig>
      break;
 800479e:	e003      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	e000      	b.n	80047a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a40      	ldr	r2, [pc, #256]	; (8004928 <TIM_Base_SetConfig+0x114>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d013      	beq.n	8004854 <TIM_Base_SetConfig+0x40>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004832:	d00f      	beq.n	8004854 <TIM_Base_SetConfig+0x40>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a3d      	ldr	r2, [pc, #244]	; (800492c <TIM_Base_SetConfig+0x118>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00b      	beq.n	8004854 <TIM_Base_SetConfig+0x40>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <TIM_Base_SetConfig+0x11c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d007      	beq.n	8004854 <TIM_Base_SetConfig+0x40>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3b      	ldr	r2, [pc, #236]	; (8004934 <TIM_Base_SetConfig+0x120>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d003      	beq.n	8004854 <TIM_Base_SetConfig+0x40>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3a      	ldr	r2, [pc, #232]	; (8004938 <TIM_Base_SetConfig+0x124>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d108      	bne.n	8004866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <TIM_Base_SetConfig+0x114>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d02b      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004874:	d027      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a2c      	ldr	r2, [pc, #176]	; (800492c <TIM_Base_SetConfig+0x118>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d023      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a2b      	ldr	r2, [pc, #172]	; (8004930 <TIM_Base_SetConfig+0x11c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d01f      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <TIM_Base_SetConfig+0x120>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d01b      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a29      	ldr	r2, [pc, #164]	; (8004938 <TIM_Base_SetConfig+0x124>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d017      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a28      	ldr	r2, [pc, #160]	; (800493c <TIM_Base_SetConfig+0x128>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d013      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a27      	ldr	r2, [pc, #156]	; (8004940 <TIM_Base_SetConfig+0x12c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d00f      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a26      	ldr	r2, [pc, #152]	; (8004944 <TIM_Base_SetConfig+0x130>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a25      	ldr	r2, [pc, #148]	; (8004948 <TIM_Base_SetConfig+0x134>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a24      	ldr	r2, [pc, #144]	; (800494c <TIM_Base_SetConfig+0x138>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_Base_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a23      	ldr	r2, [pc, #140]	; (8004950 <TIM_Base_SetConfig+0x13c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d108      	bne.n	80048d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a0a      	ldr	r2, [pc, #40]	; (8004928 <TIM_Base_SetConfig+0x114>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_Base_SetConfig+0xf8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <TIM_Base_SetConfig+0x124>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d103      	bne.n	8004914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	615a      	str	r2, [r3, #20]
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40010000 	.word	0x40010000
 800492c:	40000400 	.word	0x40000400
 8004930:	40000800 	.word	0x40000800
 8004934:	40000c00 	.word	0x40000c00
 8004938:	40010400 	.word	0x40010400
 800493c:	40014000 	.word	0x40014000
 8004940:	40014400 	.word	0x40014400
 8004944:	40014800 	.word	0x40014800
 8004948:	40001800 	.word	0x40001800
 800494c:	40001c00 	.word	0x40001c00
 8004950:	40002000 	.word	0x40002000

08004954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f023 030a 	bic.w	r3, r3, #10
 8004990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4313      	orrs	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b087      	sub	sp, #28
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	60f8      	str	r0, [r7, #12]
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0210 	bic.w	r2, r3, #16
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	031b      	lsls	r3, r3, #12
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f043 0307 	orr.w	r3, r3, #7
 8004a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	371c      	adds	r7, #28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e05a      	b.n	8004b56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aec:	d01d      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1d      	ldr	r2, [pc, #116]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d018      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a1b      	ldr	r2, [pc, #108]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d013      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1a      	ldr	r2, [pc, #104]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00e      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a18      	ldr	r2, [pc, #96]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d009      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d004      	beq.n	8004b2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10c      	bne.n	8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40000800 	.word	0x40000800
 8004b70:	40000c00 	.word	0x40000c00
 8004b74:	40010400 	.word	0x40010400
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40001800 	.word	0x40001800

08004b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <FSMC_NORSRAM_Init+0xa0>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004bd2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004bd8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004bde:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004be4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004bea:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004bf0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004bf6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004bfc:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004c02:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004c08:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004c0e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004c14:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d103      	bne.n	8004c2c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	fff00080 	.word	0xfff00080

08004c4c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c66:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c6e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004c7a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004c82:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004c8a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004c94:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	3b02      	subs	r3, #2
 8004c9c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004c9e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6979      	ldr	r1, [r7, #20]
 8004cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce0:	d122      	bne.n	8004d28 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cea:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004cfe:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004d06:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004d0e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004d14:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6979      	ldr	r1, [r7, #20]
 8004d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004d26:	e005      	b.n	8004d34 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	cff00000 	.word	0xcff00000

08004d48 <memset>:
 8004d48:	4402      	add	r2, r0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <__libc_init_array>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	4d0d      	ldr	r5, [pc, #52]	; (8004d90 <__libc_init_array+0x38>)
 8004d5c:	4c0d      	ldr	r4, [pc, #52]	; (8004d94 <__libc_init_array+0x3c>)
 8004d5e:	1b64      	subs	r4, r4, r5
 8004d60:	10a4      	asrs	r4, r4, #2
 8004d62:	2600      	movs	r6, #0
 8004d64:	42a6      	cmp	r6, r4
 8004d66:	d109      	bne.n	8004d7c <__libc_init_array+0x24>
 8004d68:	4d0b      	ldr	r5, [pc, #44]	; (8004d98 <__libc_init_array+0x40>)
 8004d6a:	4c0c      	ldr	r4, [pc, #48]	; (8004d9c <__libc_init_array+0x44>)
 8004d6c:	f000 f818 	bl	8004da0 <_init>
 8004d70:	1b64      	subs	r4, r4, r5
 8004d72:	10a4      	asrs	r4, r4, #2
 8004d74:	2600      	movs	r6, #0
 8004d76:	42a6      	cmp	r6, r4
 8004d78:	d105      	bne.n	8004d86 <__libc_init_array+0x2e>
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d80:	4798      	blx	r3
 8004d82:	3601      	adds	r6, #1
 8004d84:	e7ee      	b.n	8004d64 <__libc_init_array+0xc>
 8004d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8a:	4798      	blx	r3
 8004d8c:	3601      	adds	r6, #1
 8004d8e:	e7f2      	b.n	8004d76 <__libc_init_array+0x1e>
 8004d90:	08007d58 	.word	0x08007d58
 8004d94:	08007d58 	.word	0x08007d58
 8004d98:	08007d58 	.word	0x08007d58
 8004d9c:	08007d5c 	.word	0x08007d5c

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
