
Lab5_FSM_PasswordDoor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00065684  080043b0  080043b0  000143b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08069a34  08069a34  00080038  2**0
                  CONTENTS
  4 .ARM          00000008  08069a34  08069a34  00079a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08069a3c  08069a3c  00080038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08069a3c  08069a3c  00079a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08069a40  08069a40  00079a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08069a44  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00080038  2**0
                  CONTENTS
 10 .bss          000001a0  20000038  20000038  00080038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00080038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00080038  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00080068  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f2c6  00000000  00000000  000800ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002bab  00000000  00000000  0008f371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ee8  00000000  00000000  00091f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b4d  00000000  00000000  00092e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000224b9  00000000  00000000  00093955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012401  00000000  00000000  000b5e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd1a9  00000000  00000000  000c820f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c4c  00000000  00000000  001953b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00199004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004398 	.word	0x08004398

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08004398 	.word	0x08004398

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	2108      	movs	r1, #8
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <button_init+0x14>)
 80004de:	f001 ff73 	bl	80023c8 <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020c00 	.word	0x40020c00

080004ec <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	482f      	ldr	r0, [pc, #188]	; (80005b4 <button_scan+0xc8>)
 80004f8:	f001 ff66 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	482c      	ldr	r0, [pc, #176]	; (80005b4 <button_scan+0xc8>)
 8000502:	f001 ff61 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000506:	230a      	movs	r3, #10
 8000508:	2202      	movs	r2, #2
 800050a:	492b      	ldr	r1, [pc, #172]	; (80005b8 <button_scan+0xcc>)
 800050c:	482b      	ldr	r0, [pc, #172]	; (80005bc <button_scan+0xd0>)
 800050e:	f002 fd9e 	bl	800304e <HAL_SPI_Receive>

	int button_index = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	e03f      	b.n	80005a2 <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db06      	blt.n	8000536 <button_scan+0x4a>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	dc03      	bgt.n	8000536 <button_scan+0x4a>
			button_index = i + 4;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3304      	adds	r3, #4
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e018      	b.n	8000568 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dd07      	ble.n	800054c <button_scan+0x60>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dc04      	bgt.n	800054c <button_scan+0x60>
			button_index = 7 - i;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f1c3 0307 	rsb	r3, r3, #7
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e00d      	b.n	8000568 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b07      	cmp	r3, #7
 8000550:	dd06      	ble.n	8000560 <button_scan+0x74>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0b      	cmp	r3, #11
 8000556:	dc03      	bgt.n	8000560 <button_scan+0x74>
			button_index = i + 4;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e003      	b.n	8000568 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f1c3 0317 	rsb	r3, r3, #23
 8000566:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <button_scan+0xcc>)
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	897b      	ldrh	r3, [r7, #10]
 800056e:	4013      	ands	r3, r2
 8000570:	b29b      	uxth	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d005      	beq.n	8000582 <button_scan+0x96>
			button_count[button_index] = 0;
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <button_scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2100      	movs	r1, #0
 800057c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000580:	e009      	b.n	8000596 <button_scan+0xaa>
		else
			button_count[button_index]++;
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <button_scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	3301      	adds	r3, #1
 800058c:	b299      	uxth	r1, r3
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <button_scan+0xd4>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	085b      	lsrs	r3, r3, #1
 800059a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	ddbc      	ble.n	8000522 <button_scan+0x36>
	}
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020c00 	.word	0x40020c00
 80005b8:	20000074 	.word	0x20000074
 80005bc:	200000ec 	.word	0x200000ec
 80005c0:	20000054 	.word	0x20000054

080005c4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_FSMC_Init+0xec>)
 80005f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f8:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <MX_FSMC_Init+0xec>)
 80005fa:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <MX_FSMC_Init+0xf0>)
 80005fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_FSMC_Init+0xec>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000612:	2210      	movs	r2, #16
 8000614:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_FSMC_Init+0xec>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_FSMC_Init+0xec>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_FSMC_Init+0xec>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_FSMC_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000656:	230f      	movs	r3, #15
 8000658:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800065a:	230f      	movs	r3, #15
 800065c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800065e:	233c      	movs	r3, #60	; 0x3c
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000666:	2310      	movs	r3, #16
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800066a:	2311      	movs	r3, #17
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800066e:	2300      	movs	r3, #0
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 8000672:	2309      	movs	r3, #9
 8000674:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000676:	230f      	movs	r3, #15
 8000678:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 800067a:	2308      	movs	r3, #8
 800067c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000682:	2310      	movs	r3, #16
 8000684:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000686:	2311      	movs	r3, #17
 8000688:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800068e:	463a      	mov	r2, r7
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000698:	f003 f8bc 	bl	8003814 <HAL_SRAM_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80006a2:	f001 f8d7 	bl	8001854 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a6:	bf00      	nop
 80006a8:	3738      	adds	r7, #56	; 0x38
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000078 	.word	0x20000078
 80006b4:	a0000104 	.word	0xa0000104

080006b8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <HAL_FSMC_MspInit+0x88>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d131      	bne.n	8000738 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_FSMC_MspInit+0x88>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6393      	str	r3, [r2, #56]	; 0x38
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006f6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000708:	230c      	movs	r3, #12
 800070a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <HAL_FSMC_MspInit+0x90>)
 8000712:	f001 fcbd 	bl	8002090 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000716:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800071a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000728:	230c      	movs	r3, #12
 800072a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FSMC_MspInit+0x94>)
 8000732:	f001 fcad 	bl	8002090 <HAL_GPIO_Init>
 8000736:	e000      	b.n	800073a <HAL_FSMC_MspInit+0x82>
    return;
 8000738:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000c8 	.word	0x200000c8
 8000744:	40023800 	.word	0x40023800
 8000748:	40021000 	.word	0x40021000
 800074c:	40020c00 	.word	0x40020c00

08000750 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000758:	f7ff ffae 	bl	80006b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b63      	ldr	r3, [pc, #396]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a62      	ldr	r2, [pc, #392]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b60      	ldr	r3, [pc, #384]	; (800090c <MX_GPIO_Init+0x1a8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b5c      	ldr	r3, [pc, #368]	; (800090c <MX_GPIO_Init+0x1a8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a5b      	ldr	r2, [pc, #364]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b59      	ldr	r3, [pc, #356]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b55      	ldr	r3, [pc, #340]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a54      	ldr	r2, [pc, #336]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b52      	ldr	r3, [pc, #328]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b4e      	ldr	r3, [pc, #312]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a4d      	ldr	r2, [pc, #308]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b4b      	ldr	r3, [pc, #300]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b47      	ldr	r3, [pc, #284]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a46      	ldr	r2, [pc, #280]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b44      	ldr	r3, [pc, #272]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <MX_GPIO_Init+0x1a8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3f      	ldr	r2, [pc, #252]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b3d      	ldr	r3, [pc, #244]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a38      	ldr	r2, [pc, #224]	; (800090c <MX_GPIO_Init+0x1a8>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2170      	movs	r1, #112	; 0x70
 8000842:	4833      	ldr	r0, [pc, #204]	; (8000910 <MX_GPIO_Init+0x1ac>)
 8000844:	f001 fdc0 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	4831      	ldr	r0, [pc, #196]	; (8000914 <MX_GPIO_Init+0x1b0>)
 8000850:	f001 fdba 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	482f      	ldr	r0, [pc, #188]	; (8000918 <MX_GPIO_Init+0x1b4>)
 800085a:	f001 fdb5 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	482d      	ldr	r0, [pc, #180]	; (800091c <MX_GPIO_Init+0x1b8>)
 8000866:	f001 fdaf 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	482c      	ldr	r0, [pc, #176]	; (8000920 <MX_GPIO_Init+0x1bc>)
 8000870:	f001 fdaa 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000874:	2370      	movs	r3, #112	; 0x70
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x1ac>)
 800088c:	f001 fc00 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	481a      	ldr	r0, [pc, #104]	; (8000914 <MX_GPIO_Init+0x1b0>)
 80008aa:	f001 fbf1 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80008c6:	f001 fbe3 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_GPIO_Init+0x1b8>)
 80008e4:	f001 fbd4 	bl	8002090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80008e8:	2308      	movs	r3, #8
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <MX_GPIO_Init+0x1bc>)
 8000900:	f001 fbc6 	bl	8002090 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40021000 	.word	0x40021000
 8000914:	40020800 	.word	0x40020800
 8000918:	40021800 	.word	0x40021800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020c00 	.word	0x40020c00

08000924 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <LCD_WR_REG+0x1c>)
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	8013      	strh	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	600ffffe 	.word	0x600ffffe

08000944 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <LCD_WR_DATA+0x1c>)
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	8053      	strh	r3, [r2, #2]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	600ffffe 	.word	0x600ffffe

08000964 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LCD_RD_DATA+0x20>)
 800096c:	885b      	ldrh	r3, [r3, #2]
 800096e:	b29b      	uxth	r3, r3
 8000970:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	b29b      	uxth	r3, r3
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	600ffffe 	.word	0x600ffffe

08000988 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4604      	mov	r4, r0
 8000990:	4608      	mov	r0, r1
 8000992:	4611      	mov	r1, r2
 8000994:	461a      	mov	r2, r3
 8000996:	4623      	mov	r3, r4
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	4603      	mov	r3, r0
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	807b      	strh	r3, [r7, #2]
 80009a2:	4613      	mov	r3, r2
 80009a4:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80009a6:	202a      	movs	r0, #42	; 0x2a
 80009a8:	f7ff ffbc 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ffc6 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ffc0 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80009c4:	887b      	ldrh	r3, [r7, #2]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffba 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 80009d0:	887b      	ldrh	r3, [r7, #2]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffb4 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 80009dc:	202b      	movs	r0, #43	; 0x2b
 80009de:	f7ff ffa1 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 80009e2:	88bb      	ldrh	r3, [r7, #4]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffab 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffa5 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 80009fa:	883b      	ldrh	r3, [r7, #0]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff9f 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000a06:	883b      	ldrh	r3, [r7, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff99 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000a12:	202c      	movs	r0, #44	; 0x2c
 8000a14:	f7ff ff86 	bl	8000924 <LCD_WR_REG>
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <lcd_fill>:
 * @param  yend	End row
 * @param  color Color to fill
 * @retval None
 */
void lcd_fill(uint16_t xsta, uint16_t ysta, uint16_t xend, uint16_t yend,
		uint16_t color) {
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4604      	mov	r4, r0
 8000a28:	4608      	mov	r0, r1
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4623      	mov	r3, r4
 8000a30:	80fb      	strh	r3, [r7, #6]
 8000a32:	4603      	mov	r3, r0
 8000a34:	80bb      	strh	r3, [r7, #4]
 8000a36:	460b      	mov	r3, r1
 8000a38:	807b      	strh	r3, [r7, #2]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	lcd_set_address(xsta, ysta, xend - 1, yend - 1);
 8000a3e:	887b      	ldrh	r3, [r7, #2]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	883b      	ldrh	r3, [r7, #0]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	88b9      	ldrh	r1, [r7, #4]
 8000a4c:	88f8      	ldrh	r0, [r7, #6]
 8000a4e:	f7ff ff9b 	bl	8000988 <lcd_set_address>
	for (i = ysta; i < yend; i++) {
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	81fb      	strh	r3, [r7, #14]
 8000a56:	e010      	b.n	8000a7a <lcd_fill+0x5a>
		for (j = xsta; j < xend; j++) {
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	81bb      	strh	r3, [r7, #12]
 8000a5c:	e006      	b.n	8000a6c <lcd_fill+0x4c>
			LCD_WR_DATA(color);
 8000a5e:	8c3b      	ldrh	r3, [r7, #32]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff6f 	bl	8000944 <LCD_WR_DATA>
		for (j = xsta; j < xend; j++) {
 8000a66:	89bb      	ldrh	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81bb      	strh	r3, [r7, #12]
 8000a6c:	89ba      	ldrh	r2, [r7, #12]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d3f4      	bcc.n	8000a5e <lcd_fill+0x3e>
	for (i = ysta; i < yend; i++) {
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	3301      	adds	r3, #1
 8000a78:	81fb      	strh	r3, [r7, #14]
 8000a7a:	89fa      	ldrh	r2, [r7, #14]
 8000a7c:	883b      	ldrh	r3, [r7, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d3ea      	bcc.n	8000a58 <lcd_fill+0x38>
		}
	}
}
 8000a82:	bf00      	nop
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd90      	pop	{r4, r7, pc}

08000a8c <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	460b      	mov	r3, r1
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	88fa      	ldrh	r2, [r7, #6]
 8000aa2:	88b9      	ldrh	r1, [r7, #4]
 8000aa4:	88f8      	ldrh	r0, [r7, #6]
 8000aa6:	f7ff ff6f 	bl	8000988 <lcd_set_address>
	LCD_WR_DATA(color);
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff ff49 	bl	8000944 <LCD_WR_DATA>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4623      	mov	r3, r4
 8000acc:	80fb      	strh	r3, [r7, #6]
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80bb      	strh	r3, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	70fb      	strb	r3, [r7, #3]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000ade:	88fb      	ldrh	r3, [r7, #6]
 8000ae0:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000ae2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ae6:	085b      	lsrs	r3, r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	08db      	lsrs	r3, r3, #3
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	f003 0307 	and.w	r3, r3, #7
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf14      	ite	ne
 8000afe:	2301      	movne	r3, #1
 8000b00:	2300      	moveq	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	fb12 f303 	smulbb	r3, r2, r3
 8000b12:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	3b20      	subs	r3, #32
 8000b18:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	3b01      	subs	r3, #1
 8000b26:	b29c      	uxth	r4, r3
 8000b28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	88bb      	ldrh	r3, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	88b9      	ldrh	r1, [r7, #4]
 8000b3a:	88f8      	ldrh	r0, [r7, #6]
 8000b3c:	4622      	mov	r2, r4
 8000b3e:	f7ff ff23 	bl	8000988 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	827b      	strh	r3, [r7, #18]
 8000b46:	e07a      	b.n	8000c3e <lcd_show_char+0x182>
		if (sizey == 12)
 8000b48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b4c:	2b0c      	cmp	r3, #12
 8000b4e:	d028      	beq.n	8000ba2 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000b50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b54:	2b10      	cmp	r3, #16
 8000b56:	d108      	bne.n	8000b6a <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000b58:	78fa      	ldrb	r2, [r7, #3]
 8000b5a:	8a7b      	ldrh	r3, [r7, #18]
 8000b5c:	493c      	ldr	r1, [pc, #240]	; (8000c50 <lcd_show_char+0x194>)
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	440a      	add	r2, r1
 8000b62:	4413      	add	r3, r2
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	75fb      	strb	r3, [r7, #23]
 8000b68:	e01b      	b.n	8000ba2 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000b6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b6e:	2b18      	cmp	r3, #24
 8000b70:	d10b      	bne.n	8000b8a <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8000b72:	78fa      	ldrb	r2, [r7, #3]
 8000b74:	8a79      	ldrh	r1, [r7, #18]
 8000b76:	4837      	ldr	r0, [pc, #220]	; (8000c54 <lcd_show_char+0x198>)
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	4403      	add	r3, r0
 8000b82:	440b      	add	r3, r1
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	75fb      	strb	r3, [r7, #23]
 8000b88:	e00b      	b.n	8000ba2 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8000b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b8e:	2b20      	cmp	r3, #32
 8000b90:	d15a      	bne.n	8000c48 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8000b92:	78fa      	ldrb	r2, [r7, #3]
 8000b94:	8a7b      	ldrh	r3, [r7, #18]
 8000b96:	4930      	ldr	r1, [pc, #192]	; (8000c58 <lcd_show_char+0x19c>)
 8000b98:	0192      	lsls	r2, r2, #6
 8000b9a:	440a      	add	r2, r1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	75bb      	strb	r3, [r7, #22]
 8000ba6:	e044      	b.n	8000c32 <lcd_show_char+0x176>
			if (!mode) {
 8000ba8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d120      	bne.n	8000bf2 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8000bb0:	7dfa      	ldrb	r2, [r7, #23]
 8000bb2:	7dbb      	ldrb	r3, [r7, #22]
 8000bb4:	fa42 f303 	asr.w	r3, r2, r3
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8000bc0:	883b      	ldrh	r3, [r7, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff febe 	bl	8000944 <LCD_WR_DATA>
 8000bc8:	e003      	b.n	8000bd2 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8000bca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff feb9 	bl	8000944 <LCD_WR_DATA>
				m++;
 8000bd2:	7d7b      	ldrb	r3, [r7, #21]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000bd8:	7d7b      	ldrb	r3, [r7, #21]
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000be0:	fb01 f202 	mul.w	r2, r1, r2
 8000be4:	1a9b      	subs	r3, r3, r2
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d11f      	bne.n	8000c2c <lcd_show_char+0x170>
					m = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	757b      	strb	r3, [r7, #21]
					break;
 8000bf0:	e022      	b.n	8000c38 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8000bf2:	7dfa      	ldrb	r2, [r7, #23]
 8000bf4:	7dbb      	ldrb	r3, [r7, #22]
 8000bf6:	fa42 f303 	asr.w	r3, r2, r3
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d005      	beq.n	8000c0e <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8000c02:	883a      	ldrh	r2, [r7, #0]
 8000c04:	88b9      	ldrh	r1, [r7, #4]
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff3f 	bl	8000a8c <lcd_draw_point>
				x++;
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	3301      	adds	r3, #1
 8000c12:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8000c14:	88fa      	ldrh	r2, [r7, #6]
 8000c16:	8a3b      	ldrh	r3, [r7, #16]
 8000c18:	1ad2      	subs	r2, r2, r3
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d105      	bne.n	8000c2c <lcd_show_char+0x170>
					x = x0;
 8000c20:	8a3b      	ldrh	r3, [r7, #16]
 8000c22:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	3301      	adds	r3, #1
 8000c28:	80bb      	strh	r3, [r7, #4]
					break;
 8000c2a:	e005      	b.n	8000c38 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8000c2c:	7dbb      	ldrb	r3, [r7, #22]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	75bb      	strb	r3, [r7, #22]
 8000c32:	7dbb      	ldrb	r3, [r7, #22]
 8000c34:	2b07      	cmp	r3, #7
 8000c36:	d9b7      	bls.n	8000ba8 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000c38:	8a7b      	ldrh	r3, [r7, #18]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	827b      	strh	r3, [r7, #18]
 8000c3e:	8a7a      	ldrh	r2, [r7, #18]
 8000c40:	89bb      	ldrh	r3, [r7, #12]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d380      	bcc.n	8000b48 <lcd_show_char+0x8c>
 8000c46:	e000      	b.n	8000c4a <lcd_show_char+0x18e>
			return;
 8000c48:	bf00      	nop
				}
			}
		}
	}
}
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	080043ec 	.word	0x080043ec
 8000c54:	080049dc 	.word	0x080049dc
 8000c58:	08005bac 	.word	0x08005bac

08000c5c <lcd_show_picture>:
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
	}
}

void lcd_show_picture(uint16_t x, uint16_t y, uint16_t length, uint16_t width,
		const uint8_t pic[]) {
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	4608      	mov	r0, r1
 8000c66:	4611      	mov	r1, r2
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4623      	mov	r3, r4
 8000c6c:	80fb      	strh	r3, [r7, #6]
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80bb      	strh	r3, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	807b      	strh	r3, [r7, #2]
 8000c76:	4613      	mov	r3, r2
 8000c78:	803b      	strh	r3, [r7, #0]
	uint8_t picH, picL;
	uint16_t i, j;
	uint32_t k = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
	lcd_set_address(x, y, x + length - 1, y + width - 1);
 8000c7e:	88fa      	ldrh	r2, [r7, #6]
 8000c80:	887b      	ldrh	r3, [r7, #2]
 8000c82:	4413      	add	r3, r2
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29c      	uxth	r4, r3
 8000c8a:	88ba      	ldrh	r2, [r7, #4]
 8000c8c:	883b      	ldrh	r3, [r7, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	88b9      	ldrh	r1, [r7, #4]
 8000c98:	88f8      	ldrh	r0, [r7, #6]
 8000c9a:	4622      	mov	r2, r4
 8000c9c:	f7ff fe74 	bl	8000988 <lcd_set_address>
	for (i = 0; i < length; i++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	82fb      	strh	r3, [r7, #22]
 8000ca4:	e027      	b.n	8000cf6 <lcd_show_picture+0x9a>
		for (j = 0; j < width; j++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	82bb      	strh	r3, [r7, #20]
 8000caa:	e01d      	b.n	8000ce8 <lcd_show_picture+0x8c>
			picH = pic[k * 2];
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	73fb      	strb	r3, [r7, #15]
			picL = pic[k * 2 + 1];
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH << 8 | picL);
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fe34 	bl	8000944 <LCD_WR_DATA>
			k++;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	613b      	str	r3, [r7, #16]
		for (j = 0; j < width; j++) {
 8000ce2:	8abb      	ldrh	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	82bb      	strh	r3, [r7, #20]
 8000ce8:	8aba      	ldrh	r2, [r7, #20]
 8000cea:	883b      	ldrh	r3, [r7, #0]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3dd      	bcc.n	8000cac <lcd_show_picture+0x50>
	for (i = 0; i < length; i++) {
 8000cf0:	8afb      	ldrh	r3, [r7, #22]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	82fb      	strh	r3, [r7, #22]
 8000cf6:	8afa      	ldrh	r2, [r7, #22]
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d3d3      	bcc.n	8000ca6 <lcd_show_picture+0x4a>
		}
	}
}
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <lcd_set_direction>:

void lcd_set_direction(uint8_t dir) {
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <lcd_set_direction+0x44>)
 8000d24:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d28:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <lcd_set_direction+0x44>)
 8000d2c:	22f0      	movs	r2, #240	; 0xf0
 8000d2e:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8000d30:	e006      	b.n	8000d40 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <lcd_set_direction+0x44>)
 8000d34:	22f0      	movs	r2, #240	; 0xf0
 8000d36:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8000d38:	4b04      	ldr	r3, [pc, #16]	; (8000d4c <lcd_set_direction+0x44>)
 8000d3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d3e:	805a      	strh	r2, [r3, #2]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	200000cc 	.word	0x200000cc

08000d50 <lcd_init>:

void lcd_init(void) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	48aa      	ldr	r0, [pc, #680]	; (8001004 <lcd_init+0x2b4>)
 8000d5c:	f001 fb34 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d64:	f001 f85e 	bl	8001e24 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6e:	48a5      	ldr	r0, [pc, #660]	; (8001004 <lcd_init+0x2b4>)
 8000d70:	f001 fb2a 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d78:	f001 f854 	bl	8001e24 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f7ff ffc3 	bl	8000d08 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8000d82:	20d3      	movs	r0, #211	; 0xd3
 8000d84:	f7ff fdce 	bl	8000924 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8000d88:	f7ff fdec 	bl	8000964 <LCD_RD_DATA>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b9d      	ldr	r3, [pc, #628]	; (8001008 <lcd_init+0x2b8>)
 8000d92:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000d94:	f7ff fde6 	bl	8000964 <LCD_RD_DATA>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b9a      	ldr	r3, [pc, #616]	; (8001008 <lcd_init+0x2b8>)
 8000d9e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000da0:	f7ff fde0 	bl	8000964 <LCD_RD_DATA>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b97      	ldr	r3, [pc, #604]	; (8001008 <lcd_init+0x2b8>)
 8000daa:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8000dac:	4b96      	ldr	r3, [pc, #600]	; (8001008 <lcd_init+0x2b8>)
 8000dae:	889b      	ldrh	r3, [r3, #4]
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	4b94      	ldr	r3, [pc, #592]	; (8001008 <lcd_init+0x2b8>)
 8000db6:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8000db8:	f7ff fdd4 	bl	8000964 <LCD_RD_DATA>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b91      	ldr	r3, [pc, #580]	; (8001008 <lcd_init+0x2b8>)
 8000dc2:	889b      	ldrh	r3, [r3, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b8f      	ldr	r3, [pc, #572]	; (8001008 <lcd_init+0x2b8>)
 8000dca:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000dcc:	20cf      	movs	r0, #207	; 0xcf
 8000dce:	f7ff fda9 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff fdb6 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000dd8:	20c1      	movs	r0, #193	; 0xc1
 8000dda:	f7ff fdb3 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000dde:	2030      	movs	r0, #48	; 0x30
 8000de0:	f7ff fdb0 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000de4:	20ed      	movs	r0, #237	; 0xed
 8000de6:	f7ff fd9d 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000dea:	2064      	movs	r0, #100	; 0x64
 8000dec:	f7ff fdaa 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f7ff fda7 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000df6:	2012      	movs	r0, #18
 8000df8:	f7ff fda4 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000dfc:	2081      	movs	r0, #129	; 0x81
 8000dfe:	f7ff fda1 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000e02:	20e8      	movs	r0, #232	; 0xe8
 8000e04:	f7ff fd8e 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000e08:	2085      	movs	r0, #133	; 0x85
 8000e0a:	f7ff fd9b 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000e0e:	2010      	movs	r0, #16
 8000e10:	f7ff fd98 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000e14:	207a      	movs	r0, #122	; 0x7a
 8000e16:	f7ff fd95 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000e1a:	20cb      	movs	r0, #203	; 0xcb
 8000e1c:	f7ff fd82 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000e20:	2039      	movs	r0, #57	; 0x39
 8000e22:	f7ff fd8f 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000e26:	202c      	movs	r0, #44	; 0x2c
 8000e28:	f7ff fd8c 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f7ff fd89 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000e32:	2034      	movs	r0, #52	; 0x34
 8000e34:	f7ff fd86 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff fd83 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000e3e:	20f7      	movs	r0, #247	; 0xf7
 8000e40:	f7ff fd70 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000e44:	2020      	movs	r0, #32
 8000e46:	f7ff fd7d 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000e4a:	20ea      	movs	r0, #234	; 0xea
 8000e4c:	f7ff fd6a 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff fd77 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fd74 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000e5c:	20c0      	movs	r0, #192	; 0xc0
 8000e5e:	f7ff fd61 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000e62:	201b      	movs	r0, #27
 8000e64:	f7ff fd6e 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000e68:	20c1      	movs	r0, #193	; 0xc1
 8000e6a:	f7ff fd5b 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f7ff fd68 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000e74:	20c5      	movs	r0, #197	; 0xc5
 8000e76:	f7ff fd55 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000e7a:	2030      	movs	r0, #48	; 0x30
 8000e7c:	f7ff fd62 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000e80:	2030      	movs	r0, #48	; 0x30
 8000e82:	f7ff fd5f 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000e86:	20c7      	movs	r0, #199	; 0xc7
 8000e88:	f7ff fd4c 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000e8c:	20b7      	movs	r0, #183	; 0xb7
 8000e8e:	f7ff fd59 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000e92:	2036      	movs	r0, #54	; 0x36
 8000e94:	f7ff fd46 	bl	8000924 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8000e98:	2008      	movs	r0, #8
 8000e9a:	f7ff fd53 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000e9e:	203a      	movs	r0, #58	; 0x3a
 8000ea0:	f7ff fd40 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000ea4:	2055      	movs	r0, #85	; 0x55
 8000ea6:	f7ff fd4d 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000eaa:	20b1      	movs	r0, #177	; 0xb1
 8000eac:	f7ff fd3a 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff fd47 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000eb6:	201a      	movs	r0, #26
 8000eb8:	f7ff fd44 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000ebc:	20b6      	movs	r0, #182	; 0xb6
 8000ebe:	f7ff fd31 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f7ff fd3e 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000ec8:	20a2      	movs	r0, #162	; 0xa2
 8000eca:	f7ff fd3b 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000ece:	20f2      	movs	r0, #242	; 0xf2
 8000ed0:	f7ff fd28 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff fd35 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000eda:	2026      	movs	r0, #38	; 0x26
 8000edc:	f7ff fd22 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fd2f 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000ee6:	20e0      	movs	r0, #224	; 0xe0
 8000ee8:	f7ff fd1c 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000eec:	200f      	movs	r0, #15
 8000eee:	f7ff fd29 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000ef2:	202a      	movs	r0, #42	; 0x2a
 8000ef4:	f7ff fd26 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000ef8:	2028      	movs	r0, #40	; 0x28
 8000efa:	f7ff fd23 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000efe:	2008      	movs	r0, #8
 8000f00:	f7ff fd20 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000f04:	200e      	movs	r0, #14
 8000f06:	f7ff fd1d 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000f0a:	2008      	movs	r0, #8
 8000f0c:	f7ff fd1a 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000f10:	2054      	movs	r0, #84	; 0x54
 8000f12:	f7ff fd17 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000f16:	20a9      	movs	r0, #169	; 0xa9
 8000f18:	f7ff fd14 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000f1c:	2043      	movs	r0, #67	; 0x43
 8000f1e:	f7ff fd11 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000f22:	200a      	movs	r0, #10
 8000f24:	f7ff fd0e 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f7ff fd0b 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f7ff fd08 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fd05 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	f7ff fd02 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff fcff 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000f46:	20e1      	movs	r0, #225	; 0xe1
 8000f48:	f7ff fcec 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fcf9 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000f52:	2015      	movs	r0, #21
 8000f54:	f7ff fcf6 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000f58:	2017      	movs	r0, #23
 8000f5a:	f7ff fcf3 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000f5e:	2007      	movs	r0, #7
 8000f60:	f7ff fcf0 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000f64:	2011      	movs	r0, #17
 8000f66:	f7ff fced 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000f6a:	2006      	movs	r0, #6
 8000f6c:	f7ff fcea 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000f70:	202b      	movs	r0, #43	; 0x2b
 8000f72:	f7ff fce7 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000f76:	2056      	movs	r0, #86	; 0x56
 8000f78:	f7ff fce4 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000f7c:	203c      	movs	r0, #60	; 0x3c
 8000f7e:	f7ff fce1 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000f82:	2005      	movs	r0, #5
 8000f84:	f7ff fcde 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000f88:	2010      	movs	r0, #16
 8000f8a:	f7ff fcdb 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f7ff fcd8 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000f94:	203f      	movs	r0, #63	; 0x3f
 8000f96:	f7ff fcd5 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000f9a:	203f      	movs	r0, #63	; 0x3f
 8000f9c:	f7ff fcd2 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000fa0:	200f      	movs	r0, #15
 8000fa2:	f7ff fccf 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000fa6:	202b      	movs	r0, #43	; 0x2b
 8000fa8:	f7ff fcbc 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fcc9 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff fcc6 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff fcc3 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000fbe:	203f      	movs	r0, #63	; 0x3f
 8000fc0:	f7ff fcc0 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000fc4:	202a      	movs	r0, #42	; 0x2a
 8000fc6:	f7ff fcad 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f7ff fcba 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f7ff fcb7 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fcb4 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000fdc:	20ef      	movs	r0, #239	; 0xef
 8000fde:	f7ff fcb1 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8000fe2:	2011      	movs	r0, #17
 8000fe4:	f7ff fc9e 	bl	8000924 <LCD_WR_REG>
	HAL_Delay(120);
 8000fe8:	2078      	movs	r0, #120	; 0x78
 8000fea:	f000 ff1b 	bl	8001e24 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8000fee:	2029      	movs	r0, #41	; 0x29
 8000ff0:	f7ff fc98 	bl	8000924 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <lcd_init+0x2bc>)
 8000ffc:	f001 f9e4 	bl	80023c8 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40020800 	.word	0x40020800
 8001008:	200000cc 	.word	0x200000cc
 800100c:	40020000 	.word	0x40020000

08001010 <lcd_show_string>:
		}
	}
}

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b08b      	sub	sp, #44	; 0x2c
 8001014:	af04      	add	r7, sp, #16
 8001016:	60ba      	str	r2, [r7, #8]
 8001018:	461a      	mov	r2, r3
 800101a:	4603      	mov	r3, r0
 800101c:	81fb      	strh	r3, [r7, #14]
 800101e:	460b      	mov	r3, r1
 8001020:	81bb      	strh	r3, [r7, #12]
 8001022:	4613      	mov	r3, r2
 8001024:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001026:	89fb      	ldrh	r3, [r7, #14]
 8001028:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800102e:	e048      	b.n	80010c2 <lcd_show_string+0xb2>
		if (!bHz) {
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d145      	bne.n	80010c2 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <lcd_show_string+0xc4>)
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001042:	085b      	lsrs	r3, r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	1acb      	subs	r3, r1, r3
 8001048:	429a      	cmp	r2, r3
 800104a:	dc3f      	bgt.n	80010cc <lcd_show_string+0xbc>
 800104c:	89ba      	ldrh	r2, [r7, #12]
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <lcd_show_string+0xc4>)
 8001050:	885b      	ldrh	r3, [r3, #2]
 8001052:	4619      	mov	r1, r3
 8001054:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001058:	1acb      	subs	r3, r1, r3
 800105a:	429a      	cmp	r2, r3
 800105c:	dc36      	bgt.n	80010cc <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b80      	cmp	r3, #128	; 0x80
 8001064:	d902      	bls.n	800106c <lcd_show_string+0x5c>
				bHz = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
 800106a:	e02a      	b.n	80010c2 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b0d      	cmp	r3, #13
 8001072:	d10b      	bne.n	800108c <lcd_show_string+0x7c>
					y += sizey;
 8001074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001078:	b29a      	uxth	r2, r3
 800107a:	89bb      	ldrh	r3, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	81bb      	strh	r3, [r7, #12]
					x = x0;
 8001080:	8abb      	ldrh	r3, [r7, #20]
 8001082:	81fb      	strh	r3, [r7, #14]
					str++;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	3301      	adds	r3, #1
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	e017      	b.n	80010bc <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	88fc      	ldrh	r4, [r7, #6]
 8001092:	89b9      	ldrh	r1, [r7, #12]
 8001094:	89f8      	ldrh	r0, [r7, #14]
 8001096:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4623      	mov	r3, r4
 80010a8:	f7ff fd08 	bl	8000abc <lcd_show_char>
					x += sizey / 2;
 80010ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010b0:	085b      	lsrs	r3, r3, #1
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	89fb      	ldrh	r3, [r7, #14]
 80010b8:	4413      	add	r3, r2
 80010ba:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	3301      	adds	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1b2      	bne.n	8001030 <lcd_show_string+0x20>
 80010ca:	e000      	b.n	80010ce <lcd_show_string+0xbe>
				return;
 80010cc:	bf00      	nop
			}
		}
	}
}
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	200000cc 	.word	0x200000cc

080010d8 <lcd_show_string_center>:

void lcd_show_string_center(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af04      	add	r7, sp, #16
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4603      	mov	r3, r0
 80010e4:	81fb      	strh	r3, [r7, #14]
 80010e6:	460b      	mov	r3, r1
 80010e8:	81bb      	strh	r3, [r7, #12]
 80010ea:	4613      	mov	r3, r2
 80010ec:	80fb      	strh	r3, [r7, #6]
	uint16_t len = strlen((const char*) str);
 80010ee:	68b8      	ldr	r0, [r7, #8]
 80010f0:	f7ff f86a 	bl	80001c8 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = (lcddev.width - len * 8) / 2;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <lcd_show_string_center+0x60>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	0fda      	lsrs	r2, r3, #31
 8001106:	4413      	add	r3, r2
 8001108:	105b      	asrs	r3, r3, #1
 800110a:	82bb      	strh	r3, [r7, #20]
	lcd_show_string(x + x1, y, str, fc, bc, sizey, mode);
 800110c:	89fa      	ldrh	r2, [r7, #14]
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	4413      	add	r3, r2
 8001112:	b298      	uxth	r0, r3
 8001114:	88fa      	ldrh	r2, [r7, #6]
 8001116:	89b9      	ldrh	r1, [r7, #12]
 8001118:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	8c3b      	ldrh	r3, [r7, #32]
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f7ff ff70 	bl	8001010 <lcd_show_string>
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200000cc 	.word	0x200000cc

0800113c <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001140:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <led_7seg_display+0x104>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <led_7seg_display+0x104>)
 800114a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 800114c:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <led_7seg_display+0x108>)
 800114e:	881b      	ldrh	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b3d      	ldr	r3, [pc, #244]	; (8001248 <led_7seg_display+0x10c>)
 8001154:	5c9b      	ldrb	r3, [r3, r2]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <led_7seg_display+0x104>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b21b      	sxth	r3, r3
 8001160:	4313      	orrs	r3, r2
 8001162:	b21b      	sxth	r3, r3
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b36      	ldr	r3, [pc, #216]	; (8001240 <led_7seg_display+0x104>)
 8001168:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 800116a:	4b36      	ldr	r3, [pc, #216]	; (8001244 <led_7seg_display+0x108>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d846      	bhi.n	8001200 <led_7seg_display+0xc4>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <led_7seg_display+0x3c>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	08001189 	.word	0x08001189
 800117c:	080011a7 	.word	0x080011a7
 8001180:	080011c5 	.word	0x080011c5
 8001184:	080011e3 	.word	0x080011e3
	case 0:
		spi_buffer |= 0x00b0;
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <led_7seg_display+0x104>)
 800118a:	881b      	ldrh	r3, [r3, #0]
 800118c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001190:	b29a      	uxth	r2, r3
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <led_7seg_display+0x104>)
 8001194:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001196:	4b2a      	ldr	r3, [pc, #168]	; (8001240 <led_7seg_display+0x104>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800119e:	b29a      	uxth	r2, r3
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <led_7seg_display+0x104>)
 80011a2:	801a      	strh	r2, [r3, #0]
		break;
 80011a4:	e02d      	b.n	8001202 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80011a6:	4b26      	ldr	r3, [pc, #152]	; (8001240 <led_7seg_display+0x104>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <led_7seg_display+0x104>)
 80011b2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <led_7seg_display+0x104>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f023 0320 	bic.w	r3, r3, #32
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <led_7seg_display+0x104>)
 80011c0:	801a      	strh	r2, [r3, #0]
		break;
 80011c2:	e01e      	b.n	8001202 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <led_7seg_display+0x104>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <led_7seg_display+0x104>)
 80011d0:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <led_7seg_display+0x104>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	f023 0310 	bic.w	r3, r3, #16
 80011da:	b29a      	uxth	r2, r3
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <led_7seg_display+0x104>)
 80011de:	801a      	strh	r2, [r3, #0]
		break;
 80011e0:	e00f      	b.n	8001202 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <led_7seg_display+0x104>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <led_7seg_display+0x104>)
 80011ee:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <led_7seg_display+0x104>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <led_7seg_display+0x104>)
 80011fc:	801a      	strh	r2, [r3, #0]
		break;
 80011fe:	e000      	b.n	8001202 <led_7seg_display+0xc6>
	default:
		break;
 8001200:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <led_7seg_display+0x108>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	425a      	negs	r2, r3
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	bf58      	it	pl
 8001214:	4253      	negpl	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <led_7seg_display+0x108>)
 800121a:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2140      	movs	r1, #64	; 0x40
 8001220:	480a      	ldr	r0, [pc, #40]	; (800124c <led_7seg_display+0x110>)
 8001222:	f001 f8d1 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8001226:	2301      	movs	r3, #1
 8001228:	2202      	movs	r2, #2
 800122a:	4905      	ldr	r1, [pc, #20]	; (8001240 <led_7seg_display+0x104>)
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <led_7seg_display+0x114>)
 800122e:	f001 fdd2 	bl	8002dd6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001232:	2201      	movs	r2, #1
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	4805      	ldr	r0, [pc, #20]	; (800124c <led_7seg_display+0x110>)
 8001238:	f001 f8c6 	bl	80023c8 <HAL_GPIO_WritePin>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000004 	.word	0x20000004
 8001244:	200000d2 	.word	0x200000d2
 8001248:	20000000 	.word	0x20000000
 800124c:	40021800 	.word	0x40021800
 8001250:	200000ec 	.word	0x200000ec

08001254 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001258:	f000 fd72 	bl	8001d40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800125c:	f000 f81c 	bl	8001298 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001260:	f7ff fa80 	bl	8000764 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001264:	f000 fc64 	bl	8001b30 <MX_TIM2_Init>
	MX_SPI1_Init();
 8001268:	f000 fb6c 	bl	8001944 <MX_SPI1_Init>
	MX_FSMC_Init();
 800126c:	f7ff f9aa 	bl	80005c4 <MX_FSMC_Init>
	MX_TIM4_Init();
 8001270:	f000 fcaa 	bl	8001bc8 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	init_system();
 8001274:	f000 f87a 	bl	800136c <init_system>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (timer2_flag == 0)
 8001278:	bf00      	nop
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <main+0x40>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0fb      	beq.n	800127a <main+0x26>
			;
		timer2_flag = 0;
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <main+0x40>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]

		// INPUT
		button_scan();
 8001288:	f7ff f930 	bl	80004ec <button_scan>

		// PROCESS
		AppPasswordDoor();
 800128c:	f000 f966 	bl	800155c <AppPasswordDoor>
		while (timer2_flag == 0)
 8001290:	e7f2      	b.n	8001278 <main+0x24>
 8001292:	bf00      	nop
 8001294:	200000e1 	.word	0x200000e1

08001298 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	2230      	movs	r2, #48	; 0x30
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 f84a 	bl	8004340 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <SystemClock_Config+0xcc>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <SystemClock_Config+0xcc>)
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ca:	6413      	str	r3, [r2, #64]	; 0x40
 80012cc:	4b25      	ldr	r3, [pc, #148]	; (8001364 <SystemClock_Config+0xcc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <SystemClock_Config+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <SystemClock_Config+0xd0>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <SystemClock_Config+0xd0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f4:	2301      	movs	r3, #1
 80012f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fe:	2302      	movs	r3, #2
 8001300:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001302:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001308:	2304      	movs	r3, #4
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800130c:	23a8      	movs	r3, #168	; 0xa8
 800130e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001310:	2302      	movs	r3, #2
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001318:	f107 0320 	add.w	r3, r7, #32
 800131c:	4618      	mov	r0, r3
 800131e:	f001 f86d 	bl	80023fc <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x94>
		Error_Handler();
 8001328:	f000 fa94 	bl	8001854 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800132c:	230f      	movs	r3, #15
 800132e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001330:	2302      	movs	r3, #2
 8001332:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001338:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800133c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800133e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001342:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2105      	movs	r1, #5
 800134a:	4618      	mov	r0, r3
 800134c:	f001 face 	bl	80028ec <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xc2>
		Error_Handler();
 8001356:	f000 fa7d 	bl	8001854 <Error_Handler>
	}
}
 800135a:	bf00      	nop
 800135c:	3750      	adds	r7, #80	; 0x50
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000

0800136c <init_system>:

/* USER CODE BEGIN 4 */
void init_system() {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2120      	movs	r1, #32
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <init_system+0x40>)
 8001376:	f001 f827 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2140      	movs	r1, #64	; 0x40
 800137e:	480b      	ldr	r0, [pc, #44]	; (80013ac <init_system+0x40>)
 8001380:	f001 f822 	bl	80023c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2110      	movs	r1, #16
 8001388:	4808      	ldr	r0, [pc, #32]	; (80013ac <init_system+0x40>)
 800138a:	f001 f81d 	bl	80023c8 <HAL_GPIO_WritePin>

	button_init();
 800138e:	f7ff f8a1 	bl	80004d4 <button_init>
	lcd_init();
 8001392:	f7ff fcdd 	bl	8000d50 <lcd_init>

	timer2_init();
 8001396:	f000 fa63 	bl	8001860 <timer2_init>
	timer2_set(50);
 800139a:	2032      	movs	r0, #50	; 0x32
 800139c:	f000 fa6a 	bl	8001874 <timer2_set>

	HAL_Delay(1000);
 80013a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a4:	f000 fd3e 	bl	8001e24 <HAL_Delay>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021000 	.word	0x40021000

080013b0 <isButtonNumber>:

uint16_t isButtonNumber() {
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i <= 15; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e016      	b.n	80013ea <isButtonNumber+0x3a>
		if (button_count[i] == 1) {
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <isButtonNumber+0x50>)
 80013c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10d      	bne.n	80013e4 <isButtonNumber+0x34>
			numberValue = arrayMapOfNumber[i];
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <isButtonNumber+0x54>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b0d      	ldr	r3, [pc, #52]	; (8001408 <isButtonNumber+0x58>)
 80013d2:	801a      	strh	r2, [r3, #0]
			if(numberValue == ' ') return 0;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <isButtonNumber+0x58>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d101      	bne.n	80013e0 <isButtonNumber+0x30>
 80013dc:	2300      	movs	r3, #0
 80013de:	e008      	b.n	80013f2 <isButtonNumber+0x42>
			return 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e006      	b.n	80013f2 <isButtonNumber+0x42>
	for (i = 0; i <= 15; i++)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	3301      	adds	r3, #1
 80013e8:	71fb      	strb	r3, [r7, #7]
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d9e5      	bls.n	80013bc <isButtonNumber+0xc>
		}
	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000054 	.word	0x20000054
 8001404:	20000008 	.word	0x20000008
 8001408:	200000dc 	.word	0x200000dc

0800140c <checkPassword>:

uint16_t checkPassword() {
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
	unsigned char i, j;
	unsigned char result = 1;
 8001412:	2301      	movs	r3, #1
 8001414:	717b      	strb	r3, [r7, #5]
	for (i = 0; i < 5; i++) {
 8001416:	2300      	movs	r3, #0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e023      	b.n	8001464 <checkPassword+0x58>
		result = 1;
 800141c:	2301      	movs	r3, #1
 800141e:	717b      	strb	r3, [r7, #5]
		for (j = 0; j < 4; j++) {
 8001420:	2300      	movs	r3, #0
 8001422:	71bb      	strb	r3, [r7, #6]
 8001424:	e010      	b.n	8001448 <checkPassword+0x3c>
			if (arrayPassword[j] != arrayMapOfPassword[i][j])
 8001426:	79bb      	ldrb	r3, [r7, #6]
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <checkPassword+0x70>)
 800142a:	5cd2      	ldrb	r2, [r2, r3]
 800142c:	79f9      	ldrb	r1, [r7, #7]
 800142e:	79bb      	ldrb	r3, [r7, #6]
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <checkPassword+0x74>)
 8001432:	0089      	lsls	r1, r1, #2
 8001434:	4401      	add	r1, r0
 8001436:	440b      	add	r3, r1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <checkPassword+0x36>
				result = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	717b      	strb	r3, [r7, #5]
		for (j = 0; j < 4; j++) {
 8001442:	79bb      	ldrb	r3, [r7, #6]
 8001444:	3301      	adds	r3, #1
 8001446:	71bb      	strb	r3, [r7, #6]
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d9eb      	bls.n	8001426 <checkPassword+0x1a>
		}
		if (result == 1)
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d104      	bne.n	800145e <checkPassword+0x52>
			return i + 1;
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	b29b      	uxth	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	b29b      	uxth	r3, r3
 800145c:	e007      	b.n	800146e <checkPassword+0x62>
	for (i = 0; i < 5; i++) {
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	3301      	adds	r3, #1
 8001462:	71fb      	strb	r3, [r7, #7]
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d9d8      	bls.n	800141c <checkPassword+0x10>
	}

	return result;
 800146a:	797b      	ldrb	r3, [r7, #5]
 800146c:	b29b      	uxth	r3, r3
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200000d4 	.word	0x200000d4
 8001480:	20000018 	.word	0x20000018

08001484 <UnlockDoor>:

void UnlockDoor() {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af02      	add	r7, sp, #8
	if (flagOpen == 0) {
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <UnlockDoor+0x7c>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d12a      	bne.n	80014e8 <UnlockDoor+0x64>
		lcd_show_picture(80, 90, 77, 130, image_door_open_1);
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <UnlockDoor+0x80>)
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2382      	movs	r3, #130	; 0x82
 8001498:	224d      	movs	r2, #77	; 0x4d
 800149a:	215a      	movs	r1, #90	; 0x5a
 800149c:	2050      	movs	r0, #80	; 0x50
 800149e:	f7ff fbdd 	bl	8000c5c <lcd_show_picture>
		lcd_show_picture(80, 90, 77, 130, image_door_open_2);
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <UnlockDoor+0x84>)
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2382      	movs	r3, #130	; 0x82
 80014a8:	224d      	movs	r2, #77	; 0x4d
 80014aa:	215a      	movs	r1, #90	; 0x5a
 80014ac:	2050      	movs	r0, #80	; 0x50
 80014ae:	f7ff fbd5 	bl	8000c5c <lcd_show_picture>
		lcd_show_picture(80, 90, 80, 135, image_door_open_3);
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <UnlockDoor+0x88>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2387      	movs	r3, #135	; 0x87
 80014b8:	2250      	movs	r2, #80	; 0x50
 80014ba:	215a      	movs	r1, #90	; 0x5a
 80014bc:	2050      	movs	r0, #80	; 0x50
 80014be:	f7ff fbcd 	bl	8000c5c <lcd_show_picture>
		lcd_show_picture(80, 90, 90, 138, image_door_open_4);
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <UnlockDoor+0x8c>)
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	238a      	movs	r3, #138	; 0x8a
 80014c8:	225a      	movs	r2, #90	; 0x5a
 80014ca:	215a      	movs	r1, #90	; 0x5a
 80014cc:	2050      	movs	r0, #80	; 0x50
 80014ce:	f7ff fbc5 	bl	8000c5c <lcd_show_picture>
		lcd_show_picture(80, 90, 98, 138, image_door_open_5);
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <UnlockDoor+0x90>)
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	238a      	movs	r3, #138	; 0x8a
 80014d8:	2262      	movs	r2, #98	; 0x62
 80014da:	215a      	movs	r1, #90	; 0x5a
 80014dc:	2050      	movs	r0, #80	; 0x50
 80014de:	f7ff fbbd 	bl	8000c5c <lcd_show_picture>
		flagOpen = 1;
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <UnlockDoor+0x7c>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	701a      	strb	r2, [r3, #0]
	}
	lcd_show_picture(80, 90, 112, 138, image_door_open_6);
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <UnlockDoor+0x94>)
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	238a      	movs	r3, #138	; 0x8a
 80014ee:	2270      	movs	r2, #112	; 0x70
 80014f0:	215a      	movs	r1, #90	; 0x5a
 80014f2:	2050      	movs	r0, #80	; 0x50
 80014f4:	f7ff fbb2 	bl	8000c5c <lcd_show_picture>
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000e0 	.word	0x200000e0
 8001504:	080465ec 	.word	0x080465ec
 8001508:	0804b420 	.word	0x0804b420
 800150c:	08050254 	.word	0x08050254
 8001510:	080556b4 	.word	0x080556b4
 8001514:	0805b7bc 	.word	0x0805b7bc
 8001518:	08062164 	.word	0x08062164

0800151c <LockDoor>:

void LockDoor() {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af02      	add	r7, sp, #8
	lcd_show_picture(80, 100, 77, 130, image_door_close);
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <LockDoor+0x1c>)
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	2382      	movs	r3, #130	; 0x82
 8001528:	224d      	movs	r2, #77	; 0x4d
 800152a:	2164      	movs	r1, #100	; 0x64
 800152c:	2050      	movs	r0, #80	; 0x50
 800152e:	f7ff fb95 	bl	8000c5c <lcd_show_picture>
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	080417b8 	.word	0x080417b8

0800153c <isButtonEnter>:

uint8_t isButtonEnter() {
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	if (button_count[12] == 1)
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <isButtonEnter+0x1c>)
 8001542:	8b1b      	ldrh	r3, [r3, #24]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <isButtonEnter+0x10>
		return 1;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <isButtonEnter+0x12>
	else
		return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	20000054 	.word	0x20000054

0800155c <AppPasswordDoor>:

void AppPasswordDoor() {
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af04      	add	r7, sp, #16
	switch (statusPassword) {
 8001562:	4bac      	ldr	r3, [pc, #688]	; (8001814 <AppPasswordDoor+0x2b8>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	2b05      	cmp	r3, #5
 8001568:	f200 8147 	bhi.w	80017fa <AppPasswordDoor+0x29e>
 800156c:	a201      	add	r2, pc, #4	; (adr r2, 8001574 <AppPasswordDoor+0x18>)
 800156e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001572:	bf00      	nop
 8001574:	0800158d 	.word	0x0800158d
 8001578:	080015a7 	.word	0x080015a7
 800157c:	08001651 	.word	0x08001651
 8001580:	08001751 	.word	0x08001751
 8001584:	080017a1 	.word	0x080017a1
 8001588:	08001703 	.word	0x08001703
	case INIT_SYSTEM:
		lcd_show_picture(0, 0, 240, 320, image_background);
 800158c:	4ba2      	ldr	r3, [pc, #648]	; (8001818 <AppPasswordDoor+0x2bc>)
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001594:	22f0      	movs	r2, #240	; 0xf0
 8001596:	2100      	movs	r1, #0
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fb5f 	bl	8000c5c <lcd_show_picture>
		statusPassword = LOCK_DOOR;
 800159e:	4b9d      	ldr	r3, [pc, #628]	; (8001814 <AppPasswordDoor+0x2b8>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	801a      	strh	r2, [r3, #0]

		break;
 80015a4:	e132      	b.n	800180c <AppPasswordDoor+0x2b0>

	case LOCK_DOOR:
		lcd_show_picture(25, 40, 180, 49, image_press_enter_text);
 80015a6:	4b9d      	ldr	r3, [pc, #628]	; (800181c <AppPasswordDoor+0x2c0>)
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2331      	movs	r3, #49	; 0x31
 80015ac:	22b4      	movs	r2, #180	; 0xb4
 80015ae:	2128      	movs	r1, #40	; 0x28
 80015b0:	2019      	movs	r0, #25
 80015b2:	f7ff fb53 	bl	8000c5c <lcd_show_picture>
		lcd_show_picture(107, 265, 30, 32, image_protect_icon);
 80015b6:	4b9a      	ldr	r3, [pc, #616]	; (8001820 <AppPasswordDoor+0x2c4>)
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2320      	movs	r3, #32
 80015bc:	221e      	movs	r2, #30
 80015be:	f240 1109 	movw	r1, #265	; 0x109
 80015c2:	206b      	movs	r0, #107	; 0x6b
 80015c4:	f7ff fb4a 	bl	8000c5c <lcd_show_picture>
		lcd_show_string_center(0, 15, "     LOCK       ", RED, WHITE, 16, 0);
 80015c8:	2300      	movs	r3, #0
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	2310      	movs	r3, #16
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015da:	4a92      	ldr	r2, [pc, #584]	; (8001824 <AppPasswordDoor+0x2c8>)
 80015dc:	210f      	movs	r1, #15
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fd7a 	bl	80010d8 <lcd_show_string_center>
		LockDoor();
 80015e4:	f7ff ff9a 	bl	800151c <LockDoor>

		if (isButtonEnter()) {
 80015e8:	f7ff ffa8 	bl	800153c <isButtonEnter>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8105 	beq.w	80017fe <AppPasswordDoor+0x2a2>
			indexOfNumber = 0;
 80015f4:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <AppPasswordDoor+0x2cc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	801a      	strh	r2, [r3, #0]
			timeDelay = 0;
 80015fa:	4b8c      	ldr	r3, [pc, #560]	; (800182c <AppPasswordDoor+0x2d0>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
			statusPassword = ENTER_PASSWORD;
 8001600:	4b84      	ldr	r3, [pc, #528]	; (8001814 <AppPasswordDoor+0x2b8>)
 8001602:	2202      	movs	r2, #2
 8001604:	801a      	strh	r2, [r3, #0]

			lcd_fill(30, 25, 210, 80, WHITE);		//clear text
 8001606:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2350      	movs	r3, #80	; 0x50
 800160e:	22d2      	movs	r2, #210	; 0xd2
 8001610:	2119      	movs	r1, #25
 8001612:	201e      	movs	r0, #30
 8001614:	f7ff fa04 	bl	8000a20 <lcd_fill>
			lcd_fill(30, 265, 210, 300, WHITE);		//clear protect
 8001618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001622:	22d2      	movs	r2, #210	; 0xd2
 8001624:	f240 1109 	movw	r1, #265	; 0x109
 8001628:	201e      	movs	r0, #30
 800162a:	f7ff f9f9 	bl	8000a20 <lcd_fill>

			lcd_show_picture(17, 40, 206, 48, image_pass_enter_text);
 800162e:	4b80      	ldr	r3, [pc, #512]	; (8001830 <AppPasswordDoor+0x2d4>)
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2330      	movs	r3, #48	; 0x30
 8001634:	22ce      	movs	r2, #206	; 0xce
 8001636:	2128      	movs	r1, #40	; 0x28
 8001638:	2011      	movs	r0, #17
 800163a:	f7ff fb0f 	bl	8000c5c <lcd_show_picture>
			lcd_show_picture(17, 235, 206, 30, image_pass_enter);
 800163e:	4b7d      	ldr	r3, [pc, #500]	; (8001834 <AppPasswordDoor+0x2d8>)
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	231e      	movs	r3, #30
 8001644:	22ce      	movs	r2, #206	; 0xce
 8001646:	21eb      	movs	r1, #235	; 0xeb
 8001648:	2011      	movs	r0, #17
 800164a:	f7ff fb07 	bl	8000c5c <lcd_show_picture>
		}
		break;
 800164e:	e0d6      	b.n	80017fe <AppPasswordDoor+0x2a2>

	case ENTER_PASSWORD:
		lcd_show_string_center(0, 12, "   ENTER PASS   ", RED, WHITE, 16, 0);
 8001650:	2300      	movs	r3, #0
 8001652:	9302      	str	r3, [sp, #8]
 8001654:	2310      	movs	r3, #16
 8001656:	9301      	str	r3, [sp, #4]
 8001658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001662:	4a75      	ldr	r2, [pc, #468]	; (8001838 <AppPasswordDoor+0x2dc>)
 8001664:	210c      	movs	r1, #12
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fd36 	bl	80010d8 <lcd_show_string_center>
		timeDelay++;
 800166c:	4b6f      	ldr	r3, [pc, #444]	; (800182c <AppPasswordDoor+0x2d0>)
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b6d      	ldr	r3, [pc, #436]	; (800182c <AppPasswordDoor+0x2d0>)
 8001676:	801a      	strh	r2, [r3, #0]
		if (isButtonNumber()) {
 8001678:	f7ff fe9a 	bl	80013b0 <isButtonNumber>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d025      	beq.n	80016ce <AppPasswordDoor+0x172>
			lcd_show_string(70 + indexOfNumber * 30, 242, "*", BLACK, LIGHTGRAY,
 8001682:	4b69      	ldr	r3, [pc, #420]	; (8001828 <AppPasswordDoor+0x2cc>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	0112      	lsls	r2, r2, #4
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	3346      	adds	r3, #70	; 0x46
 8001692:	b298      	uxth	r0, r3
 8001694:	2300      	movs	r3, #0
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2310      	movs	r3, #16
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	f64e 735b 	movw	r3, #61275	; 0xef5b
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2300      	movs	r3, #0
 80016a4:	4a65      	ldr	r2, [pc, #404]	; (800183c <AppPasswordDoor+0x2e0>)
 80016a6:	21f2      	movs	r1, #242	; 0xf2
 80016a8:	f7ff fcb2 	bl	8001010 <lcd_show_string>
					16, 0);
			arrayPassword[indexOfNumber] = numberValue;
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <AppPasswordDoor+0x2e4>)
 80016ae:	8819      	ldrh	r1, [r3, #0]
 80016b0:	4b5d      	ldr	r3, [pc, #372]	; (8001828 <AppPasswordDoor+0x2cc>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	b2c9      	uxtb	r1, r1
 80016b8:	4b62      	ldr	r3, [pc, #392]	; (8001844 <AppPasswordDoor+0x2e8>)
 80016ba:	5499      	strb	r1, [r3, r2]
			indexOfNumber++;
 80016bc:	4b5a      	ldr	r3, [pc, #360]	; (8001828 <AppPasswordDoor+0x2cc>)
 80016be:	881b      	ldrh	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b58      	ldr	r3, [pc, #352]	; (8001828 <AppPasswordDoor+0x2cc>)
 80016c6:	801a      	strh	r2, [r3, #0]
			timeDelay = 0;
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <AppPasswordDoor+0x2d0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	801a      	strh	r2, [r3, #0]
		}

		if (indexOfNumber >= 4) {
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <AppPasswordDoor+0x2cc>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d902      	bls.n	80016dc <AppPasswordDoor+0x180>
			statusPassword = CHECK_PASSWORD;
 80016d6:	4b4f      	ldr	r3, [pc, #316]	; (8001814 <AppPasswordDoor+0x2b8>)
 80016d8:	2205      	movs	r2, #5
 80016da:	801a      	strh	r2, [r3, #0]
		}

		if (timeDelay >= 100) {
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <AppPasswordDoor+0x2d0>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	2b63      	cmp	r3, #99	; 0x63
 80016e2:	f240 808e 	bls.w	8001802 <AppPasswordDoor+0x2a6>
			statusPassword = LOCK_DOOR;
 80016e6:	4b4b      	ldr	r3, [pc, #300]	; (8001814 <AppPasswordDoor+0x2b8>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	801a      	strh	r2, [r3, #0]
			lcd_fill(20, 20, 220, 300, WHITE);
 80016ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80016f6:	22dc      	movs	r2, #220	; 0xdc
 80016f8:	2114      	movs	r1, #20
 80016fa:	2014      	movs	r0, #20
 80016fc:	f7ff f990 	bl	8000a20 <lcd_fill>
		}
		break;
 8001700:	e07f      	b.n	8001802 <AppPasswordDoor+0x2a6>

	case CHECK_PASSWORD:

		timeDelay = 0;
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <AppPasswordDoor+0x2d0>)
 8001704:	2200      	movs	r2, #0
 8001706:	801a      	strh	r2, [r3, #0]
		if (checkPassword()) {
 8001708:	f7ff fe80 	bl	800140c <checkPassword>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01a      	beq.n	8001748 <AppPasswordDoor+0x1ec>
			lcd_fill(30, 40, 210, 80, WHITE);		//clear text
 8001712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2350      	movs	r3, #80	; 0x50
 800171a:	22d2      	movs	r2, #210	; 0xd2
 800171c:	2128      	movs	r1, #40	; 0x28
 800171e:	201e      	movs	r0, #30
 8001720:	f7ff f97e 	bl	8000a20 <lcd_fill>
			lcd_fill(30, 265, 210, 300, WHITE);		//clear protect
 8001724:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800172e:	22d2      	movs	r2, #210	; 0xd2
 8001730:	f240 1109 	movw	r1, #265	; 0x109
 8001734:	201e      	movs	r0, #30
 8001736:	f7ff f973 	bl	8000a20 <lcd_fill>
			statusPassword = UNLOCK_DOOR;
 800173a:	4b36      	ldr	r3, [pc, #216]	; (8001814 <AppPasswordDoor+0x2b8>)
 800173c:	2203      	movs	r2, #3
 800173e:	801a      	strh	r2, [r3, #0]
			timeDelay = 0;
 8001740:	4b3a      	ldr	r3, [pc, #232]	; (800182c <AppPasswordDoor+0x2d0>)
 8001742:	2200      	movs	r2, #0
 8001744:	801a      	strh	r2, [r3, #0]
		} else {
			statusPassword = WRONG_PASSWORD;
		}

		break;
 8001746:	e061      	b.n	800180c <AppPasswordDoor+0x2b0>
			statusPassword = WRONG_PASSWORD;
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <AppPasswordDoor+0x2b8>)
 800174a:	2204      	movs	r2, #4
 800174c:	801a      	strh	r2, [r3, #0]
		break;
 800174e:	e05d      	b.n	800180c <AppPasswordDoor+0x2b0>

	case UNLOCK_DOOR:
		lcd_show_string_center(0, 12, "    UNLOCK     ", RED, WHITE, 16, 0);
 8001750:	2300      	movs	r3, #0
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2310      	movs	r3, #16
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001762:	4a39      	ldr	r2, [pc, #228]	; (8001848 <AppPasswordDoor+0x2ec>)
 8001764:	210c      	movs	r1, #12
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff fcb6 	bl	80010d8 <lcd_show_string_center>
		timeDelay++;
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <AppPasswordDoor+0x2d0>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	b29a      	uxth	r2, r3
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <AppPasswordDoor+0x2d0>)
 8001776:	801a      	strh	r2, [r3, #0]
		UnlockDoor();
 8001778:	f7ff fe84 	bl	8001484 <UnlockDoor>
		if (timeDelay >= 100) {
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <AppPasswordDoor+0x2d0>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2b63      	cmp	r3, #99	; 0x63
 8001782:	d940      	bls.n	8001806 <AppPasswordDoor+0x2aa>
			statusPassword = LOCK_DOOR;
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <AppPasswordDoor+0x2b8>)
 8001786:	2201      	movs	r2, #1
 8001788:	801a      	strh	r2, [r3, #0]
			lcd_fill(20, 20, 220, 300, WHITE);
 800178a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001794:	22dc      	movs	r2, #220	; 0xdc
 8001796:	2114      	movs	r1, #20
 8001798:	2014      	movs	r0, #20
 800179a:	f7ff f941 	bl	8000a20 <lcd_fill>
		}
		break;
 800179e:	e032      	b.n	8001806 <AppPasswordDoor+0x2aa>

	case WRONG_PASSWORD:
		timeDelay++;
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <AppPasswordDoor+0x2d0>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <AppPasswordDoor+0x2d0>)
 80017aa:	801a      	strh	r2, [r3, #0]
		lcd_show_picture(17, 40, 206, 53, image_wrong_pass_text);
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <AppPasswordDoor+0x2f0>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2335      	movs	r3, #53	; 0x35
 80017b2:	22ce      	movs	r2, #206	; 0xce
 80017b4:	2128      	movs	r1, #40	; 0x28
 80017b6:	2011      	movs	r0, #17
 80017b8:	f7ff fa50 	bl	8000c5c <lcd_show_picture>
		lcd_show_picture(17, 235, 206, 30, image_pass_enter);
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <AppPasswordDoor+0x2d8>)
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	231e      	movs	r3, #30
 80017c2:	22ce      	movs	r2, #206	; 0xce
 80017c4:	21eb      	movs	r1, #235	; 0xeb
 80017c6:	2011      	movs	r0, #17
 80017c8:	f7ff fa48 	bl	8000c5c <lcd_show_picture>
		lcd_show_picture(17, 265, 206, 28, image_wrong_icon);
 80017cc:	4b20      	ldr	r3, [pc, #128]	; (8001850 <AppPasswordDoor+0x2f4>)
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	231c      	movs	r3, #28
 80017d2:	22ce      	movs	r2, #206	; 0xce
 80017d4:	f240 1109 	movw	r1, #265	; 0x109
 80017d8:	2011      	movs	r0, #17
 80017da:	f7ff fa3f 	bl	8000c5c <lcd_show_picture>

		statusPassword = ENTER_PASSWORD;
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <AppPasswordDoor+0x2b8>)
 80017e0:	2202      	movs	r2, #2
 80017e2:	801a      	strh	r2, [r3, #0]
		indexOfNumber = 0;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <AppPasswordDoor+0x2cc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	801a      	strh	r2, [r3, #0]

		if (timeDelay >= 100) {
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <AppPasswordDoor+0x2d0>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	2b63      	cmp	r3, #99	; 0x63
 80017f0:	d90b      	bls.n	800180a <AppPasswordDoor+0x2ae>
			statusPassword = LOCK_DOOR;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <AppPasswordDoor+0x2b8>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	801a      	strh	r2, [r3, #0]
		}
		break;
 80017f8:	e007      	b.n	800180a <AppPasswordDoor+0x2ae>

	default:
		break;
 80017fa:	bf00      	nop
 80017fc:	e006      	b.n	800180c <AppPasswordDoor+0x2b0>
		break;
 80017fe:	bf00      	nop
 8001800:	e004      	b.n	800180c <AppPasswordDoor+0x2b0>
		break;
 8001802:	bf00      	nop
 8001804:	e002      	b.n	800180c <AppPasswordDoor+0x2b0>
		break;
 8001806:	bf00      	nop
 8001808:	e000      	b.n	800180c <AppPasswordDoor+0x2b0>
		break;
 800180a:	bf00      	nop
	}
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200000d8 	.word	0x200000d8
 8001818:	0800736c 	.word	0x0800736c
 800181c:	08033044 	.word	0x08033044
 8001820:	0802cb6c 	.word	0x0802cb6c
 8001824:	080043b0 	.word	0x080043b0
 8001828:	200000da 	.word	0x200000da
 800182c:	200000de 	.word	0x200000de
 8001830:	0803752c 	.word	0x0803752c
 8001834:	0802fffc 	.word	0x0802fffc
 8001838:	080043c4 	.word	0x080043c4
 800183c:	080043d8 	.word	0x080043d8
 8001840:	200000dc 	.word	0x200000dc
 8001844:	200000d4 	.word	0x200000d4
 8001848:	080043dc 	.word	0x080043dc
 800184c:	0803c26c 	.word	0x0803c26c
 8001850:	0802d2ec 	.word	0x0802d2ec

08001854 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>
	...

08001860 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <timer2_init+0x10>)
 8001866:	f002 f869 	bl	800393c <HAL_TIM_Base_Start_IT>
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000144 	.word	0x20000144

08001874 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <timer2_set+0x2c>)
 8001882:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <timer2_set+0x2c>)
 8001886:	881a      	ldrh	r2, [r3, #0]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <timer2_set+0x30>)
 800188a:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <timer2_set+0x34>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200000e4 	.word	0x200000e4
 80018a4:	200000e2 	.word	0x200000e2
 80018a8:	200000e1 	.word	0x200000e1

080018ac <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018bc:	d114      	bne.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d010      	beq.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018c8:	881b      	ldrh	r3, [r3, #0]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018d0:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80018e2:	881a      	ldrh	r2, [r3, #0]
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018e6:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d116      	bne.n	8001920 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d010      	beq.n	800191c <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29a      	uxth	r2, r3
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001904:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d106      	bne.n	800191c <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001916:	881a      	ldrh	r2, [r3, #0]
 8001918:	4b07      	ldr	r3, [pc, #28]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800191a:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 800191c:	f7ff fc0e 	bl	800113c <led_7seg_display>
	}
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200000e2 	.word	0x200000e2
 800192c:	200000e1 	.word	0x200000e1
 8001930:	200000e4 	.word	0x200000e4
 8001934:	40000800 	.word	0x40000800
 8001938:	200000e8 	.word	0x200000e8
 800193c:	200000e6 	.word	0x200000e6
 8001940:	200000ea 	.word	0x200000ea

08001944 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_SPI1_Init+0x64>)
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <MX_SPI1_Init+0x68>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001974:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001978:	2200      	movs	r2, #0
 800197a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_SPI1_Init+0x64>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_SPI1_Init+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001990:	220a      	movs	r2, #10
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_SPI1_Init+0x64>)
 8001996:	f001 f995 	bl	8002cc4 <HAL_SPI_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019a0:	f7ff ff58 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200000ec 	.word	0x200000ec
 80019ac:	40013000 	.word	0x40013000

080019b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <HAL_SPI_MspInit+0x84>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d12b      	bne.n	8001a2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_SPI_MspInit+0x88>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_SPI_MspInit+0x88>)
 80019dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019e0:	6453      	str	r3, [r2, #68]	; 0x44
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_SPI_MspInit+0x88>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <HAL_SPI_MspInit+0x88>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a10      	ldr	r2, [pc, #64]	; (8001a38 <HAL_SPI_MspInit+0x88>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_SPI_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a0a:	2338      	movs	r3, #56	; 0x38
 8001a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_SPI_MspInit+0x8c>)
 8001a26:	f000 fb33 	bl	8002090 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3728      	adds	r7, #40	; 0x28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40013000 	.word	0x40013000
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020400 	.word	0x40020400

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f982 	bl	8001de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM2_IRQHandler+0x10>)
 8001aea:	f001 ff97 	bl	8003a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000144 	.word	0x20000144

08001af8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM4_IRQHandler+0x10>)
 8001afe:	f001 ff8d 	bl	8003a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000018c 	.word	0x2000018c

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <SystemInit+0x20>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a05      	ldr	r2, [pc, #20]	; (8001b2c <SystemInit+0x20>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	463b      	mov	r3, r7
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b56:	f240 3247 	movw	r2, #839	; 0x347
 8001b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001b62:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b64:	2263      	movs	r2, #99	; 0x63
 8001b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b76:	f001 fe91 	bl	800389c <HAL_TIM_Base_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b80:	f7ff fe68 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001b92:	f002 f84b 	bl	8003c2c <HAL_TIM_ConfigClockSource>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b9c:	f7ff fe5a 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_TIM2_Init+0x94>)
 8001bae:	f002 fa67 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bb8:	f7ff fe4c 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000144 	.word	0x20000144

08001bc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <MX_TIM4_Init+0x98>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001bec:	f240 3247 	movw	r2, #839	; 0x347
 8001bf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001bfa:	2263      	movs	r2, #99	; 0x63
 8001bfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c0a:	4814      	ldr	r0, [pc, #80]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c0c:	f001 fe46 	bl	800389c <HAL_TIM_Base_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c16:	f7ff fe1d 	bl	8001854 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	4619      	mov	r1, r3
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c28:	f002 f800 	bl	8003c2c <HAL_TIM_ConfigClockSource>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001c32:	f7ff fe0f 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c3e:	463b      	mov	r3, r7
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	; (8001c5c <MX_TIM4_Init+0x94>)
 8001c44:	f002 fa1c 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001c4e:	f7ff fe01 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	2000018c 	.word	0x2000018c
 8001c60:	40000800 	.word	0x40000800

08001c64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d116      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_TIM_Base_MspInit+0x80>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a19      	ldr	r2, [pc, #100]	; (8001ce4 <HAL_TIM_Base_MspInit+0x80>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_TIM_Base_MspInit+0x80>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	201c      	movs	r0, #28
 8001c98:	f000 f9c3 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c9c:	201c      	movs	r0, #28
 8001c9e:	f000 f9dc 	bl	800205a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ca2:	e01a      	b.n	8001cda <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <HAL_TIM_Base_MspInit+0x84>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d115      	bne.n	8001cda <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <HAL_TIM_Base_MspInit+0x80>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_TIM_Base_MspInit+0x80>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_TIM_Base_MspInit+0x80>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2100      	movs	r1, #0
 8001cce:	201e      	movs	r0, #30
 8001cd0:	f000 f9a7 	bl	8002022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001cd4:	201e      	movs	r0, #30
 8001cd6:	f000 f9c0 	bl	800205a <HAL_NVIC_EnableIRQ>
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40000800 	.word	0x40000800

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d16:	f7ff fef9 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f002 fb19 	bl	8004350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff fa99 	bl	8001254 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001d30:	08069a44 	.word	0x08069a44
  ldr r2, =_sbss
 8001d34:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001d38:	200001d8 	.word	0x200001d8

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>
	...

08001d40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <HAL_Init+0x40>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <HAL_Init+0x40>)
 8001d4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_Init+0x40>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_Init+0x40>)
 8001d56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_Init+0x40>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_Init+0x40>)
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d68:	2003      	movs	r0, #3
 8001d6a:	f000 f94f 	bl	800200c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d6e:	200f      	movs	r0, #15
 8001d70:	f000 f808 	bl	8001d84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d74:	f7ff fe64 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023c00 	.word	0x40023c00

08001d84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_InitTick+0x54>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_InitTick+0x58>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4619      	mov	r1, r3
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f967 	bl	8002076 <HAL_SYSTICK_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e00e      	b.n	8001dd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b0f      	cmp	r3, #15
 8001db6:	d80a      	bhi.n	8001dce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db8:	2200      	movs	r2, #0
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc0:	f000 f92f 	bl	8002022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc4:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <HAL_InitTick+0x5c>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e000      	b.n	8001dd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000002c 	.word	0x2000002c
 8001ddc:	20000034 	.word	0x20000034
 8001de0:	20000030 	.word	0x20000030

08001de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_IncTick+0x20>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	461a      	mov	r2, r3
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_IncTick+0x24>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4413      	add	r3, r2
 8001df4:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <HAL_IncTick+0x24>)
 8001df6:	6013      	str	r3, [r2, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000034 	.word	0x20000034
 8001e08:	200001d4 	.word	0x200001d4

08001e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_GetTick+0x14>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	200001d4 	.word	0x200001d4

08001e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff ffee 	bl	8001e0c <HAL_GetTick>
 8001e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e3c:	d005      	beq.n	8001e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3e:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <HAL_Delay+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	461a      	mov	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e4a:	bf00      	nop
 8001e4c:	f7ff ffde 	bl	8001e0c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8f7      	bhi.n	8001e4c <HAL_Delay+0x28>
  {
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000034 	.word	0x20000034

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fd8:	d301      	bcc.n	8001fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e00f      	b.n	8001ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <SysTick_Config+0x40>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fe6:	210f      	movs	r1, #15
 8001fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fec:	f7ff ff8e 	bl	8001f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <SysTick_Config+0x40>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ff6:	4b04      	ldr	r3, [pc, #16]	; (8002008 <SysTick_Config+0x40>)
 8001ff8:	2207      	movs	r2, #7
 8001ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	e000e010 	.word	0xe000e010

0800200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ff29 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002034:	f7ff ff3e 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8002038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7ff ff8e 	bl	8001f60 <NVIC_EncodePriority>
 8002044:	4602      	mov	r2, r0
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff ff5d 	bl	8001f0c <__NVIC_SetPriority>
}
 8002052:	bf00      	nop
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff31 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffa2 	bl	8001fc8 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	e16b      	b.n	8002384 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4013      	ands	r3, r2
 80020be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 815a 	bne.w	800237e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d005      	beq.n	80020e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d130      	bne.n	8002144 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0201 	and.w	r2, r3, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	2b03      	cmp	r3, #3
 800214e:	d017      	beq.n	8002180 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d123      	bne.n	80021d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	08da      	lsrs	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3208      	adds	r2, #8
 8002194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0203 	and.w	r2, r3, #3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80b4 	beq.w	800237e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b60      	ldr	r3, [pc, #384]	; (800239c <HAL_GPIO_Init+0x30c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a5f      	ldr	r2, [pc, #380]	; (800239c <HAL_GPIO_Init+0x30c>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b5d      	ldr	r3, [pc, #372]	; (800239c <HAL_GPIO_Init+0x30c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002232:	4a5b      	ldr	r2, [pc, #364]	; (80023a0 <HAL_GPIO_Init+0x310>)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	220f      	movs	r2, #15
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_GPIO_Init+0x314>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <HAL_GPIO_Init+0x226>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a51      	ldr	r2, [pc, #324]	; (80023a8 <HAL_GPIO_Init+0x318>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d025      	beq.n	80022b2 <HAL_GPIO_Init+0x222>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a50      	ldr	r2, [pc, #320]	; (80023ac <HAL_GPIO_Init+0x31c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01f      	beq.n	80022ae <HAL_GPIO_Init+0x21e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4f      	ldr	r2, [pc, #316]	; (80023b0 <HAL_GPIO_Init+0x320>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x21a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4e      	ldr	r2, [pc, #312]	; (80023b4 <HAL_GPIO_Init+0x324>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x216>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4d      	ldr	r2, [pc, #308]	; (80023b8 <HAL_GPIO_Init+0x328>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x212>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4c      	ldr	r2, [pc, #304]	; (80023bc <HAL_GPIO_Init+0x32c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x20e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4b      	ldr	r2, [pc, #300]	; (80023c0 <HAL_GPIO_Init+0x330>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x20a>
 8002296:	2307      	movs	r3, #7
 8002298:	e00e      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 800229a:	2308      	movs	r3, #8
 800229c:	e00c      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 800229e:	2306      	movs	r3, #6
 80022a0:	e00a      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022a2:	2305      	movs	r3, #5
 80022a4:	e008      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e006      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022aa:	2303      	movs	r3, #3
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x228>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	; (80023a0 <HAL_GPIO_Init+0x310>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_GPIO_Init+0x334>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022fa:	4a32      	ldr	r2, [pc, #200]	; (80023c4 <HAL_GPIO_Init+0x334>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002300:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_GPIO_Init+0x334>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002324:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_GPIO_Init+0x334>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_GPIO_Init+0x334>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_GPIO_Init+0x334>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_GPIO_Init+0x334>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <HAL_GPIO_Init+0x334>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f ae90 	bls.w	80020ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40020c00 	.word	0x40020c00
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40021400 	.word	0x40021400
 80023bc:	40021800 	.word	0x40021800
 80023c0:	40021c00 	.word	0x40021c00
 80023c4:	40013c00 	.word	0x40013c00

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023e4:	e003      	b.n	80023ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023e6:	887b      	ldrh	r3, [r7, #2]
 80023e8:	041a      	lsls	r2, r3, #16
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	619a      	str	r2, [r3, #24]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e267      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d075      	beq.n	8002506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241a:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d00c      	beq.n	8002440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4b85      	ldr	r3, [pc, #532]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242e:	2b08      	cmp	r3, #8
 8002430:	d112      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4b82      	ldr	r3, [pc, #520]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243e:	d10b      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	4b7e      	ldr	r3, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05b      	beq.n	8002504 <HAL_RCC_OscConfig+0x108>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d157      	bne.n	8002504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e242      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x74>
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a75      	ldr	r2, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x98>
 800247a:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6f      	ldr	r2, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6c      	ldr	r2, [pc, #432]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002494:	4b69      	ldr	r3, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a68      	ldr	r2, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff fcaa 	bl	8001e0c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fca6 	bl	8001e0c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e207      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xc0>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7ff fc96 	bl	8001e0c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fc92 	bl	8001e0c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1f3      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0xe8>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002512:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002526:	2b08      	cmp	r3, #8
 8002528:	d11c      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b44      	ldr	r3, [pc, #272]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1c7      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4937      	ldr	r1, [pc, #220]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e03a      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_RCC_OscConfig+0x244>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7ff fc4b 	bl	8001e0c <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257a:	f7ff fc47 	bl	8001e0c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1a8      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4925      	ldr	r1, [pc, #148]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x244>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff fc2a 	bl	8001e0c <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025bc:	f7ff fc26 	bl	8001e0c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e187      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d036      	beq.n	8002654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_RCC_OscConfig+0x248>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff fc0a 	bl	8001e0c <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fc:	f7ff fc06 	bl	8001e0c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e167      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x200>
 800261a:	e01b      	b.n	8002654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCC_OscConfig+0x248>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7ff fbf3 	bl	8001e0c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	e00e      	b.n	8002648 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262a:	f7ff fbef 	bl	8001e0c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d907      	bls.n	8002648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e150      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
 800263c:	40023800 	.word	0x40023800
 8002640:	42470000 	.word	0x42470000
 8002644:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ea      	bne.n	800262a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8097 	beq.w	8002790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b81      	ldr	r3, [pc, #516]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b7d      	ldr	r3, [pc, #500]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a7c      	ldr	r2, [pc, #496]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b7a      	ldr	r3, [pc, #488]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b77      	ldr	r3, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b74      	ldr	r3, [pc, #464]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a73      	ldr	r2, [pc, #460]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7ff fbaf 	bl	8001e0c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7ff fbab 	bl	8001e0c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e10c      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2ea>
 80026d8:	4b64      	ldr	r3, [pc, #400]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a63      	ldr	r2, [pc, #396]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x324>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x30c>
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a5e      	ldr	r2, [pc, #376]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	4b5c      	ldr	r3, [pc, #368]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a5b      	ldr	r2, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0x324>
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	4b55      	ldr	r3, [pc, #340]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a54      	ldr	r2, [pc, #336]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7ff fb70 	bl	8001e0c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7ff fb6c 	bl	8001e0c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0cb      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	4b49      	ldr	r3, [pc, #292]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ee      	beq.n	8002730 <HAL_RCC_OscConfig+0x334>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002754:	f7ff fb5a 	bl	8001e0c <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7ff fb56 	bl	8001e0c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0b5      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	4b3e      	ldr	r3, [pc, #248]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1ee      	bne.n	800275c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4a38      	ldr	r2, [pc, #224]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a1 	beq.w	80028dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d05c      	beq.n	8002860 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d141      	bne.n	8002832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fb2a 	bl	8001e0c <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7ff fb26 	bl	8001e0c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e087      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	019b      	lsls	r3, r3, #6
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	491b      	ldr	r1, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_RCC_OscConfig+0x478>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7ff faff 	bl	8001e0c <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7ff fafb 	bl	8001e0c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e05c      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x416>
 8002830:	e054      	b.n	80028dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fae8 	bl	8001e0c <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7ff fae4 	bl	8001e0c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e045      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x444>
 800285e:	e03d      	b.n	80028dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e038      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000
 8002874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x4ec>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d028      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d121      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	3b01      	subs	r3, #1
 80028c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0cc      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d90c      	bls.n	8002928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800294a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d044      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d119      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e067      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4934      	ldr	r1, [pc, #208]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7ff fa16 	bl	8001e0c <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7ff fa12 	bl	8001e0c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e04f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d20c      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff f976 	bl	8001d84 <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	08069a24 	.word	0x08069a24
 8002ab0:	2000002c 	.word	0x2000002c
 8002ab4:	20000030 	.word	0x20000030

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002abc:	b094      	sub	sp, #80	; 0x50
 8002abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac8:	2300      	movs	r3, #0
 8002aca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad0:	4b79      	ldr	r3, [pc, #484]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x40>
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	f200 80e1 	bhi.w	8002ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x34>
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aea:	e0db      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002af0:	e0db      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af2:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af6:	e0d8      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af8:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b02:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	2200      	movs	r2, #0
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
 8002b26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	f04f 0000 	mov.w	r0, #0
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	0159      	lsls	r1, r3, #5
 8002b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3c:	0150      	lsls	r0, r2, #5
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4621      	mov	r1, r4
 8002b44:	1a51      	subs	r1, r2, r1
 8002b46:	6139      	str	r1, [r7, #16]
 8002b48:	4629      	mov	r1, r5
 8002b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	018b      	lsls	r3, r1, #6
 8002b60:	4651      	mov	r1, sl
 8002b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b66:	4651      	mov	r1, sl
 8002b68:	018a      	lsls	r2, r1, #6
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b70:	4659      	mov	r1, fp
 8002b72:	eb63 0901 	sbc.w	r9, r3, r1
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b8a:	4690      	mov	r8, r2
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	4623      	mov	r3, r4
 8002b90:	eb18 0303 	adds.w	r3, r8, r3
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	462b      	mov	r3, r5
 8002b98:	eb49 0303 	adc.w	r3, r9, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002baa:	4629      	mov	r1, r5
 8002bac:	024b      	lsls	r3, r1, #9
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	024a      	lsls	r2, r1, #9
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc8:	f7fd fb06 	bl	80001d8 <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd4:	e058      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	4611      	mov	r1, r2
 8002be2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
 8002bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	0159      	lsls	r1, r3, #5
 8002bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c02:	0150      	lsls	r0, r2, #5
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4641      	mov	r1, r8
 8002c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c0e:	4649      	mov	r1, r9
 8002c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c28:	ebb2 040a 	subs.w	r4, r2, sl
 8002c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	00eb      	lsls	r3, r5, #3
 8002c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3e:	00e2      	lsls	r2, r4, #3
 8002c40:	4614      	mov	r4, r2
 8002c42:	461d      	mov	r5, r3
 8002c44:	4643      	mov	r3, r8
 8002c46:	18e3      	adds	r3, r4, r3
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	eb45 0303 	adc.w	r3, r5, r3
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5e:	4629      	mov	r1, r5
 8002c60:	028b      	lsls	r3, r1, #10
 8002c62:	4621      	mov	r1, r4
 8002c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c68:	4621      	mov	r1, r4
 8002c6a:	028a      	lsls	r2, r1, #10
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c72:	2200      	movs	r2, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	61fa      	str	r2, [r7, #28]
 8002c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c7c:	f7fd faac 	bl	80001d8 <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	3301      	adds	r3, #1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3750      	adds	r7, #80	; 0x50
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	007a1200 	.word	0x007a1200

08002cc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e07b      	b.n	8002dce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce6:	d009      	beq.n	8002cfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
 8002cee:	e005      	b.n	8002cfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fe fe4a 	bl	80019b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	ea42 0103 	orr.w	r1, r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0104 	and.w	r1, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	f003 0210 	and.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	69da      	ldr	r2, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b088      	sub	sp, #32
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_SPI_Transmit+0x22>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e126      	b.n	8003046 <HAL_SPI_Transmit+0x270>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e00:	f7ff f804 	bl	8001e0c <HAL_GetTick>
 8002e04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d002      	beq.n	8002e1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
 8002e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e1a:	e10b      	b.n	8003034 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_SPI_Transmit+0x52>
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e2c:	e102      	b.n	8003034 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2203      	movs	r2, #3
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	88fa      	ldrh	r2, [r7, #6]
 8002e46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e74:	d10f      	bne.n	8002e96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b40      	cmp	r3, #64	; 0x40
 8002ea2:	d007      	beq.n	8002eb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ebc:	d14b      	bne.n	8002f56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_SPI_Transmit+0xf6>
 8002ec6:	8afb      	ldrh	r3, [r7, #22]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d13e      	bne.n	8002f4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	881a      	ldrh	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	1c9a      	adds	r2, r3, #2
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ef0:	e02b      	b.n	8002f4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d112      	bne.n	8002f26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	1c9a      	adds	r2, r3, #2
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f24:	e011      	b.n	8002f4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f26:	f7fe ff71 	bl	8001e0c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d803      	bhi.n	8002f3e <HAL_SPI_Transmit+0x168>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d102      	bne.n	8002f44 <HAL_SPI_Transmit+0x16e>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f48:	e074      	b.n	8003034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1ce      	bne.n	8002ef2 <HAL_SPI_Transmit+0x11c>
 8002f54:	e04c      	b.n	8002ff0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_SPI_Transmit+0x18e>
 8002f5e:	8afb      	ldrh	r3, [r7, #22]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d140      	bne.n	8002fe6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	7812      	ldrb	r2, [r2, #0]
 8002f70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f8a:	e02c      	b.n	8002fe6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d113      	bne.n	8002fc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fc0:	e011      	b.n	8002fe6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc2:	f7fe ff23 	bl	8001e0c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d803      	bhi.n	8002fda <HAL_SPI_Transmit+0x204>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d102      	bne.n	8002fe0 <HAL_SPI_Transmit+0x20a>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fe4:	e026      	b.n	8003034 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1cd      	bne.n	8002f8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	6839      	ldr	r1, [r7, #0]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 fbcb 	bl	8003790 <SPI_EndRxTxTransaction>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e000      	b.n	8003034 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003044:	7ffb      	ldrb	r3, [r7, #31]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b088      	sub	sp, #32
 8003052:	af02      	add	r7, sp, #8
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800306a:	d112      	bne.n	8003092 <HAL_SPI_Receive+0x44>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10e      	bne.n	8003092 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2204      	movs	r2, #4
 8003078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	4613      	mov	r3, r2
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f8f1 	bl	8003270 <HAL_SPI_TransmitReceive>
 800308e:	4603      	mov	r3, r0
 8003090:	e0ea      	b.n	8003268 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_SPI_Receive+0x52>
 800309c:	2302      	movs	r3, #2
 800309e:	e0e3      	b.n	8003268 <HAL_SPI_Receive+0x21a>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030a8:	f7fe feb0 	bl	8001e0c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030ba:	2302      	movs	r3, #2
 80030bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030be:	e0ca      	b.n	8003256 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_SPI_Receive+0x7e>
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030d0:	e0c1      	b.n	8003256 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2204      	movs	r2, #4
 80030d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003118:	d10f      	bne.n	800313a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d007      	beq.n	8003158 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d162      	bne.n	8003226 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003160:	e02e      	b.n	80031c0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d115      	bne.n	800319c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f103 020c 	add.w	r2, r3, #12
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800319a:	e011      	b.n	80031c0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800319c:	f7fe fe36 	bl	8001e0c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d803      	bhi.n	80031b4 <HAL_SPI_Receive+0x166>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d102      	bne.n	80031ba <HAL_SPI_Receive+0x16c>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031be:	e04a      	b.n	8003256 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1cb      	bne.n	8003162 <HAL_SPI_Receive+0x114>
 80031ca:	e031      	b.n	8003230 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d113      	bne.n	8003202 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	b292      	uxth	r2, r2
 80031e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	1c9a      	adds	r2, r3, #2
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003200:	e011      	b.n	8003226 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003202:	f7fe fe03 	bl	8001e0c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d803      	bhi.n	800321a <HAL_SPI_Receive+0x1cc>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d102      	bne.n	8003220 <HAL_SPI_Receive+0x1d2>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d102      	bne.n	8003226 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003224:	e017      	b.n	8003256 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1cd      	bne.n	80031cc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	6839      	ldr	r1, [r7, #0]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 fa45 	bl	80036c4 <SPI_EndRxTransaction>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
 8003252:	e000      	b.n	8003256 <HAL_SPI_Receive+0x208>
  }

error :
 8003254:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003266:	7dfb      	ldrb	r3, [r7, #23]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08c      	sub	sp, #48	; 0x30
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800327e:	2301      	movs	r3, #1
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_SPI_TransmitReceive+0x26>
 8003292:	2302      	movs	r3, #2
 8003294:	e18a      	b.n	80035ac <HAL_SPI_TransmitReceive+0x33c>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800329e:	f7fe fdb5 	bl	8001e0c <HAL_GetTick>
 80032a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d00f      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x70>
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c6:	d107      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d103      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x68>
 80032d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d003      	beq.n	80032e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032de:	e15b      	b.n	8003598 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_SPI_TransmitReceive+0x82>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_TransmitReceive+0x82>
 80032ec:	887b      	ldrh	r3, [r7, #2]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d103      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032f8:	e14e      	b.n	8003598 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b04      	cmp	r3, #4
 8003304:	d003      	beq.n	800330e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2205      	movs	r2, #5
 800330a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	887a      	ldrh	r2, [r7, #2]
 800331e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	887a      	ldrh	r2, [r7, #2]
 8003336:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d007      	beq.n	8003362 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336a:	d178      	bne.n	800345e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <HAL_SPI_TransmitReceive+0x10a>
 8003374:	8b7b      	ldrh	r3, [r7, #26]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d166      	bne.n	8003448 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	1c9a      	adds	r2, r3, #2
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339e:	e053      	b.n	8003448 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d11b      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x176>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_SPI_TransmitReceive+0x176>
 80033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d113      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	1c9a      	adds	r2, r3, #2
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d119      	bne.n	8003428 <HAL_SPI_TransmitReceive+0x1b8>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	b292      	uxth	r2, r2
 800340a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	1c9a      	adds	r2, r3, #2
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003424:	2301      	movs	r3, #1
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003428:	f7fe fcf0 	bl	8001e0c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003434:	429a      	cmp	r2, r3
 8003436:	d807      	bhi.n	8003448 <HAL_SPI_TransmitReceive+0x1d8>
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d003      	beq.n	8003448 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003446:	e0a7      	b.n	8003598 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1a6      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x130>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1a1      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x130>
 800345c:	e07c      	b.n	8003558 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <HAL_SPI_TransmitReceive+0x1fc>
 8003466:	8b7b      	ldrh	r3, [r7, #26]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d16b      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	7812      	ldrb	r2, [r2, #0]
 8003478:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003492:	e057      	b.n	8003544 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d11c      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x26c>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d017      	beq.n	80034dc <HAL_SPI_TransmitReceive+0x26c>
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d114      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d119      	bne.n	800351e <HAL_SPI_TransmitReceive+0x2ae>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d014      	beq.n	800351e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800351a:	2301      	movs	r3, #1
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800351e:	f7fe fc75 	bl	8001e0c <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800352a:	429a      	cmp	r2, r3
 800352c:	d803      	bhi.n	8003536 <HAL_SPI_TransmitReceive+0x2c6>
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d102      	bne.n	800353c <HAL_SPI_TransmitReceive+0x2cc>
 8003536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003542:	e029      	b.n	8003598 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1a2      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x224>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d19d      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f917 	bl	8003790 <SPI_EndRxTxTransaction>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d006      	beq.n	8003576 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003574:	e010      	b.n	8003598 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	e000      	b.n	8003598 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003596:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3730      	adds	r7, #48	; 0x30
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035c4:	f7fe fc22 	bl	8001e0c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	4413      	add	r3, r2
 80035d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035d4:	f7fe fc1a 	bl	8001e0c <HAL_GetTick>
 80035d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035da:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	015b      	lsls	r3, r3, #5
 80035e0:	0d1b      	lsrs	r3, r3, #20
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035ea:	e054      	b.n	8003696 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d050      	beq.n	8003696 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035f4:	f7fe fc0a 	bl	8001e0c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	429a      	cmp	r2, r3
 8003602:	d902      	bls.n	800360a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d13d      	bne.n	8003686 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003622:	d111      	bne.n	8003648 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362c:	d004      	beq.n	8003638 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d107      	bne.n	8003648 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003650:	d10f      	bne.n	8003672 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e017      	b.n	80036b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3b01      	subs	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d19b      	bne.n	80035ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3720      	adds	r7, #32
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	2000002c 	.word	0x2000002c

080036c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af02      	add	r7, sp, #8
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036d8:	d111      	bne.n	80036fe <SPI_EndRxTransaction+0x3a>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036e2:	d004      	beq.n	80036ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ec:	d107      	bne.n	80036fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003706:	d12a      	bne.n	800375e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003710:	d012      	beq.n	8003738 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	2180      	movs	r1, #128	; 0x80
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f7ff ff49 	bl	80035b4 <SPI_WaitFlagStateUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d02d      	beq.n	8003784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e026      	b.n	8003786 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2200      	movs	r2, #0
 8003740:	2101      	movs	r1, #1
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ff36 	bl	80035b4 <SPI_WaitFlagStateUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01a      	beq.n	8003784 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e013      	b.n	8003786 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2200      	movs	r2, #0
 8003766:	2101      	movs	r1, #1
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f7ff ff23 	bl	80035b4 <SPI_WaitFlagStateUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f043 0220 	orr.w	r2, r3, #32
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e000      	b.n	8003786 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <SPI_EndRxTxTransaction+0x7c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1b      	ldr	r2, [pc, #108]	; (8003810 <SPI_EndRxTxTransaction+0x80>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0d5b      	lsrs	r3, r3, #21
 80037a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ac:	fb02 f303 	mul.w	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037ba:	d112      	bne.n	80037e2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	2180      	movs	r1, #128	; 0x80
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff fef4 	bl	80035b4 <SPI_WaitFlagStateUntilTimeout>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f043 0220 	orr.w	r2, r3, #32
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e00f      	b.n	8003802 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f8:	2b80      	cmp	r3, #128	; 0x80
 80037fa:	d0f2      	beq.n	80037e2 <SPI_EndRxTxTransaction+0x52>
 80037fc:	e000      	b.n	8003800 <SPI_EndRxTxTransaction+0x70>
        break;
 80037fe:	bf00      	nop
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000002c 	.word	0x2000002c
 8003810:	165e9f81 	.word	0x165e9f81

08003814 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e034      	b.n	8003894 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7fc ff86 	bl	8000750 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3308      	adds	r3, #8
 800384c:	4619      	mov	r1, r3
 800384e:	4610      	mov	r0, r2
 8003850:	f000 fca6 	bl	80041a0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6818      	ldr	r0, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	461a      	mov	r2, r3
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	f000 fcf0 	bl	8004244 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6858      	ldr	r0, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	f000 fd25 	bl	80042c0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	6892      	ldr	r2, [r2, #8]
 800387e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	f041 0101 	orr.w	r1, r1, #1
 800388e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e041      	b.n	8003932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fe f9ce 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 fa96 	bl	8003e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d001      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e04e      	b.n	80039f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a23      	ldr	r2, [pc, #140]	; (8003a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d022      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d01d      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d018      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1e      	ldr	r2, [pc, #120]	; (8003a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d013      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1c      	ldr	r2, [pc, #112]	; (8003a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a1b      	ldr	r2, [pc, #108]	; (8003a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x80>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a18      	ldr	r2, [pc, #96]	; (8003a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d010      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	e007      	b.n	80039f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40010000 	.word	0x40010000
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40010400 	.word	0x40010400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40001800 	.word	0x40001800

08003a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d122      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d11b      	bne.n	8003a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0202 	mvn.w	r2, #2
 8003a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f9b5 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003a64:	e005      	b.n	8003a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f9a7 	bl	8003dba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 f9b8 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d122      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d11b      	bne.n	8003acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0204 	mvn.w	r2, #4
 8003a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f98b 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f97d 	bl	8003dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f98e 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0208 	mvn.w	r2, #8
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2204      	movs	r2, #4
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f961 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f953 	bl	8003dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f964 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0210 	mvn.w	r2, #16
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f937 	bl	8003dce <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f929 	bl	8003dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f93a 	bl	8003de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0201 	mvn.w	r2, #1
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd fe86 	bl	80018ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d10e      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d107      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fae0 	bl	800418c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b40      	cmp	r3, #64	; 0x40
 8003be6:	d107      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f8ff 	bl	8003df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d10e      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d107      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0220 	mvn.w	r2, #32
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 faaa 	bl	8004178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_TIM_ConfigClockSource+0x1c>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e0b4      	b.n	8003db2 <HAL_TIM_ConfigClockSource+0x186>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c80:	d03e      	beq.n	8003d00 <HAL_TIM_ConfigClockSource+0xd4>
 8003c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c86:	f200 8087 	bhi.w	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8e:	f000 8086 	beq.w	8003d9e <HAL_TIM_ConfigClockSource+0x172>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d87f      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b70      	cmp	r3, #112	; 0x70
 8003c9a:	d01a      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0xa6>
 8003c9c:	2b70      	cmp	r3, #112	; 0x70
 8003c9e:	d87b      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b60      	cmp	r3, #96	; 0x60
 8003ca2:	d050      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x11a>
 8003ca4:	2b60      	cmp	r3, #96	; 0x60
 8003ca6:	d877      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b50      	cmp	r3, #80	; 0x50
 8003caa:	d03c      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0xfa>
 8003cac:	2b50      	cmp	r3, #80	; 0x50
 8003cae:	d873      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d058      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x13a>
 8003cb4:	2b40      	cmp	r3, #64	; 0x40
 8003cb6:	d86f      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d064      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x15a>
 8003cbc:	2b30      	cmp	r3, #48	; 0x30
 8003cbe:	d86b      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d060      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x15a>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d867      	bhi.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05c      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d05a      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd0:	e062      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6818      	ldr	r0, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	6899      	ldr	r1, [r3, #8]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f000 f9ad 	bl	8004040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	609a      	str	r2, [r3, #8]
      break;
 8003cfe:	e04f      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	6899      	ldr	r1, [r3, #8]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f000 f996 	bl	8004040 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d22:	609a      	str	r2, [r3, #8]
      break;
 8003d24:	e03c      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	461a      	mov	r2, r3
 8003d34:	f000 f90a 	bl	8003f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2150      	movs	r1, #80	; 0x50
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 f963 	bl	800400a <TIM_ITRx_SetConfig>
      break;
 8003d44:	e02c      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f000 f929 	bl	8003faa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2160      	movs	r1, #96	; 0x60
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f953 	bl	800400a <TIM_ITRx_SetConfig>
      break;
 8003d64:	e01c      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6859      	ldr	r1, [r3, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f000 f8ea 	bl	8003f4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2140      	movs	r1, #64	; 0x40
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f943 	bl	800400a <TIM_ITRx_SetConfig>
      break;
 8003d84:	e00c      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4610      	mov	r0, r2
 8003d92:	f000 f93a 	bl	800400a <TIM_ITRx_SetConfig>
      break;
 8003d96:	e003      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9c:	e000      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
	...

08003e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a40      	ldr	r2, [pc, #256]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d013      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2a:	d00f      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	; (8003f24 <TIM_Base_SetConfig+0x118>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00b      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <TIM_Base_SetConfig+0x11c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d007      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3b      	ldr	r2, [pc, #236]	; (8003f2c <TIM_Base_SetConfig+0x120>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d003      	beq.n	8003e4c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3a      	ldr	r2, [pc, #232]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d108      	bne.n	8003e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2f      	ldr	r2, [pc, #188]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6c:	d027      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	; (8003f24 <TIM_Base_SetConfig+0x118>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d023      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2b      	ldr	r2, [pc, #172]	; (8003f28 <TIM_Base_SetConfig+0x11c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <TIM_Base_SetConfig+0x120>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a29      	ldr	r2, [pc, #164]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d017      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a28      	ldr	r2, [pc, #160]	; (8003f34 <TIM_Base_SetConfig+0x128>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a27      	ldr	r2, [pc, #156]	; (8003f38 <TIM_Base_SetConfig+0x12c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00f      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	; (8003f3c <TIM_Base_SetConfig+0x130>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00b      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a25      	ldr	r2, [pc, #148]	; (8003f40 <TIM_Base_SetConfig+0x134>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <TIM_Base_SetConfig+0x138>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d003      	beq.n	8003ebe <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <TIM_Base_SetConfig+0x13c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d108      	bne.n	8003ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a0a      	ldr	r2, [pc, #40]	; (8003f20 <TIM_Base_SetConfig+0x114>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d003      	beq.n	8003f04 <TIM_Base_SetConfig+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0c      	ldr	r2, [pc, #48]	; (8003f30 <TIM_Base_SetConfig+0x124>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d103      	bne.n	8003f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	615a      	str	r2, [r3, #20]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40010400 	.word	0x40010400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800
 8003f40:	40001800 	.word	0x40001800
 8003f44:	40001c00 	.word	0x40001c00
 8003f48:	40002000 	.word	0x40002000

08003f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f023 030a 	bic.w	r3, r3, #10
 8003f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b087      	sub	sp, #28
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0210 	bic.w	r2, r3, #16
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	031b      	lsls	r3, r3, #12
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	f043 0307 	orr.w	r3, r3, #7
 800402c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	021a      	lsls	r2, r3, #8
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	431a      	orrs	r2, r3
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4313      	orrs	r3, r2
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e05a      	b.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a21      	ldr	r2, [pc, #132]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d022      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d01d      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d018      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a1b      	ldr	r2, [pc, #108]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1a      	ldr	r2, [pc, #104]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00e      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d009      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a15      	ldr	r2, [pc, #84]	; (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d10c      	bne.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	4313      	orrs	r3, r2
 8004132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40010000 	.word	0x40010000
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40010400 	.word	0x40010400
 8004170:	40014000 	.word	0x40014000
 8004174:	40001800 	.word	0x40001800

08004178 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b8:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4b20      	ldr	r3, [pc, #128]	; (8004240 <FSMC_NORSRAM_Init+0xa0>)
 80041be:	4013      	ands	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80041ca:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80041d0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80041d6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80041dc:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80041e2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80041e8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80041ee:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80041f4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80041fa:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004200:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8004206:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800420c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b08      	cmp	r3, #8
 800421a:	d103      	bne.n	8004224 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004222:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	fff00080 	.word	0xfff00080

08004244 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004266:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004272:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800427a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004282:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	3b01      	subs	r3, #1
 800428a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800428c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	3b02      	subs	r3, #2
 8004294:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004296:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800429c:	4313      	orrs	r3, r2
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d8:	d122      	bne.n	8004320 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042f6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80042fe:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8004306:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800430c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	4313      	orrs	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800431e:	e005      	b.n	800432c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	371c      	adds	r7, #28
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	cff00000 	.word	0xcff00000

08004340 <memset>:
 8004340:	4402      	add	r2, r0
 8004342:	4603      	mov	r3, r0
 8004344:	4293      	cmp	r3, r2
 8004346:	d100      	bne.n	800434a <memset+0xa>
 8004348:	4770      	bx	lr
 800434a:	f803 1b01 	strb.w	r1, [r3], #1
 800434e:	e7f9      	b.n	8004344 <memset+0x4>

08004350 <__libc_init_array>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	4d0d      	ldr	r5, [pc, #52]	; (8004388 <__libc_init_array+0x38>)
 8004354:	4c0d      	ldr	r4, [pc, #52]	; (800438c <__libc_init_array+0x3c>)
 8004356:	1b64      	subs	r4, r4, r5
 8004358:	10a4      	asrs	r4, r4, #2
 800435a:	2600      	movs	r6, #0
 800435c:	42a6      	cmp	r6, r4
 800435e:	d109      	bne.n	8004374 <__libc_init_array+0x24>
 8004360:	4d0b      	ldr	r5, [pc, #44]	; (8004390 <__libc_init_array+0x40>)
 8004362:	4c0c      	ldr	r4, [pc, #48]	; (8004394 <__libc_init_array+0x44>)
 8004364:	f000 f818 	bl	8004398 <_init>
 8004368:	1b64      	subs	r4, r4, r5
 800436a:	10a4      	asrs	r4, r4, #2
 800436c:	2600      	movs	r6, #0
 800436e:	42a6      	cmp	r6, r4
 8004370:	d105      	bne.n	800437e <__libc_init_array+0x2e>
 8004372:	bd70      	pop	{r4, r5, r6, pc}
 8004374:	f855 3b04 	ldr.w	r3, [r5], #4
 8004378:	4798      	blx	r3
 800437a:	3601      	adds	r6, #1
 800437c:	e7ee      	b.n	800435c <__libc_init_array+0xc>
 800437e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004382:	4798      	blx	r3
 8004384:	3601      	adds	r6, #1
 8004386:	e7f2      	b.n	800436e <__libc_init_array+0x1e>
 8004388:	08069a3c 	.word	0x08069a3c
 800438c:	08069a3c 	.word	0x08069a3c
 8004390:	08069a3c 	.word	0x08069a3c
 8004394:	08069a40 	.word	0x08069a40

08004398 <_init>:
 8004398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439a:	bf00      	nop
 800439c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439e:	bc08      	pop	{r3}
 80043a0:	469e      	mov	lr, r3
 80043a2:	4770      	bx	lr

080043a4 <_fini>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	bf00      	nop
 80043a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043aa:	bc08      	pop	{r3}
 80043ac:	469e      	mov	lr, r3
 80043ae:	4770      	bx	lr
