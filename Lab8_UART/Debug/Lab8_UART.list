
Lab8_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006794  08006794  00016794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067fc  080067fc  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006804  08006804  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006808  08006808  00016808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800680c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000003f0  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   000170d9  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c1f  00000000  00000000  000371b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001510  00000000  00000000  0003add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001064  00000000  00000000  0003c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002439c  00000000  00000000  0003d344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001cc32  00000000  00000000  000616e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2bde  00000000  00000000  0007e312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005bd4  00000000  00000000  00150ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00156ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800677c 	.word	0x0800677c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	0800677c 	.word	0x0800677c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	2108      	movs	r1, #8
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <button_init+0x14>)
 8000576:	f001 fe0b 	bl	8002190 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020c00 	.word	0x40020c00

08000584 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800058a:	2200      	movs	r2, #0
 800058c:	2108      	movs	r1, #8
 800058e:	482f      	ldr	r0, [pc, #188]	; (800064c <button_scan+0xc8>)
 8000590:	f001 fdfe 	bl	8002190 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	2108      	movs	r1, #8
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <button_scan+0xc8>)
 800059a:	f001 fdf9 	bl	8002190 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 800059e:	230a      	movs	r3, #10
 80005a0:	2202      	movs	r2, #2
 80005a2:	492b      	ldr	r1, [pc, #172]	; (8000650 <button_scan+0xcc>)
 80005a4:	482b      	ldr	r0, [pc, #172]	; (8000654 <button_scan+0xd0>)
 80005a6:	f003 fa58 	bl	8003a5a <HAL_SPI_Receive>

	int button_index = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 80005ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005b2:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e03f      	b.n	800063a <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db06      	blt.n	80005ce <button_scan+0x4a>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dc03      	bgt.n	80005ce <button_scan+0x4a>
			button_index = i + 4;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3304      	adds	r3, #4
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e018      	b.n	8000600 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	dd07      	ble.n	80005e4 <button_scan+0x60>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	dc04      	bgt.n	80005e4 <button_scan+0x60>
			button_index = 7 - i;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f1c3 0307 	rsb	r3, r3, #7
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	e00d      	b.n	8000600 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	dd06      	ble.n	80005f8 <button_scan+0x74>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	dc03      	bgt.n	80005f8 <button_scan+0x74>
			button_index = i + 4;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3304      	adds	r3, #4
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e003      	b.n	8000600 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f1c3 0317 	rsb	r3, r3, #23
 80005fe:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000600:	4b13      	ldr	r3, [pc, #76]	; (8000650 <button_scan+0xcc>)
 8000602:	881a      	ldrh	r2, [r3, #0]
 8000604:	897b      	ldrh	r3, [r7, #10]
 8000606:	4013      	ands	r3, r2
 8000608:	b29b      	uxth	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <button_scan+0x96>
			button_count[button_index] = 0;
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <button_scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2100      	movs	r1, #0
 8000614:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000618:	e009      	b.n	800062e <button_scan+0xaa>
		else
			button_count[button_index]++;
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <button_scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	3301      	adds	r3, #1
 8000624:	b299      	uxth	r1, r3
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <button_scan+0xd4>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 800062e:	897b      	ldrh	r3, [r7, #10]
 8000630:	085b      	lsrs	r3, r3, #1
 8000632:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3301      	adds	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	ddbc      	ble.n	80005ba <button_scan+0x36>
	}
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40020c00 	.word	0x40020c00
 8000650:	200000a0 	.word	0x200000a0
 8000654:	20000170 	.word	0x20000170
 8000658:	20000080 	.word	0x20000080

0800065c <ds3231_read_time>:
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT,
			ds3231_buffer, 7, 10);

}

void ds3231_read_time() {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT,
 8000662:	230a      	movs	r3, #10
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	2307      	movs	r3, #7
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <ds3231_read_time+0xa4>)
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2301      	movs	r3, #1
 8000670:	2200      	movs	r2, #0
 8000672:	21d0      	movs	r1, #208	; 0xd0
 8000674:	4823      	ldr	r0, [pc, #140]	; (8000704 <ds3231_read_time+0xa8>)
 8000676:	f001 fee9 	bl	800244c <HAL_I2C_Mem_Read>
			ds3231_buffer, 7, 10);

	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <ds3231_read_time+0xa4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	4618      	mov	r0, r3
 8000680:	f001 f96c 	bl	800195c <BCD2DEC>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <ds3231_read_time+0xac>)
 800068a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <ds3231_read_time+0xa4>)
 800068e:	785b      	ldrb	r3, [r3, #1]
 8000690:	4618      	mov	r0, r3
 8000692:	f001 f963 	bl	800195c <BCD2DEC>
 8000696:	4603      	mov	r3, r0
 8000698:	461a      	mov	r2, r3
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <ds3231_read_time+0xb0>)
 800069c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <ds3231_read_time+0xa4>)
 80006a0:	789b      	ldrb	r3, [r3, #2]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f95a 	bl	800195c <BCD2DEC>
 80006a8:	4603      	mov	r3, r0
 80006aa:	461a      	mov	r2, r3
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <ds3231_read_time+0xb4>)
 80006ae:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <ds3231_read_time+0xa4>)
 80006b2:	78db      	ldrb	r3, [r3, #3]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 f951 	bl	800195c <BCD2DEC>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <ds3231_read_time+0xb8>)
 80006c0:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <ds3231_read_time+0xa4>)
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f948 	bl	800195c <BCD2DEC>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <ds3231_read_time+0xbc>)
 80006d2:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <ds3231_read_time+0xa4>)
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f93f 	bl	800195c <BCD2DEC>
 80006de:	4603      	mov	r3, r0
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <ds3231_read_time+0xc0>)
 80006e4:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <ds3231_read_time+0xa4>)
 80006e8:	799b      	ldrb	r3, [r3, #6]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f936 	bl	800195c <BCD2DEC>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <ds3231_read_time+0xc4>)
 80006f6:	701a      	strb	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000a4 	.word	0x200000a4
 8000704:	20000108 	.word	0x20000108
 8000708:	200000ad 	.word	0x200000ad
 800070c:	200000ac 	.word	0x200000ac
 8000710:	200000ab 	.word	0x200000ab
 8000714:	200000af 	.word	0x200000af
 8000718:	200000ae 	.word	0x200000ae
 800071c:	200000b0 	.word	0x200000b0
 8000720:	200000b1 	.word	0x200000b1

08000724 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08e      	sub	sp, #56	; 0x38
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000750:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <MX_FSMC_Init+0xec>)
 8000752:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000756:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_FSMC_Init+0xec>)
 800075a:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <MX_FSMC_Init+0xf0>)
 800075c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800075e:	4b2c      	ldr	r3, [pc, #176]	; (8000810 <MX_FSMC_Init+0xec>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000764:	4b2a      	ldr	r3, [pc, #168]	; (8000810 <MX_FSMC_Init+0xec>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_FSMC_Init+0xec>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_FSMC_Init+0xec>)
 8000772:	2210      	movs	r2, #16
 8000774:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <MX_FSMC_Init+0xec>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <MX_FSMC_Init+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_FSMC_Init+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_FSMC_Init+0xec>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <MX_FSMC_Init+0xec>)
 8000790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000796:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <MX_FSMC_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <MX_FSMC_Init+0xec>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	; (8000810 <MX_FSMC_Init+0xec>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MX_FSMC_Init+0xec>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_FSMC_Init+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007b6:	230f      	movs	r3, #15
 80007b8:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007ba:	230f      	movs	r3, #15
 80007bc:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007be:	233c      	movs	r3, #60	; 0x3c
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007c6:	2310      	movs	r3, #16
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007ca:	2311      	movs	r3, #17
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007ce:	2300      	movs	r3, #0
 80007d0:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007d2:	2308      	movs	r3, #8
 80007d4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007d6:	230f      	movs	r3, #15
 80007d8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007da:	2309      	movs	r3, #9
 80007dc:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80007e2:	2310      	movs	r3, #16
 80007e4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80007e6:	2311      	movs	r3, #17
 80007e8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80007ee:	463a      	mov	r2, r7
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <MX_FSMC_Init+0xec>)
 80007f8:	f003 fd12 	bl	8004220 <HAL_SRAM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000802:	f000 fceb 	bl	80011dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000806:	bf00      	nop
 8000808:	3738      	adds	r7, #56	; 0x38
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000b4 	.word	0x200000b4
 8000814:	a0000104 	.word	0xa0000104

08000818 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_FSMC_MspInit+0x88>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d131      	bne.n	8000898 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_FSMC_MspInit+0x88>)
 8000836:	2201      	movs	r2, #1
 8000838:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <HAL_FSMC_MspInit+0x8c>)
 8000840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_FSMC_MspInit+0x8c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6393      	str	r3, [r2, #56]	; 0x38
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_FSMC_MspInit+0x8c>)
 800084c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000856:	f64f 7388 	movw	r3, #65416	; 0xff88
 800085a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000868:	230c      	movs	r3, #12
 800086a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	4619      	mov	r1, r3
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <HAL_FSMC_MspInit+0x90>)
 8000872:	f001 faf1 	bl	8001e58 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000876:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800087a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087c:	2302      	movs	r3, #2
 800087e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000888:	230c      	movs	r3, #12
 800088a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <HAL_FSMC_MspInit+0x94>)
 8000892:	f001 fae1 	bl	8001e58 <HAL_GPIO_Init>
 8000896:	e000      	b.n	800089a <HAL_FSMC_MspInit+0x82>
    return;
 8000898:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800089a:	3718      	adds	r7, #24
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000104 	.word	0x20000104
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40020c00 	.word	0x40020c00

080008b0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008b8:	f7ff ffae 	bl	8000818 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b6f      	ldr	r3, [pc, #444]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a6e      	ldr	r2, [pc, #440]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b6c      	ldr	r3, [pc, #432]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b68      	ldr	r3, [pc, #416]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a67      	ldr	r2, [pc, #412]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b61      	ldr	r3, [pc, #388]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a60      	ldr	r2, [pc, #384]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b5a      	ldr	r3, [pc, #360]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a59      	ldr	r2, [pc, #356]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b53      	ldr	r3, [pc, #332]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a52      	ldr	r2, [pc, #328]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b50      	ldr	r3, [pc, #320]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b4c      	ldr	r3, [pc, #304]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a4b      	ldr	r2, [pc, #300]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b45      	ldr	r3, [pc, #276]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a44      	ldr	r2, [pc, #272]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b42      	ldr	r3, [pc, #264]	; (8000a9c <MX_GPIO_Init+0x1d8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2170      	movs	r1, #112	; 0x70
 80009a2:	483f      	ldr	r0, [pc, #252]	; (8000aa0 <MX_GPIO_Init+0x1dc>)
 80009a4:	f001 fbf4 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	483d      	ldr	r0, [pc, #244]	; (8000aa4 <MX_GPIO_Init+0x1e0>)
 80009b0:	f001 fbee 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <MX_GPIO_Init+0x1e4>)
 80009ba:	f001 fbe9 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c4:	4839      	ldr	r0, [pc, #228]	; (8000aac <MX_GPIO_Init+0x1e8>)
 80009c6:	f001 fbe3 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x1ec>)
 80009d0:	f001 fbde 	bl	8002190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009d4:	2370      	movs	r3, #112	; 0x70
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	482d      	ldr	r0, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x1dc>)
 80009ec:	f001 fa34 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4826      	ldr	r0, [pc, #152]	; (8000aa4 <MX_GPIO_Init+0x1e0>)
 8000a0a:	f001 fa25 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a0e:	23c0      	movs	r3, #192	; 0xc0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4822      	ldr	r0, [pc, #136]	; (8000aac <MX_GPIO_Init+0x1e8>)
 8000a22:	f001 fa19 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a26:	2330      	movs	r3, #48	; 0x30
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <MX_GPIO_Init+0x1e0>)
 8000a3a:	f001 fa0d 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0x1e4>)
 8000a56:	f001 f9ff 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480e      	ldr	r0, [pc, #56]	; (8000aac <MX_GPIO_Init+0x1e8>)
 8000a74:	f001 f9f0 	bl	8001e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a78:	2308      	movs	r3, #8
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <MX_GPIO_Init+0x1ec>)
 8000a90:	f001 f9e2 	bl	8001e58 <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020c00 	.word	0x40020c00

08000ab4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f001 fb67 	bl	80021c4 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 fb6e 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000108 	.word	0x20000108
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_I2C_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12b      	bne.n	8000b8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b4e:	23c0      	movs	r3, #192	; 0xc0
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <HAL_I2C_MspInit+0x8c>)
 8000b6a:	f001 f975 	bl	8001e58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_I2C_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <LCD_WR_REG+0x1c>)
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	8013      	strh	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	600ffffe 	.word	0x600ffffe

08000bc0 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <LCD_WR_DATA+0x1c>)
 8000bcc:	88fb      	ldrh	r3, [r7, #6]
 8000bce:	8053      	strh	r3, [r2, #2]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	600ffffe 	.word	0x600ffffe

08000be0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <LCD_RD_DATA+0x20>)
 8000be8:	885b      	ldrh	r3, [r3, #2]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	b29b      	uxth	r3, r3
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	600ffffe 	.word	0x600ffffe

08000c04 <lcd_set_direction>:
			k++;
		}
	}
}

void lcd_set_direction(uint8_t dir) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	091b      	lsrs	r3, r3, #4
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d007      	beq.n	8000c2e <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <lcd_set_direction+0x44>)
 8000c20:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c24:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <lcd_set_direction+0x44>)
 8000c28:	22f0      	movs	r2, #240	; 0xf0
 8000c2a:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8000c2c:	e006      	b.n	8000c3c <lcd_set_direction+0x38>
		lcddev.width = 240;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <lcd_set_direction+0x44>)
 8000c30:	22f0      	movs	r2, #240	; 0xf0
 8000c32:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <lcd_set_direction+0x44>)
 8000c36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000c3a:	805a      	strh	r2, [r3, #2]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	2000015c 	.word	0x2000015c

08000c4c <lcd_init>:

void lcd_init(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c56:	48aa      	ldr	r0, [pc, #680]	; (8000f00 <lcd_init+0x2b4>)
 8000c58:	f001 fa9a 	bl	8002190 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f000 ff32 	bl	8001ac8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6a:	48a5      	ldr	r0, [pc, #660]	; (8000f00 <lcd_init+0x2b4>)
 8000c6c:	f001 fa90 	bl	8002190 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c74:	f000 ff28 	bl	8001ac8 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff ffc3 	bl	8000c04 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8000c7e:	20d3      	movs	r0, #211	; 0xd3
 8000c80:	f7ff ff8e 	bl	8000ba0 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8000c84:	f7ff ffac 	bl	8000be0 <LCD_RD_DATA>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b9d      	ldr	r3, [pc, #628]	; (8000f04 <lcd_init+0x2b8>)
 8000c8e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000c90:	f7ff ffa6 	bl	8000be0 <LCD_RD_DATA>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b9a      	ldr	r3, [pc, #616]	; (8000f04 <lcd_init+0x2b8>)
 8000c9a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000c9c:	f7ff ffa0 	bl	8000be0 <LCD_RD_DATA>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b97      	ldr	r3, [pc, #604]	; (8000f04 <lcd_init+0x2b8>)
 8000ca6:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8000ca8:	4b96      	ldr	r3, [pc, #600]	; (8000f04 <lcd_init+0x2b8>)
 8000caa:	889b      	ldrh	r3, [r3, #4]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	4b94      	ldr	r3, [pc, #592]	; (8000f04 <lcd_init+0x2b8>)
 8000cb2:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8000cb4:	f7ff ff94 	bl	8000be0 <LCD_RD_DATA>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b91      	ldr	r3, [pc, #580]	; (8000f04 <lcd_init+0x2b8>)
 8000cbe:	889b      	ldrh	r3, [r3, #4]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b8f      	ldr	r3, [pc, #572]	; (8000f04 <lcd_init+0x2b8>)
 8000cc6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000cc8:	20cf      	movs	r0, #207	; 0xcf
 8000cca:	f7ff ff69 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff ff76 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000cd4:	20c1      	movs	r0, #193	; 0xc1
 8000cd6:	f7ff ff73 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000cda:	2030      	movs	r0, #48	; 0x30
 8000cdc:	f7ff ff70 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000ce0:	20ed      	movs	r0, #237	; 0xed
 8000ce2:	f7ff ff5d 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000ce6:	2064      	movs	r0, #100	; 0x64
 8000ce8:	f7ff ff6a 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000cec:	2003      	movs	r0, #3
 8000cee:	f7ff ff67 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000cf2:	2012      	movs	r0, #18
 8000cf4:	f7ff ff64 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000cf8:	2081      	movs	r0, #129	; 0x81
 8000cfa:	f7ff ff61 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000cfe:	20e8      	movs	r0, #232	; 0xe8
 8000d00:	f7ff ff4e 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000d04:	2085      	movs	r0, #133	; 0x85
 8000d06:	f7ff ff5b 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000d0a:	2010      	movs	r0, #16
 8000d0c:	f7ff ff58 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000d10:	207a      	movs	r0, #122	; 0x7a
 8000d12:	f7ff ff55 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000d16:	20cb      	movs	r0, #203	; 0xcb
 8000d18:	f7ff ff42 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000d1c:	2039      	movs	r0, #57	; 0x39
 8000d1e:	f7ff ff4f 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000d22:	202c      	movs	r0, #44	; 0x2c
 8000d24:	f7ff ff4c 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ff49 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000d2e:	2034      	movs	r0, #52	; 0x34
 8000d30:	f7ff ff46 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff ff43 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000d3a:	20f7      	movs	r0, #247	; 0xf7
 8000d3c:	f7ff ff30 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000d40:	2020      	movs	r0, #32
 8000d42:	f7ff ff3d 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000d46:	20ea      	movs	r0, #234	; 0xea
 8000d48:	f7ff ff2a 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff37 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff ff34 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000d58:	20c0      	movs	r0, #192	; 0xc0
 8000d5a:	f7ff ff21 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000d5e:	201b      	movs	r0, #27
 8000d60:	f7ff ff2e 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000d64:	20c1      	movs	r0, #193	; 0xc1
 8000d66:	f7ff ff1b 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f7ff ff28 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000d70:	20c5      	movs	r0, #197	; 0xc5
 8000d72:	f7ff ff15 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000d76:	2030      	movs	r0, #48	; 0x30
 8000d78:	f7ff ff22 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000d7c:	2030      	movs	r0, #48	; 0x30
 8000d7e:	f7ff ff1f 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000d82:	20c7      	movs	r0, #199	; 0xc7
 8000d84:	f7ff ff0c 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000d88:	20b7      	movs	r0, #183	; 0xb7
 8000d8a:	f7ff ff19 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000d8e:	2036      	movs	r0, #54	; 0x36
 8000d90:	f7ff ff06 	bl	8000ba0 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8000d94:	2008      	movs	r0, #8
 8000d96:	f7ff ff13 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000d9a:	203a      	movs	r0, #58	; 0x3a
 8000d9c:	f7ff ff00 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000da0:	2055      	movs	r0, #85	; 0x55
 8000da2:	f7ff ff0d 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000da6:	20b1      	movs	r0, #177	; 0xb1
 8000da8:	f7ff fefa 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff07 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000db2:	201a      	movs	r0, #26
 8000db4:	f7ff ff04 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000db8:	20b6      	movs	r0, #182	; 0xb6
 8000dba:	f7ff fef1 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f7ff fefe 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000dc4:	20a2      	movs	r0, #162	; 0xa2
 8000dc6:	f7ff fefb 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000dca:	20f2      	movs	r0, #242	; 0xf2
 8000dcc:	f7ff fee8 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f7ff fef5 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000dd6:	2026      	movs	r0, #38	; 0x26
 8000dd8:	f7ff fee2 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f7ff feef 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000de2:	20e0      	movs	r0, #224	; 0xe0
 8000de4:	f7ff fedc 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000de8:	200f      	movs	r0, #15
 8000dea:	f7ff fee9 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000dee:	202a      	movs	r0, #42	; 0x2a
 8000df0:	f7ff fee6 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000df4:	2028      	movs	r0, #40	; 0x28
 8000df6:	f7ff fee3 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000dfa:	2008      	movs	r0, #8
 8000dfc:	f7ff fee0 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000e00:	200e      	movs	r0, #14
 8000e02:	f7ff fedd 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000e06:	2008      	movs	r0, #8
 8000e08:	f7ff feda 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000e0c:	2054      	movs	r0, #84	; 0x54
 8000e0e:	f7ff fed7 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000e12:	20a9      	movs	r0, #169	; 0xa9
 8000e14:	f7ff fed4 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000e18:	2043      	movs	r0, #67	; 0x43
 8000e1a:	f7ff fed1 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000e1e:	200a      	movs	r0, #10
 8000e20:	f7ff fece 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e24:	200f      	movs	r0, #15
 8000e26:	f7ff fecb 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fec8 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fec5 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fec2 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff febf 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000e42:	20e1      	movs	r0, #225	; 0xe1
 8000e44:	f7ff feac 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff feb9 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000e4e:	2015      	movs	r0, #21
 8000e50:	f7ff feb6 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000e54:	2017      	movs	r0, #23
 8000e56:	f7ff feb3 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000e5a:	2007      	movs	r0, #7
 8000e5c:	f7ff feb0 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000e60:	2011      	movs	r0, #17
 8000e62:	f7ff fead 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000e66:	2006      	movs	r0, #6
 8000e68:	f7ff feaa 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000e6c:	202b      	movs	r0, #43	; 0x2b
 8000e6e:	f7ff fea7 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000e72:	2056      	movs	r0, #86	; 0x56
 8000e74:	f7ff fea4 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000e78:	203c      	movs	r0, #60	; 0x3c
 8000e7a:	f7ff fea1 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000e7e:	2005      	movs	r0, #5
 8000e80:	f7ff fe9e 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000e84:	2010      	movs	r0, #16
 8000e86:	f7ff fe9b 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f7ff fe98 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000e90:	203f      	movs	r0, #63	; 0x3f
 8000e92:	f7ff fe95 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000e96:	203f      	movs	r0, #63	; 0x3f
 8000e98:	f7ff fe92 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000e9c:	200f      	movs	r0, #15
 8000e9e:	f7ff fe8f 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000ea2:	202b      	movs	r0, #43	; 0x2b
 8000ea4:	f7ff fe7c 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ea8:	2000      	movs	r0, #0
 8000eaa:	f7ff fe89 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fe86 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff fe83 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000eba:	203f      	movs	r0, #63	; 0x3f
 8000ebc:	f7ff fe80 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000ec0:	202a      	movs	r0, #42	; 0x2a
 8000ec2:	f7ff fe6d 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fe7a 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fe77 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fe74 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000ed8:	20ef      	movs	r0, #239	; 0xef
 8000eda:	f7ff fe71 	bl	8000bc0 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8000ede:	2011      	movs	r0, #17
 8000ee0:	f7ff fe5e 	bl	8000ba0 <LCD_WR_REG>
	HAL_Delay(120);
 8000ee4:	2078      	movs	r0, #120	; 0x78
 8000ee6:	f000 fdef 	bl	8001ac8 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8000eea:	2029      	movs	r0, #41	; 0x29
 8000eec:	f7ff fe58 	bl	8000ba0 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef6:	4804      	ldr	r0, [pc, #16]	; (8000f08 <lcd_init+0x2bc>)
 8000ef8:	f001 f94a 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40020800 	.word	0x40020800
 8000f04:	2000015c 	.word	0x2000015c
 8000f08:	40020000 	.word	0x40020000

08000f0c <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2140      	movs	r1, #64	; 0x40
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <led_7seg_init+0x14>)
 8000f16:	f001 f93b 	bl	8002190 <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021800 	.word	0x40021800

08000f24 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8000f28:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <led_7seg_display+0x104>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <led_7seg_display+0x104>)
 8000f32:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8000f34:	4b3d      	ldr	r3, [pc, #244]	; (800102c <led_7seg_display+0x108>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <led_7seg_display+0x10c>)
 8000f3c:	5c9b      	ldrb	r3, [r3, r2]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <led_7seg_display+0x104>)
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	b21b      	sxth	r3, r3
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b36      	ldr	r3, [pc, #216]	; (8001028 <led_7seg_display+0x104>)
 8000f50:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 8000f52:	4b36      	ldr	r3, [pc, #216]	; (800102c <led_7seg_display+0x108>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d846      	bhi.n	8000fe8 <led_7seg_display+0xc4>
 8000f5a:	a201      	add	r2, pc, #4	; (adr r2, 8000f60 <led_7seg_display+0x3c>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000f71 	.word	0x08000f71
 8000f64:	08000f8f 	.word	0x08000f8f
 8000f68:	08000fad 	.word	0x08000fad
 8000f6c:	08000fcb 	.word	0x08000fcb
	case 0:
		spi_buffer |= 0x00b0;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <led_7seg_display+0x104>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <led_7seg_display+0x104>)
 8000f7c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <led_7seg_display+0x104>)
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <led_7seg_display+0x104>)
 8000f8a:	801a      	strh	r2, [r3, #0]
		break;
 8000f8c:	e02d      	b.n	8000fea <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8000f8e:	4b26      	ldr	r3, [pc, #152]	; (8001028 <led_7seg_display+0x104>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <led_7seg_display+0x104>)
 8000f9a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <led_7seg_display+0x104>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	f023 0320 	bic.w	r3, r3, #32
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4b20      	ldr	r3, [pc, #128]	; (8001028 <led_7seg_display+0x104>)
 8000fa8:	801a      	strh	r2, [r3, #0]
		break;
 8000faa:	e01e      	b.n	8000fea <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <led_7seg_display+0x104>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <led_7seg_display+0x104>)
 8000fb8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <led_7seg_display+0x104>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	f023 0310 	bic.w	r3, r3, #16
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <led_7seg_display+0x104>)
 8000fc6:	801a      	strh	r2, [r3, #0]
		break;
 8000fc8:	e00f      	b.n	8000fea <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <led_7seg_display+0x104>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <led_7seg_display+0x104>)
 8000fd6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <led_7seg_display+0x104>)
 8000fda:	881b      	ldrh	r3, [r3, #0]
 8000fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <led_7seg_display+0x104>)
 8000fe4:	801a      	strh	r2, [r3, #0]
		break;
 8000fe6:	e000      	b.n	8000fea <led_7seg_display+0xc6>
	default:
		break;
 8000fe8:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <led_7seg_display+0x108>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	425a      	negs	r2, r3
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	f002 0203 	and.w	r2, r2, #3
 8000ffa:	bf58      	it	pl
 8000ffc:	4253      	negpl	r3, r2
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <led_7seg_display+0x108>)
 8001002:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2140      	movs	r1, #64	; 0x40
 8001008:	480a      	ldr	r0, [pc, #40]	; (8001034 <led_7seg_display+0x110>)
 800100a:	f001 f8c1 	bl	8002190 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 800100e:	2301      	movs	r3, #1
 8001010:	2202      	movs	r2, #2
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <led_7seg_display+0x104>)
 8001014:	4808      	ldr	r0, [pc, #32]	; (8001038 <led_7seg_display+0x114>)
 8001016:	f002 fbe4 	bl	80037e2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800101a:	2201      	movs	r2, #1
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <led_7seg_display+0x110>)
 8001020:	f001 f8b6 	bl	8002190 <HAL_GPIO_WritePin>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000004 	.word	0x20000004
 800102c:	20000162 	.word	0x20000162
 8001030:	20000000 	.word	0x20000000
 8001034:	40021800 	.word	0x40021800
 8001038:	20000170 	.word	0x20000170

0800103c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001040:	f000 fcd0 	bl	80019e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001044:	f000 f822 	bl	800108c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001048:	f7ff fc3c 	bl	80008c4 <MX_GPIO_Init>
	MX_TIM2_Init();
 800104c:	f000 fa74 	bl	8001538 <MX_TIM2_Init>
	MX_SPI1_Init();
 8001050:	f000 f93c 	bl	80012cc <MX_SPI1_Init>
	MX_FSMC_Init();
 8001054:	f7ff fb66 	bl	8000724 <MX_FSMC_Init>
	MX_I2C1_Init();
 8001058:	f7ff fd2c 	bl	8000ab4 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800105c:	f000 fc04 	bl	8001868 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 8001060:	f000 fab6 	bl	80015d0 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 8001064:	f000 f87c 	bl	8001160 <system_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		while (!timer2_flag)
 8001068:	bf00      	nop
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <main+0x4c>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0fb      	beq.n	800106a <main+0x2e>
			;
		timer2_flag = 0;
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <main+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	701a      	strb	r2, [r3, #0]
		button_scan();
 8001078:	f7ff fa84 	bl	8000584 <button_scan>
		ds3231_read_time();
 800107c:	f7ff faee 	bl	800065c <ds3231_read_time>
		testUart();
 8001080:	f000 f880 	bl	8001184 <testUart>
		while (!timer2_flag)
 8001084:	e7f0      	b.n	8001068 <main+0x2c>
 8001086:	bf00      	nop
 8001088:	20000164 	.word	0x20000164

0800108c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b094      	sub	sp, #80	; 0x50
 8001090:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2230      	movs	r2, #48	; 0x30
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 feea 	bl	8005e74 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <SystemClock_Config+0xcc>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <SystemClock_Config+0xcc>)
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010be:	6413      	str	r3, [r2, #64]	; 0x40
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemClock_Config+0xcc>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <SystemClock_Config+0xd0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a21      	ldr	r2, [pc, #132]	; (800115c <SystemClock_Config+0xd0>)
 80010d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <SystemClock_Config+0xd0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e8:	2302      	movs	r3, #2
 80010ea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010f0:	2310      	movs	r3, #16
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f4:	2302      	movs	r3, #2
 80010f6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f8:	2300      	movs	r3, #0
 80010fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80010fc:	2308      	movs	r3, #8
 80010fe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001100:	23a8      	movs	r3, #168	; 0xa8
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001104:	2302      	movs	r3, #2
 8001106:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001108:	2304      	movs	r3, #4
 800110a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fe45 	bl	8002da0 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x94>
		Error_Handler();
 800111c:	f000 f85e 	bl	80011dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001124:	2302      	movs	r3, #2
 8001126:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800112c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001130:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001136:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2105      	movs	r1, #5
 800113e:	4618      	mov	r0, r3
 8001140:	f002 f8a6 	bl	8003290 <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0xc2>
		Error_Handler();
 800114a:	f000 f847 	bl	80011dc <Error_Handler>
	}
}
 800114e:	bf00      	nop
 8001150:	3750      	adds	r7, #80	; 0x50
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	led_7seg_init();
 8001164:	f7ff fed2 	bl	8000f0c <led_7seg_init>
	button_init();
 8001168:	f7ff fa00 	bl	800056c <button_init>
	lcd_init();
 800116c:	f7ff fd6e 	bl	8000c4c <lcd_init>
	uart_init_rs232();
 8001170:	f000 fadc 	bl	800172c <uart_init_rs232>

	timer2_init();
 8001174:	f000 f838 	bl	80011e8 <timer2_init>
	timer2_set(50);
 8001178:	2032      	movs	r0, #50	; 0x32
 800117a:	f000 f83f 	bl	80011fc <timer2_set>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <testUart>:

void testUart() {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	if (button_count[12] == 1) {
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <testUart+0x40>)
 800118a:	8b1b      	ldrh	r3, [r3, #24]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d117      	bne.n	80011c0 <testUart+0x3c>
		uart_rs232_send_num(ds3231_hours);
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <testUart+0x44>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 faf1 	bl	800177c <uart_rs232_send_num>
		uart_rs232_send_string(":");
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <testUart+0x48>)
 800119c:	f000 fad4 	bl	8001748 <uart_rs232_send_string>
		uart_rs232_send_num(ds3231_min);
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <testUart+0x4c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fae9 	bl	800177c <uart_rs232_send_num>
		uart_rs232_send_string(":");
 80011aa:	4808      	ldr	r0, [pc, #32]	; (80011cc <testUart+0x48>)
 80011ac:	f000 facc 	bl	8001748 <uart_rs232_send_string>
		uart_rs232_send_num(ds3231_sec);
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <testUart+0x50>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fae1 	bl	800177c <uart_rs232_send_num>
		uart_rs232_send_string("\n");
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <testUart+0x54>)
 80011bc:	f000 fac4 	bl	8001748 <uart_rs232_send_string>
	}
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000080 	.word	0x20000080
 80011c8:	200000ab 	.word	0x200000ab
 80011cc:	08006794 	.word	0x08006794
 80011d0:	200000ac 	.word	0x200000ac
 80011d4:	200000ad 	.word	0x200000ad
 80011d8:	08006798 	.word	0x08006798

080011dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011e4:	e7fe      	b.n	80011e4 <Error_Handler+0x8>
	...

080011e8 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <timer2_init+0x10>)
 80011ee:	f003 f8ab 	bl	8004348 <HAL_TIM_Base_Start_IT>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001cc 	.word	0x200001cc

080011fc <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <timer2_set+0x2c>)
 800120a:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <timer2_set+0x2c>)
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <timer2_set+0x30>)
 8001212:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <timer2_set+0x34>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000168 	.word	0x20000168
 800122c:	20000166 	.word	0x20000166
 8001230:	20000164 	.word	0x20000164

08001234 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001244:	d114      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d010      	beq.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	3b01      	subs	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001258:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d106      	bne.n	8001270 <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001264:	2201      	movs	r2, #1
 8001266:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800126a:	881a      	ldrh	r2, [r3, #0]
 800126c:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800126e:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a11      	ldr	r2, [pc, #68]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d116      	bne.n	80012a8 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d010      	beq.n	80012a4 <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	3b01      	subs	r3, #1
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800128c:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800129e:	881a      	ldrh	r2, [r3, #0]
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80012a2:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 80012a4:	f7ff fe3e 	bl	8000f24 <led_7seg_display>
	}
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000166 	.word	0x20000166
 80012b4:	20000164 	.word	0x20000164
 80012b8:	20000168 	.word	0x20000168
 80012bc:	40000800 	.word	0x40000800
 80012c0:	2000016c 	.word	0x2000016c
 80012c4:	2000016a 	.word	0x2000016a
 80012c8:	2000016e 	.word	0x2000016e

080012cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_SPI1_Init+0x64>)
 80012d2:	4a18      	ldr	r2, [pc, #96]	; (8001334 <MX_SPI1_Init+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <MX_SPI1_Init+0x64>)
 80012d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_SPI1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_SPI1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_SPI1_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_SPI1_Init+0x64>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_SPI1_Init+0x64>)
 80012f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_SPI1_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_SPI1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_SPI1_Init+0x64>)
 8001318:	220a      	movs	r2, #10
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_SPI1_Init+0x64>)
 800131e:	f002 f9d7 	bl	80036d0 <HAL_SPI_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001328:	f7ff ff58 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000170 	.word	0x20000170
 8001334:	40013000 	.word	0x40013000

08001338 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_SPI_MspInit+0x84>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d12b      	bne.n	80013b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_SPI_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001392:	2338      	movs	r3, #56	; 0x38
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013a2:	2305      	movs	r3, #5
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_SPI_MspInit+0x8c>)
 80013ae:	f000 fd53 	bl	8001e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	; 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40013000 	.word	0x40013000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020400 	.word	0x40020400

080013c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_MspInit+0x4c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_MspInit+0x4c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_MspInit+0x4c>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_MspInit+0x4c>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 fb10 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <TIM2_IRQHandler+0x10>)
 8001472:	f002 ffd9 	bl	8004428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200001cc 	.word	0x200001cc

08001480 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <TIM4_IRQHandler+0x10>)
 8001486:	f002 ffcf 	bl	8004428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000214 	.word	0x20000214

08001494 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <USART1_IRQHandler+0x10>)
 800149a:	f003 fc97 	bl	8004dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200002c4 	.word	0x200002c4

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f004 fcd4 	bl	8005e84 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20020000 	.word	0x20020000
 8001508:	00000400 	.word	0x00000400
 800150c:	200001c8 	.word	0x200001c8
 8001510:	20000458 	.word	0x20000458

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_TIM2_Init+0x94>)
 8001556:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800155a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800155c:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <MX_TIM2_Init+0x94>)
 800155e:	f240 3247 	movw	r2, #839	; 0x347
 8001562:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_TIM2_Init+0x94>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800156a:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_TIM2_Init+0x94>)
 800156c:	2263      	movs	r2, #99	; 0x63
 800156e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <MX_TIM2_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_TIM2_Init+0x94>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800157c:	4813      	ldr	r0, [pc, #76]	; (80015cc <MX_TIM2_Init+0x94>)
 800157e:	f002 fe93 	bl	80042a8 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001588:	f7ff fe28 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800158c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001590:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <MX_TIM2_Init+0x94>)
 800159a:	f003 f84d 	bl	8004638 <HAL_TIM_ConfigClockSource>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015a4:	f7ff fe1a 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_TIM2_Init+0x94>)
 80015b6:	f003 fa69 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015c0:	f7ff fe0c 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	200001cc 	.word	0x200001cc

080015d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM4_Init+0x94>)
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <MX_TIM4_Init+0x98>)
 80015f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_TIM4_Init+0x94>)
 80015f4:	f240 3247 	movw	r2, #839	; 0x347
 80015f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM4_Init+0x94>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_TIM4_Init+0x94>)
 8001602:	2263      	movs	r2, #99	; 0x63
 8001604:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <MX_TIM4_Init+0x94>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_TIM4_Init+0x94>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001612:	4814      	ldr	r0, [pc, #80]	; (8001664 <MX_TIM4_Init+0x94>)
 8001614:	f002 fe48 	bl	80042a8 <HAL_TIM_Base_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800161e:	f7ff fddd 	bl	80011dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4619      	mov	r1, r3
 800162e:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_TIM4_Init+0x94>)
 8001630:	f003 f802 	bl	8004638 <HAL_TIM_ConfigClockSource>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800163a:	f7ff fdcf 	bl	80011dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_TIM4_Init+0x94>)
 800164c:	f003 fa1e 	bl	8004a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001656:	f7ff fdc1 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000214 	.word	0x20000214
 8001668:	40000800 	.word	0x40000800

0800166c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d116      	bne.n	80016ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <HAL_TIM_Base_MspInit+0x80>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a19      	ldr	r2, [pc, #100]	; (80016ec <HAL_TIM_Base_MspInit+0x80>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_TIM_Base_MspInit+0x80>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	201c      	movs	r0, #28
 80016a0:	f000 fb11 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a4:	201c      	movs	r0, #28
 80016a6:	f000 fb2a 	bl	8001cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80016aa:	e01a      	b.n	80016e2 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <HAL_TIM_Base_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d115      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_TIM_Base_MspInit+0x80>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a0b      	ldr	r2, [pc, #44]	; (80016ec <HAL_TIM_Base_MspInit+0x80>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_TIM_Base_MspInit+0x80>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	201e      	movs	r0, #30
 80016d8:	f000 faf5 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016dc:	201e      	movs	r0, #30
 80016de:	f000 fb0e 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40000800 	.word	0x40000800

080016f4 <mypow>:
/* Variables */
uint8_t receive_buffer1 = 0;
uint8_t msg[100];

/* Functions */
uint32_t mypow(uint8_t m, uint8_t n) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	460a      	mov	r2, r1
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4613      	mov	r3, r2
 8001702:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8001704:	2301      	movs	r3, #1
 8001706:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001708:	e004      	b.n	8001714 <mypow+0x20>
		result *= m;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	60fb      	str	r3, [r7, #12]
	while (n--)
 8001714:	79bb      	ldrb	r3, [r7, #6]
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	71ba      	strb	r2, [r7, #6]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f5      	bne.n	800170a <mypow+0x16>
	return result;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <uart_init_rs232>:

void uart_init_rs232() {
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001730:	2201      	movs	r2, #1
 8001732:	4903      	ldr	r1, [pc, #12]	; (8001740 <uart_init_rs232+0x14>)
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <uart_init_rs232+0x18>)
 8001736:	f003 fb18 	bl	8004d6a <HAL_UART_Receive_IT>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000025c 	.word	0x2000025c
 8001744:	200002c4 	.word	0x200002c4

08001748 <uart_rs232_send_string>:

void uart_rs232_send_string(uint8_t *str) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*) msg, sprintf((void*) msg, "%s", str),
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4907      	ldr	r1, [pc, #28]	; (8001770 <uart_rs232_send_string+0x28>)
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <uart_rs232_send_string+0x2c>)
 8001756:	f004 fb6d 	bl	8005e34 <siprintf>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	230a      	movs	r3, #10
 8001760:	4904      	ldr	r1, [pc, #16]	; (8001774 <uart_rs232_send_string+0x2c>)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <uart_rs232_send_string+0x30>)
 8001764:	f003 fa6f 	bl	8004c46 <HAL_UART_Transmit>
			10);
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0800679c 	.word	0x0800679c
 8001774:	20000260 	.word	0x20000260
 8001778:	200002c4 	.word	0x200002c4

0800177c <uart_rs232_send_num>:

void uart_rs232_send_bytes(uint8_t *bytes, uint16_t size) {
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_rs232_send_num(uint32_t num) {
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	if (num == 0) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <uart_rs232_send_num+0x16>
		uart_rs232_send_string("0");
 800178a:	4825      	ldr	r0, [pc, #148]	; (8001820 <uart_rs232_send_num+0xa4>)
 800178c:	f7ff ffdc 	bl	8001748 <uart_rs232_send_string>
		return;
 8001790:	e043      	b.n	800181a <uart_rs232_send_num+0x9e>
	}
	uint8_t num_flag = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
	int i;
	if (num < 0)
		uart_rs232_send_string("-");
	for (i = 10; i > 0; i--) {
 8001796:	230a      	movs	r3, #10
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	e03b      	b.n	8001814 <uart_rs232_send_num+0x98>
		if ((num / mypow(10, i - 1)) != 0) {
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4619      	mov	r1, r3
 80017a6:	200a      	movs	r0, #10
 80017a8:	f7ff ffa4 	bl	80016f4 <mypow>
 80017ac:	4602      	mov	r2, r0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d316      	bcc.n	80017e2 <uart_rs232_send_num+0x66>
			num_flag = 1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
			sprintf((void*) msg, "%d", num / mypow(10, i - 1));
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	3b01      	subs	r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	200a      	movs	r0, #10
 80017c4:	f7ff ff96 	bl	80016f4 <mypow>
 80017c8:	4602      	mov	r2, r0
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4914      	ldr	r1, [pc, #80]	; (8001824 <uart_rs232_send_num+0xa8>)
 80017d4:	4814      	ldr	r0, [pc, #80]	; (8001828 <uart_rs232_send_num+0xac>)
 80017d6:	f004 fb2d 	bl	8005e34 <siprintf>
			uart_rs232_send_string(msg);
 80017da:	4813      	ldr	r0, [pc, #76]	; (8001828 <uart_rs232_send_num+0xac>)
 80017dc:	f7ff ffb4 	bl	8001748 <uart_rs232_send_string>
 80017e0:	e005      	b.n	80017ee <uart_rs232_send_num+0x72>
		} else {
			if (num_flag != 0)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <uart_rs232_send_num+0x72>
				uart_rs232_send_string("0");
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <uart_rs232_send_num+0xa4>)
 80017ea:	f7ff ffad 	bl	8001748 <uart_rs232_send_string>
		}
		num %= mypow(10, i - 1);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	3b01      	subs	r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	200a      	movs	r0, #10
 80017fa:	f7ff ff7b 	bl	80016f4 <mypow>
 80017fe:	4602      	mov	r2, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	fbb3 f1f2 	udiv	r1, r3, r2
 8001806:	fb01 f202 	mul.w	r2, r1, r2
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	607b      	str	r3, [r7, #4]
	for (i = 10; i > 0; i--) {
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3b01      	subs	r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	dcc0      	bgt.n	800179c <uart_rs232_send_num+0x20>
	}
}
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	080067a0 	.word	0x080067a0
 8001824:	080067a4 	.word	0x080067a4
 8001828:	20000260 	.word	0x20000260

0800182c <HAL_UART_RxCpltCallback>:
	uart_rs232_send_string(".");
	sprintf((void*) msg, "%ld", num % 100);
	uart_rs232_send_string(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_UART_RxCpltCallback+0x30>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d10a      	bne.n	8001854 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 800183e:	230a      	movs	r3, #10
 8001840:	2201      	movs	r2, #1
 8001842:	4907      	ldr	r1, [pc, #28]	; (8001860 <HAL_UART_RxCpltCallback+0x34>)
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <HAL_UART_RxCpltCallback+0x38>)
 8001846:	f003 f9fe 	bl	8004c46 <HAL_UART_Transmit>

		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 800184a:	2201      	movs	r2, #1
 800184c:	4904      	ldr	r1, [pc, #16]	; (8001860 <HAL_UART_RxCpltCallback+0x34>)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_UART_RxCpltCallback+0x38>)
 8001850:	f003 fa8b 	bl	8004d6a <HAL_UART_Receive_IT>
	}
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40011000 	.word	0x40011000
 8001860:	2000025c 	.word	0x2000025c
 8001864:	200002c4 	.word	0x200002c4

08001868 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_USART1_UART_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART1_UART_Init+0x4c>)
 80018a0:	f003 f984 	bl	8004bac <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018aa:	f7ff fc97 	bl	80011dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200002c4 	.word	0x200002c4
 80018b8:	40011000 	.word	0x40011000

080018bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
 80018d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_UART_MspInit+0x94>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d134      	bne.n	8001948 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_UART_MspInit+0x98>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <HAL_UART_MspInit+0x98>)
 80018e8:	f043 0310 	orr.w	r3, r3, #16
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_UART_MspInit+0x98>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_UART_MspInit+0x98>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_UART_MspInit+0x98>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_UART_MspInit+0x98>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001916:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800191a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001924:	2303      	movs	r3, #3
 8001926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001928:	2307      	movs	r3, #7
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <HAL_UART_MspInit+0x9c>)
 8001934:	f000 fa90 	bl	8001e58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2025      	movs	r0, #37	; 0x25
 800193e:	f000 f9c2 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001942:	2025      	movs	r0, #37	; 0x25
 8001944:	f000 f9db 	bl	8001cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40011000 	.word	0x40011000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	b2db      	uxtb	r3, r3
}
 8001982:	4618      	mov	r0, r3
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001990:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001994:	480d      	ldr	r0, [pc, #52]	; (80019cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001996:	490e      	ldr	r1, [pc, #56]	; (80019d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001998:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019ac:	4c0b      	ldr	r4, [pc, #44]	; (80019dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ba:	f7ff fdab 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019be:	f004 fa67 	bl	8005e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c2:	f7ff fb3b 	bl	800103c <main>
  bx  lr    
 80019c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019d4:	0800680c 	.word	0x0800680c
  ldr r2, =_sbss
 80019d8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80019dc:	20000454 	.word	0x20000454

080019e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <ADC_IRQHandler>
	...

080019e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_Init+0x40>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0d      	ldr	r2, [pc, #52]	; (8001a24 <HAL_Init+0x40>)
 80019ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_Init+0x40>)
 80019fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x40>)
 8001a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f94f 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fcd6 	bl	80013c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023c00 	.word	0x40023c00

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f967 	bl	8001d1a <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f92f 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000010 	.word	0x20000010
 8001a84:	2000000c 	.word	0x2000000c

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000010 	.word	0x20000010
 8001aac:	20000308 	.word	0x20000308

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000308 	.word	0x20000308

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000010 	.word	0x20000010

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
         );
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	; (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff8e 	bl	8001bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff29 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff3e 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff8e 	bl	8001c04 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5d 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff31 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d40:	f7ff feb6 	bl	8001ab0 <HAL_GetTick>
 8001d44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d008      	beq.n	8001d64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e052      	b.n	8001e0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0216 	bic.w	r2, r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d103      	bne.n	8001d94 <HAL_DMA_Abort+0x62>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0208 	bic.w	r2, r2, #8
 8001da2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db4:	e013      	b.n	8001dde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db6:	f7ff fe7b 	bl	8001ab0 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b05      	cmp	r3, #5
 8001dc2:	d90c      	bls.n	8001dde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e015      	b.n	8001e0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e4      	bne.n	8001db6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df0:	223f      	movs	r2, #63	; 0x3f
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d004      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2280      	movs	r2, #128	; 0x80
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e00c      	b.n	8001e4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2205      	movs	r2, #5
 8001e34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 0201 	bic.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e16b      	b.n	800214c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e74:	2201      	movs	r2, #1
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	f040 815a 	bne.w	8002146 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d005      	beq.n	8001eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d130      	bne.n	8001f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 0201 	and.w	r2, r3, #1
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b03      	cmp	r3, #3
 8001f16:	d017      	beq.n	8001f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	2203      	movs	r2, #3
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d123      	bne.n	8001f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	08da      	lsrs	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3208      	adds	r2, #8
 8001f96:	69b9      	ldr	r1, [r7, #24]
 8001f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0203 	and.w	r2, r3, #3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80b4 	beq.w	8002146 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b60      	ldr	r3, [pc, #384]	; (8002164 <HAL_GPIO_Init+0x30c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	4a5f      	ldr	r2, [pc, #380]	; (8002164 <HAL_GPIO_Init+0x30c>)
 8001fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fec:	6453      	str	r3, [r2, #68]	; 0x44
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_GPIO_Init+0x30c>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <HAL_GPIO_Init+0x310>)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	089b      	lsrs	r3, r3, #2
 8002000:	3302      	adds	r3, #2
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	220f      	movs	r2, #15
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_GPIO_Init+0x314>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02b      	beq.n	800207e <HAL_GPIO_Init+0x226>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a51      	ldr	r2, [pc, #324]	; (8002170 <HAL_GPIO_Init+0x318>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x222>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a50      	ldr	r2, [pc, #320]	; (8002174 <HAL_GPIO_Init+0x31c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x21e>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a4f      	ldr	r2, [pc, #316]	; (8002178 <HAL_GPIO_Init+0x320>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x21a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a4e      	ldr	r2, [pc, #312]	; (800217c <HAL_GPIO_Init+0x324>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x216>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a4d      	ldr	r2, [pc, #308]	; (8002180 <HAL_GPIO_Init+0x328>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x212>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4c      	ldr	r2, [pc, #304]	; (8002184 <HAL_GPIO_Init+0x32c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x20e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a4b      	ldr	r2, [pc, #300]	; (8002188 <HAL_GPIO_Init+0x330>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x20a>
 800205e:	2307      	movs	r3, #7
 8002060:	e00e      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002062:	2308      	movs	r3, #8
 8002064:	e00c      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002066:	2306      	movs	r3, #6
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800206a:	2305      	movs	r3, #5
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x228>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x228>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x310>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_GPIO_Init+0x334>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c2:	4a32      	ldr	r2, [pc, #200]	; (800218c <HAL_GPIO_Init+0x334>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c8:	4b30      	ldr	r3, [pc, #192]	; (800218c <HAL_GPIO_Init+0x334>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ec:	4a27      	ldr	r2, [pc, #156]	; (800218c <HAL_GPIO_Init+0x334>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_GPIO_Init+0x334>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a1d      	ldr	r2, [pc, #116]	; (800218c <HAL_GPIO_Init+0x334>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <HAL_GPIO_Init+0x334>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a12      	ldr	r2, [pc, #72]	; (800218c <HAL_GPIO_Init+0x334>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f ae90 	bls.w	8001e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40021400 	.word	0x40021400
 8002184:	40021800 	.word	0x40021800
 8002188:	40021c00 	.word	0x40021c00
 800218c:	40013c00 	.word	0x40013c00

08002190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
 800219c:	4613      	mov	r3, r2
 800219e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a0:	787b      	ldrb	r3, [r7, #1]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021ac:	e003      	b.n	80021b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ae:	887b      	ldrh	r3, [r7, #2]
 80021b0:	041a      	lsls	r2, r3, #16
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e12b      	b.n	800242e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe fc90 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2224      	movs	r2, #36	; 0x24
 80021f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002228:	f001 fa2a 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 800222c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4a81      	ldr	r2, [pc, #516]	; (8002438 <HAL_I2C_Init+0x274>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d807      	bhi.n	8002248 <HAL_I2C_Init+0x84>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a80      	ldr	r2, [pc, #512]	; (800243c <HAL_I2C_Init+0x278>)
 800223c:	4293      	cmp	r3, r2
 800223e:	bf94      	ite	ls
 8002240:	2301      	movls	r3, #1
 8002242:	2300      	movhi	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e006      	b.n	8002256 <HAL_I2C_Init+0x92>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4a7d      	ldr	r2, [pc, #500]	; (8002440 <HAL_I2C_Init+0x27c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	bf94      	ite	ls
 8002250:	2301      	movls	r3, #1
 8002252:	2300      	movhi	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0e7      	b.n	800242e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4a78      	ldr	r2, [pc, #480]	; (8002444 <HAL_I2C_Init+0x280>)
 8002262:	fba2 2303 	umull	r2, r3, r2, r3
 8002266:	0c9b      	lsrs	r3, r3, #18
 8002268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	430a      	orrs	r2, r1
 800227c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a6a      	ldr	r2, [pc, #424]	; (8002438 <HAL_I2C_Init+0x274>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d802      	bhi.n	8002298 <HAL_I2C_Init+0xd4>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	3301      	adds	r3, #1
 8002296:	e009      	b.n	80022ac <HAL_I2C_Init+0xe8>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	4a69      	ldr	r2, [pc, #420]	; (8002448 <HAL_I2C_Init+0x284>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	099b      	lsrs	r3, r3, #6
 80022aa:	3301      	adds	r3, #1
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	495c      	ldr	r1, [pc, #368]	; (8002438 <HAL_I2C_Init+0x274>)
 80022c8:	428b      	cmp	r3, r1
 80022ca:	d819      	bhi.n	8002300 <HAL_I2C_Init+0x13c>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e59      	subs	r1, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022da:	1c59      	adds	r1, r3, #1
 80022dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00a      	beq.n	80022fc <HAL_I2C_Init+0x138>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1e59      	subs	r1, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022fa:	e051      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 80022fc:	2304      	movs	r3, #4
 80022fe:	e04f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d111      	bne.n	800232c <HAL_I2C_Init+0x168>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	1e58      	subs	r0, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6859      	ldr	r1, [r3, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	3301      	adds	r3, #1
 800231c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	e012      	b.n	8002352 <HAL_I2C_Init+0x18e>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1e58      	subs	r0, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	0099      	lsls	r1, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002342:	3301      	adds	r3, #1
 8002344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002348:	2b00      	cmp	r3, #0
 800234a:	bf0c      	ite	eq
 800234c:	2301      	moveq	r3, #1
 800234e:	2300      	movne	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Init+0x196>
 8002356:	2301      	movs	r3, #1
 8002358:	e022      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10e      	bne.n	8002380 <HAL_I2C_Init+0x1bc>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e58      	subs	r0, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6859      	ldr	r1, [r3, #4]
 800236a:	460b      	mov	r3, r1
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	440b      	add	r3, r1
 8002370:	fbb0 f3f3 	udiv	r3, r0, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237e:	e00f      	b.n	80023a0 <HAL_I2C_Init+0x1dc>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1e58      	subs	r0, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	0099      	lsls	r1, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	6809      	ldr	r1, [r1, #0]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6911      	ldr	r1, [r2, #16]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68d2      	ldr	r2, [r2, #12]
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0201 	orr.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	000186a0 	.word	0x000186a0
 800243c:	001e847f 	.word	0x001e847f
 8002440:	003d08ff 	.word	0x003d08ff
 8002444:	431bde83 	.word	0x431bde83
 8002448:	10624dd3 	.word	0x10624dd3

0800244c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	4608      	mov	r0, r1
 8002456:	4611      	mov	r1, r2
 8002458:	461a      	mov	r2, r3
 800245a:	4603      	mov	r3, r0
 800245c:	817b      	strh	r3, [r7, #10]
 800245e:	460b      	mov	r3, r1
 8002460:	813b      	strh	r3, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002466:	f7ff fb23 	bl	8001ab0 <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b20      	cmp	r3, #32
 8002476:	f040 8208 	bne.w	800288a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2319      	movs	r3, #25
 8002480:	2201      	movs	r2, #1
 8002482:	497b      	ldr	r1, [pc, #492]	; (8002670 <HAL_I2C_Mem_Read+0x224>)
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 faef 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002490:	2302      	movs	r3, #2
 8002492:	e1fb      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Mem_Read+0x56>
 800249e:	2302      	movs	r3, #2
 80024a0:	e1f4      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d007      	beq.n	80024c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2222      	movs	r2, #34	; 0x22
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a5b      	ldr	r2, [pc, #364]	; (8002674 <HAL_I2C_Mem_Read+0x228>)
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800250a:	88f8      	ldrh	r0, [r7, #6]
 800250c:	893a      	ldrh	r2, [r7, #8]
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	4603      	mov	r3, r0
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 f9bc 	bl	8002898 <I2C_RequestMemoryRead>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e1b0      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	2b00      	cmp	r3, #0
 8002530:	d113      	bne.n	800255a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	623b      	str	r3, [r7, #32]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e184      	b.n	8002864 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	2b01      	cmp	r3, #1
 8002560:	d11b      	bne.n	800259a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002570:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	e164      	b.n	8002864 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d11b      	bne.n	80025da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	61bb      	str	r3, [r7, #24]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	e144      	b.n	8002864 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025f0:	e138      	b.n	8002864 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	f200 80f1 	bhi.w	80027de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b01      	cmp	r3, #1
 8002602:	d123      	bne.n	800264c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fb44 	bl	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e139      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a
 800264a:	e10b      	b.n	8002864 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	2b02      	cmp	r3, #2
 8002652:	d14e      	bne.n	80026f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265a:	2200      	movs	r2, #0
 800265c:	4906      	ldr	r1, [pc, #24]	; (8002678 <HAL_I2C_Mem_Read+0x22c>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa02 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e10e      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
 800266e:	bf00      	nop
 8002670:	00100002 	.word	0x00100002
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026f0:	e0b8      	b.n	8002864 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	2200      	movs	r2, #0
 80026fa:	4966      	ldr	r1, [pc, #408]	; (8002894 <HAL_I2C_Mem_Read+0x448>)
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f9b3 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0bf      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	2200      	movs	r2, #0
 8002756:	494f      	ldr	r1, [pc, #316]	; (8002894 <HAL_I2C_Mem_Read+0x448>)
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f985 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e091      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027dc:	e042      	b.n	8002864 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa57 	bl	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e04c      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d118      	bne.n	8002864 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	2b00      	cmp	r3, #0
 800286a:	f47f aec2 	bne.w	80025f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	00010004 	.word	0x00010004

08002898 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	817b      	strh	r3, [r7, #10]
 80028aa:	460b      	mov	r3, r1
 80028ac:	813b      	strh	r3, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	2200      	movs	r2, #0
 80028da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 f8c2 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00d      	beq.n	8002906 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f8:	d103      	bne.n	8002902 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002900:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0aa      	b.n	8002a5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002914:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	4952      	ldr	r1, [pc, #328]	; (8002a64 <I2C_RequestMemoryRead+0x1cc>)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f8fa 	bl	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e097      	b.n	8002a5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	6a39      	ldr	r1, [r7, #32]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f964 	bl	8002c14 <I2C_WaitOnTXEFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b04      	cmp	r3, #4
 8002958:	d107      	bne.n	800296a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002968:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e076      	b.n	8002a5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002974:	893b      	ldrh	r3, [r7, #8]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]
 800297e:	e021      	b.n	80029c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002980:	893b      	ldrh	r3, [r7, #8]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	b29b      	uxth	r3, r3
 8002986:	b2da      	uxtb	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	6a39      	ldr	r1, [r7, #32]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f93e 	bl	8002c14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d107      	bne.n	80029b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e050      	b.n	8002a5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ba:	893b      	ldrh	r3, [r7, #8]
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	6a39      	ldr	r1, [r7, #32]
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 f923 	bl	8002c14 <I2C_WaitOnTXEFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d107      	bne.n	80029ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e035      	b.n	8002a5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f82b 	bl	8002a68 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a26:	d103      	bne.n	8002a30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e013      	b.n	8002a5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a34:	897b      	ldrh	r3, [r7, #10]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	6a3a      	ldr	r2, [r7, #32]
 8002a48:	4906      	ldr	r1, [pc, #24]	; (8002a64 <I2C_RequestMemoryRead+0x1cc>)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f863 	bl	8002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	00010002 	.word	0x00010002

08002a68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	4613      	mov	r3, r2
 8002a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a78:	e025      	b.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d021      	beq.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7ff f815 	bl	8001ab0 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e023      	b.n	8002b0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10d      	bne.n	8002aec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4013      	ands	r3, r2
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	461a      	mov	r2, r3
 8002aea:	e00c      	b.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	43da      	mvns	r2, r3
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4013      	ands	r3, r2
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d0b6      	beq.n	8002a7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b24:	e051      	b.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b34:	d123      	bne.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0204 	orr.w	r2, r3, #4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e046      	b.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d021      	beq.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b86:	f7fe ff93 	bl	8001ab0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d302      	bcc.n	8002b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d116      	bne.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f043 0220 	orr.w	r2, r3, #32
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e020      	b.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e00b      	b.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d18d      	bne.n	8002b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c20:	e02d      	b.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f88d 	bl	8002d42 <I2C_IsAcknowledgeFailed>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e02d      	b.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d021      	beq.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7fe ff39 	bl	8001ab0 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0220 	orr.w	r2, r3, #32
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e007      	b.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d1ca      	bne.n	8002c22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ca2:	e042      	b.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d119      	bne.n	8002ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f06f 0210 	mvn.w	r2, #16
 8002cba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e029      	b.n	8002d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce6:	f7fe fee3 	bl	8001ab0 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d302      	bcc.n	8002cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d116      	bne.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e007      	b.n	8002d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d1b5      	bne.n	8002ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d58:	d11b      	bne.n	8002d92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f043 0204 	orr.w	r2, r3, #4
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e267      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d075      	beq.n	8002eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dbe:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d00c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dca:	4b85      	ldr	r3, [pc, #532]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d112      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd6:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de2:	d10b      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	4b7e      	ldr	r3, [pc, #504]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05b      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x108>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d157      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e242      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x74>
 8002e06:	4b76      	ldr	r3, [pc, #472]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a75      	ldr	r2, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x98>
 8002e1e:	4b70      	ldr	r3, [pc, #448]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b6d      	ldr	r3, [pc, #436]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6c      	ldr	r2, [pc, #432]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e38:	4b69      	ldr	r3, [pc, #420]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a65      	ldr	r2, [pc, #404]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fe2a 	bl	8001ab0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fe26 	bl	8001ab0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e207      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xc0>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fe16 	bl	8001ab0 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fe12 	bl	8001ab0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1f3      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0xe8>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x152>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1c7      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4937      	ldr	r1, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	e03a      	b.n	8002f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x244>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe fdcb 	bl	8001ab0 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fdc7 	bl	8001ab0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1a8      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4925      	ldr	r1, [pc, #148]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x244>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fdaa 	bl	8001ab0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fe fda6 	bl	8001ab0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e187      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d036      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_RCC_OscConfig+0x248>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fd8a 	bl	8001ab0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fd86 	bl	8001ab0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e167      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x200>
 8002fbe:	e01b      	b.n	8002ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCC_OscConfig+0x248>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fd73 	bl	8001ab0 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	e00e      	b.n	8002fec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fe fd6f 	bl	8001ab0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d907      	bls.n	8002fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e150      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	42470000 	.word	0x42470000
 8002fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ea      	bne.n	8002fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8097 	beq.w	8003134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300a:	4b81      	ldr	r3, [pc, #516]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a7c      	ldr	r2, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003032:	2301      	movs	r3, #1
 8003034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	4b77      	ldr	r3, [pc, #476]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003042:	4b74      	ldr	r3, [pc, #464]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a73      	ldr	r2, [pc, #460]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304e:	f7fe fd2f 	bl	8001ab0 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003056:	f7fe fd2b 	bl	8001ab0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e10c      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x2ea>
 800307c:	4b64      	ldr	r3, [pc, #400]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a63      	ldr	r2, [pc, #396]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	e01c      	b.n	80030c4 <HAL_RCC_OscConfig+0x324>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b05      	cmp	r3, #5
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x30c>
 8003092:	4b5f      	ldr	r3, [pc, #380]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a5e      	ldr	r2, [pc, #376]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b5c      	ldr	r3, [pc, #368]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a5b      	ldr	r2, [pc, #364]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0x324>
 80030ac:	4b58      	ldr	r3, [pc, #352]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a57      	ldr	r2, [pc, #348]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	4b55      	ldr	r3, [pc, #340]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a54      	ldr	r2, [pc, #336]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 0304 	bic.w	r3, r3, #4
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe fcf0 	bl	8001ab0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe fcec 	bl	8001ab0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0cb      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	4b49      	ldr	r3, [pc, #292]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ee      	beq.n	80030d4 <HAL_RCC_OscConfig+0x334>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fe fcda 	bl	8001ab0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fe fcd6 	bl	8001ab0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0b5      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003116:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ee      	bne.n	8003100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003122:	7dfb      	ldrb	r3, [r7, #23]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4a38      	ldr	r2, [pc, #224]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a1 	beq.w	8003280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b08      	cmp	r3, #8
 8003148:	d05c      	beq.n	8003204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d141      	bne.n	80031d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCC_OscConfig+0x478>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe fcaa 	bl	8001ab0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fca6 	bl	8001ab0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e087      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	3b01      	subs	r3, #1
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	491b      	ldr	r1, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x478>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe fc7f 	bl	8001ab0 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fc7b 	bl	8001ab0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e05c      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x416>
 80031d4:	e054      	b.n	8003280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fc68 	bl	8001ab0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fc64 	bl	8001ab0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e045      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x444>
 8003202:	e03d      	b.n	8003280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d107      	bne.n	800321c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e038      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
 8003210:	40023800 	.word	0x40023800
 8003214:	40007000 	.word	0x40007000
 8003218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x4ec>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d028      	beq.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d121      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d11a      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003254:	4293      	cmp	r3, r2
 8003256:	d111      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	3b01      	subs	r3, #1
 8003266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800

08003290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0cc      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d90c      	bls.n	80032cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b8      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a58      	ldr	r2, [pc, #352]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	494d      	ldr	r1, [pc, #308]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d044      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d119      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d003      	beq.n	800334e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	2b03      	cmp	r3, #3
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e067      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4934      	ldr	r1, [pc, #208]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003380:	f7fe fb96 	bl	8001ab0 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe fb92 	bl	8001ab0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e04f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d20c      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e032      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4916      	ldr	r1, [pc, #88]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	490e      	ldr	r1, [pc, #56]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003416:	f000 f821 	bl	800345c <HAL_RCC_GetSysClockFreq>
 800341a:	4602      	mov	r2, r0
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	490a      	ldr	r1, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	5ccb      	ldrb	r3, [r1, r3]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe faf6 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023c00 	.word	0x40023c00
 800344c:	40023800 	.word	0x40023800
 8003450:	080067b0 	.word	0x080067b0
 8003454:	20000008 	.word	0x20000008
 8003458:	2000000c 	.word	0x2000000c

0800345c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003460:	b094      	sub	sp, #80	; 0x50
 8003462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	647b      	str	r3, [r7, #68]	; 0x44
 8003468:	2300      	movs	r3, #0
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346c:	2300      	movs	r3, #0
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d00d      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x40>
 8003480:	2b08      	cmp	r3, #8
 8003482:	f200 80e1 	bhi.w	8003648 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x34>
 800348a:	2b04      	cmp	r3, #4
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x3a>
 800348e:	e0db      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b73      	ldr	r3, [pc, #460]	; (8003660 <HAL_RCC_GetSysClockFreq+0x204>)
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003494:	e0db      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4b73      	ldr	r3, [pc, #460]	; (8003664 <HAL_RCC_GetSysClockFreq+0x208>)
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800349a:	e0d8      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a6:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	2200      	movs	r2, #0
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80034bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
 80034c6:	2300      	movs	r3, #0
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ce:	4622      	mov	r2, r4
 80034d0:	462b      	mov	r3, r5
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	0159      	lsls	r1, r3, #5
 80034dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e0:	0150      	lsls	r0, r2, #5
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4621      	mov	r1, r4
 80034e8:	1a51      	subs	r1, r2, r1
 80034ea:	6139      	str	r1, [r7, #16]
 80034ec:	4629      	mov	r1, r5
 80034ee:	eb63 0301 	sbc.w	r3, r3, r1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003500:	4659      	mov	r1, fp
 8003502:	018b      	lsls	r3, r1, #6
 8003504:	4651      	mov	r1, sl
 8003506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800350a:	4651      	mov	r1, sl
 800350c:	018a      	lsls	r2, r1, #6
 800350e:	4651      	mov	r1, sl
 8003510:	ebb2 0801 	subs.w	r8, r2, r1
 8003514:	4659      	mov	r1, fp
 8003516:	eb63 0901 	sbc.w	r9, r3, r1
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800352a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800352e:	4690      	mov	r8, r2
 8003530:	4699      	mov	r9, r3
 8003532:	4623      	mov	r3, r4
 8003534:	eb18 0303 	adds.w	r3, r8, r3
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	462b      	mov	r3, r5
 800353c:	eb49 0303 	adc.w	r3, r9, r3
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800354e:	4629      	mov	r1, r5
 8003550:	024b      	lsls	r3, r1, #9
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003558:	4621      	mov	r1, r4
 800355a:	024a      	lsls	r2, r1, #9
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
 8003566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800356c:	f7fc fe80 	bl	8000270 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003578:	e058      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357a:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	2200      	movs	r2, #0
 8003582:	4618      	mov	r0, r3
 8003584:	4611      	mov	r1, r2
 8003586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	0159      	lsls	r1, r3, #5
 80035a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a6:	0150      	lsls	r0, r2, #5
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4641      	mov	r1, r8
 80035ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035cc:	ebb2 040a 	subs.w	r4, r2, sl
 80035d0:	eb63 050b 	sbc.w	r5, r3, fp
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	00eb      	lsls	r3, r5, #3
 80035de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e2:	00e2      	lsls	r2, r4, #3
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	18e3      	adds	r3, r4, r3
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	464b      	mov	r3, r9
 80035f0:	eb45 0303 	adc.w	r3, r5, r3
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003602:	4629      	mov	r1, r5
 8003604:	028b      	lsls	r3, r1, #10
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800360c:	4621      	mov	r1, r4
 800360e:	028a      	lsls	r2, r1, #10
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	2200      	movs	r2, #0
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	61fa      	str	r2, [r7, #28]
 800361c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003620:	f7fc fe26 	bl	8000270 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800363c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800363e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003646:	e002      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetSysClockFreq+0x204>)
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800364c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003650:	4618      	mov	r0, r3
 8003652:	3750      	adds	r7, #80	; 0x50
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000008 	.word	0x20000008

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003684:	f7ff fff0 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	080067c0 	.word	0x080067c0

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ac:	f7ff ffdc 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0b5b      	lsrs	r3, r3, #13
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	080067c0 	.word	0x080067c0

080036d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07b      	b.n	80037da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f2:	d009      	beq.n	8003708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	61da      	str	r2, [r3, #28]
 80036fa:	e005      	b.n	8003708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd fe08 	bl	8001338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	ea42 0103 	orr.w	r1, r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	f003 0104 	and.w	r1, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f003 0210 	and.w	r2, r3, #16
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4613      	mov	r3, r2
 80037f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d101      	bne.n	8003804 <HAL_SPI_Transmit+0x22>
 8003800:	2302      	movs	r3, #2
 8003802:	e126      	b.n	8003a52 <HAL_SPI_Transmit+0x270>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800380c:	f7fe f950 	bl	8001ab0 <HAL_GetTick>
 8003810:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b01      	cmp	r3, #1
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003822:	2302      	movs	r3, #2
 8003824:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003826:	e10b      	b.n	8003a40 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_SPI_Transmit+0x52>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003838:	e102      	b.n	8003a40 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	d10f      	bne.n	80038a2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003890:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d007      	beq.n	80038c0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d14b      	bne.n	8003962 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <HAL_SPI_Transmit+0xf6>
 80038d2:	8afb      	ldrh	r3, [r7, #22]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d13e      	bne.n	8003956 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038dc:	881a      	ldrh	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	1c9a      	adds	r2, r3, #2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038fc:	e02b      	b.n	8003956 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d112      	bne.n	8003932 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003930:	e011      	b.n	8003956 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003932:	f7fe f8bd 	bl	8001ab0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d803      	bhi.n	800394a <HAL_SPI_Transmit+0x168>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d102      	bne.n	8003950 <HAL_SPI_Transmit+0x16e>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003954:	e074      	b.n	8003a40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ce      	bne.n	80038fe <HAL_SPI_Transmit+0x11c>
 8003960:	e04c      	b.n	80039fc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_SPI_Transmit+0x18e>
 800396a:	8afb      	ldrh	r3, [r7, #22]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d140      	bne.n	80039f2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003996:	e02c      	b.n	80039f2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d113      	bne.n	80039ce <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	7812      	ldrb	r2, [r2, #0]
 80039b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80039cc:	e011      	b.n	80039f2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039ce:	f7fe f86f 	bl	8001ab0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d803      	bhi.n	80039e6 <HAL_SPI_Transmit+0x204>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d102      	bne.n	80039ec <HAL_SPI_Transmit+0x20a>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f0:	e026      	b.n	8003a40 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1cd      	bne.n	8003998 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 fbcb 	bl	800419c <SPI_EndRxTxTransaction>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10a      	bne.n	8003a30 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e000      	b.n	8003a40 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b088      	sub	sp, #32
 8003a5e:	af02      	add	r7, sp, #8
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a76:	d112      	bne.n	8003a9e <HAL_SPI_Receive+0x44>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2204      	movs	r2, #4
 8003a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f8f1 	bl	8003c7c <HAL_SPI_TransmitReceive>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	e0ea      	b.n	8003c74 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_SPI_Receive+0x52>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e0e3      	b.n	8003c74 <HAL_SPI_Receive+0x21a>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab4:	f7fd fffc 	bl	8001ab0 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d002      	beq.n	8003acc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003aca:	e0ca      	b.n	8003c62 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Receive+0x7e>
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003adc:	e0c1      	b.n	8003c62 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	88fa      	ldrh	r2, [r7, #6]
 8003af6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	d10f      	bne.n	8003b46 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d007      	beq.n	8003b64 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b62:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d162      	bne.n	8003c32 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b6c:	e02e      	b.n	8003bcc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d115      	bne.n	8003ba8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f103 020c 	add.w	r2, r3, #12
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ba6:	e011      	b.n	8003bcc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ba8:	f7fd ff82 	bl	8001ab0 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d803      	bhi.n	8003bc0 <HAL_SPI_Receive+0x166>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d102      	bne.n	8003bc6 <HAL_SPI_Receive+0x16c>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bca:	e04a      	b.n	8003c62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1cb      	bne.n	8003b6e <HAL_SPI_Receive+0x114>
 8003bd6:	e031      	b.n	8003c3c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d113      	bne.n	8003c0e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	b292      	uxth	r2, r2
 8003bf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	1c9a      	adds	r2, r3, #2
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c0c:	e011      	b.n	8003c32 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c0e:	f7fd ff4f 	bl	8001ab0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d803      	bhi.n	8003c26 <HAL_SPI_Receive+0x1cc>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c24:	d102      	bne.n	8003c2c <HAL_SPI_Receive+0x1d2>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c30:	e017      	b.n	8003c62 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1cd      	bne.n	8003bd8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	6839      	ldr	r1, [r7, #0]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fa45 	bl	80040d0 <SPI_EndRxTransaction>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
 8003c5e:	e000      	b.n	8003c62 <HAL_SPI_Receive+0x208>
  }

error :
 8003c60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
 8003c88:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_SPI_TransmitReceive+0x26>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e18a      	b.n	8003fb8 <HAL_SPI_TransmitReceive+0x33c>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003caa:	f7fd ff01 	bl	8001ab0 <HAL_GetTick>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d00f      	beq.n	8003cec <HAL_SPI_TransmitReceive+0x70>
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd2:	d107      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <HAL_SPI_TransmitReceive+0x68>
 8003cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d003      	beq.n	8003cec <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cea:	e15b      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x82>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <HAL_SPI_TransmitReceive+0x82>
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d04:	e14e      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d003      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2205      	movs	r2, #5
 8003d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	887a      	ldrh	r2, [r7, #2]
 8003d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	887a      	ldrh	r2, [r7, #2]
 8003d3c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d007      	beq.n	8003d6e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d76:	d178      	bne.n	8003e6a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0x10a>
 8003d80:	8b7b      	ldrh	r3, [r7, #26]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d166      	bne.n	8003e54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	881a      	ldrh	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	1c9a      	adds	r2, r3, #2
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003daa:	e053      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d11b      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0x176>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d016      	beq.n	8003df2 <HAL_SPI_TransmitReceive+0x176>
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d113      	bne.n	8003df2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	881a      	ldrh	r2, [r3, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	1c9a      	adds	r2, r3, #2
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d119      	bne.n	8003e34 <HAL_SPI_TransmitReceive+0x1b8>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d014      	beq.n	8003e34 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	b292      	uxth	r2, r2
 8003e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e30:	2301      	movs	r3, #1
 8003e32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e34:	f7fd fe3c 	bl	8001ab0 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d807      	bhi.n	8003e54 <HAL_SPI_TransmitReceive+0x1d8>
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4a:	d003      	beq.n	8003e54 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e52:	e0a7      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1a6      	bne.n	8003dac <HAL_SPI_TransmitReceive+0x130>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1a1      	bne.n	8003dac <HAL_SPI_TransmitReceive+0x130>
 8003e68:	e07c      	b.n	8003f64 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_SPI_TransmitReceive+0x1fc>
 8003e72:	8b7b      	ldrh	r3, [r7, #26]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d16b      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	7812      	ldrb	r2, [r2, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e9e:	e057      	b.n	8003f50 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d11c      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x26c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d017      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x26c>
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d114      	bne.n	8003ee8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	7812      	ldrb	r2, [r2, #0]
 8003eca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d119      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x2ae>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d014      	beq.n	8003f2a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f26:	2301      	movs	r3, #1
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f2a:	f7fd fdc1 	bl	8001ab0 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d803      	bhi.n	8003f42 <HAL_SPI_TransmitReceive+0x2c6>
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d102      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x2cc>
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f4e:	e029      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1a2      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x224>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d19d      	bne.n	8003ea0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f917 	bl	800419c <SPI_EndRxTxTransaction>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d006      	beq.n	8003f82 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f80:	e010      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	e000      	b.n	8003fa4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fa2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3730      	adds	r7, #48	; 0x30
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003fd0:	f7fd fd6e 	bl	8001ab0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	4413      	add	r3, r2
 8003fde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003fe0:	f7fd fd66 	bl	8001ab0 <HAL_GetTick>
 8003fe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	015b      	lsls	r3, r3, #5
 8003fec:	0d1b      	lsrs	r3, r3, #20
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff6:	e054      	b.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffe:	d050      	beq.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004000:	f7fd fd56 	bl	8001ab0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	429a      	cmp	r2, r3
 800400e:	d902      	bls.n	8004016 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d13d      	bne.n	8004092 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004024:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800402e:	d111      	bne.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004038:	d004      	beq.n	8004044 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004042:	d107      	bne.n	8004054 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405c:	d10f      	bne.n	800407e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800407c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e017      	b.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	3b01      	subs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4013      	ands	r3, r2
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d19b      	bne.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000008 	.word	0x20000008

080040d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e4:	d111      	bne.n	800410a <SPI_EndRxTransaction+0x3a>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ee:	d004      	beq.n	80040fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f8:	d107      	bne.n	800410a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004108:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004112:	d12a      	bne.n	800416a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d012      	beq.n	8004144 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2200      	movs	r2, #0
 8004126:	2180      	movs	r1, #128	; 0x80
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff ff49 	bl	8003fc0 <SPI_WaitFlagStateUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02d      	beq.n	8004190 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e026      	b.n	8004192 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2200      	movs	r2, #0
 800414c:	2101      	movs	r1, #1
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff ff36 	bl	8003fc0 <SPI_WaitFlagStateUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01a      	beq.n	8004190 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	f043 0220 	orr.w	r2, r3, #32
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e013      	b.n	8004192 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	2101      	movs	r1, #1
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff ff23 	bl	8003fc0 <SPI_WaitFlagStateUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e000      	b.n	8004192 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <SPI_EndRxTxTransaction+0x7c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1b      	ldr	r2, [pc, #108]	; (800421c <SPI_EndRxTxTransaction+0x80>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	0d5b      	lsrs	r3, r3, #21
 80041b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041c6:	d112      	bne.n	80041ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	2180      	movs	r1, #128	; 0x80
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f7ff fef4 	bl	8003fc0 <SPI_WaitFlagStateUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e00f      	b.n	800420e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d0f2      	beq.n	80041ee <SPI_EndRxTxTransaction+0x52>
 8004208:	e000      	b.n	800420c <SPI_EndRxTxTransaction+0x70>
        break;
 800420a:	bf00      	nop
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20000008 	.word	0x20000008
 800421c:	165e9f81 	.word	0x165e9f81

08004220 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e034      	b.n	80042a0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7fc fb30 	bl	80008b0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3308      	adds	r3, #8
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f001 fd1a 	bl	8005c94 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	461a      	mov	r2, r3
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	f001 fd64 	bl	8005d38 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6858      	ldr	r0, [r3, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	f001 fd99 	bl	8005db4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	6892      	ldr	r2, [r2, #8]
 800428a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	6892      	ldr	r2, [r2, #8]
 8004296:	f041 0101 	orr.w	r1, r1, #1
 800429a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d106      	bne.n	80042d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd f9cc 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 fa96 	bl	8004818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e04e      	b.n	80043fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a23      	ldr	r2, [pc, #140]	; (800440c <HAL_TIM_Base_Start_IT+0xc4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x80>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800438a:	d01d      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x80>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1f      	ldr	r2, [pc, #124]	; (8004410 <HAL_TIM_Base_Start_IT+0xc8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x80>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <HAL_TIM_Base_Start_IT+0xcc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x80>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <HAL_TIM_Base_Start_IT+0xd0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x80>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1b      	ldr	r2, [pc, #108]	; (800441c <HAL_TIM_Base_Start_IT+0xd4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x80>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a19      	ldr	r2, [pc, #100]	; (8004420 <HAL_TIM_Base_Start_IT+0xd8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x80>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_TIM_Base_Start_IT+0xdc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d111      	bne.n	80043ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d010      	beq.n	80043fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ea:	e007      	b.n	80043fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40010400 	.word	0x40010400
 8004420:	40014000 	.word	0x40014000
 8004424:	40001800 	.word	0x40001800

08004428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d122      	bne.n	8004484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b02      	cmp	r3, #2
 800444a:	d11b      	bne.n	8004484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0202 	mvn.w	r2, #2
 8004454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2201      	movs	r2, #1
 800445a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9b5 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f9a7 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f9b8 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b04      	cmp	r3, #4
 8004490:	d122      	bne.n	80044d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b04      	cmp	r3, #4
 800449e:	d11b      	bne.n	80044d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0204 	mvn.w	r2, #4
 80044a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f98b 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 80044c4:	e005      	b.n	80044d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f97d 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f98e 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d122      	bne.n	800452c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d11b      	bne.n	800452c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0208 	mvn.w	r2, #8
 80044fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2204      	movs	r2, #4
 8004502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f961 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 8004518:	e005      	b.n	8004526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f953 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f964 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b10      	cmp	r3, #16
 8004538:	d122      	bne.n	8004580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b10      	cmp	r3, #16
 8004546:	d11b      	bne.n	8004580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0210 	mvn.w	r2, #16
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2208      	movs	r2, #8
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f937 	bl	80047da <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f929 	bl	80047c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f93a 	bl	80047ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10e      	bne.n	80045ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b01      	cmp	r3, #1
 800459a:	d107      	bne.n	80045ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0201 	mvn.w	r2, #1
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fe44 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d10e      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d107      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fae0 	bl	8004b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d10e      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d107      	bne.n	8004604 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8ff 	bl	8004802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0320 	and.w	r3, r3, #32
 800460e:	2b20      	cmp	r3, #32
 8004610:	d10e      	bne.n	8004630 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b20      	cmp	r3, #32
 800461e:	d107      	bne.n	8004630 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0220 	mvn.w	r2, #32
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 faaa 	bl	8004b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIM_ConfigClockSource+0x1c>
 8004650:	2302      	movs	r3, #2
 8004652:	e0b4      	b.n	80047be <HAL_TIM_ConfigClockSource+0x186>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468c:	d03e      	beq.n	800470c <HAL_TIM_ConfigClockSource+0xd4>
 800468e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004692:	f200 8087 	bhi.w	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469a:	f000 8086 	beq.w	80047aa <HAL_TIM_ConfigClockSource+0x172>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d87f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b70      	cmp	r3, #112	; 0x70
 80046a6:	d01a      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xa6>
 80046a8:	2b70      	cmp	r3, #112	; 0x70
 80046aa:	d87b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b60      	cmp	r3, #96	; 0x60
 80046ae:	d050      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x11a>
 80046b0:	2b60      	cmp	r3, #96	; 0x60
 80046b2:	d877      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 80046b4:	2b50      	cmp	r3, #80	; 0x50
 80046b6:	d03c      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0xfa>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d873      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d058      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x13a>
 80046c0:	2b40      	cmp	r3, #64	; 0x40
 80046c2:	d86f      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 80046c4:	2b30      	cmp	r3, #48	; 0x30
 80046c6:	d064      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d86b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d060      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x15a>
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d867      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d05c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x15a>
 80046d8:	2b10      	cmp	r3, #16
 80046da:	d05a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x15a>
 80046dc:	e062      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f000 f9ad 	bl	8004a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	609a      	str	r2, [r3, #8]
      break;
 800470a:	e04f      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	6899      	ldr	r1, [r3, #8]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f000 f996 	bl	8004a4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800472e:	609a      	str	r2, [r3, #8]
      break;
 8004730:	e03c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	f000 f90a 	bl	8004958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2150      	movs	r1, #80	; 0x50
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f963 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 8004750:	e02c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	461a      	mov	r2, r3
 8004760:	f000 f929 	bl	80049b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2160      	movs	r1, #96	; 0x60
 800476a:	4618      	mov	r0, r3
 800476c:	f000 f953 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 8004770:	e01c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	461a      	mov	r2, r3
 8004780:	f000 f8ea 	bl	8004958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	; 0x40
 800478a:	4618      	mov	r0, r3
 800478c:	f000 f943 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 8004790:	e00c      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4619      	mov	r1, r3
 800479c:	4610      	mov	r0, r2
 800479e:	f000 f93a 	bl	8004a16 <TIM_ITRx_SetConfig>
      break;
 80047a2:	e003      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
      break;
 80047a8:	e000      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80047aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr

080047da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
	...

08004818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a40      	ldr	r2, [pc, #256]	; (800492c <TIM_Base_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d00f      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a3d      	ldr	r2, [pc, #244]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d00b      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d007      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d003      	beq.n	8004858 <TIM_Base_SetConfig+0x40>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a3a      	ldr	r2, [pc, #232]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d108      	bne.n	800486a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a2f      	ldr	r2, [pc, #188]	; (800492c <TIM_Base_SetConfig+0x114>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02b      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d027      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <TIM_Base_SetConfig+0x118>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d023      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a2b      	ldr	r2, [pc, #172]	; (8004934 <TIM_Base_SetConfig+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01f      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <TIM_Base_SetConfig+0x120>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01b      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a29      	ldr	r2, [pc, #164]	; (800493c <TIM_Base_SetConfig+0x124>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d017      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a28      	ldr	r2, [pc, #160]	; (8004940 <TIM_Base_SetConfig+0x128>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <TIM_Base_SetConfig+0x12c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00f      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a26      	ldr	r2, [pc, #152]	; (8004948 <TIM_Base_SetConfig+0x130>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a25      	ldr	r2, [pc, #148]	; (800494c <TIM_Base_SetConfig+0x134>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a24      	ldr	r2, [pc, #144]	; (8004950 <TIM_Base_SetConfig+0x138>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_Base_SetConfig+0xb2>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a23      	ldr	r2, [pc, #140]	; (8004954 <TIM_Base_SetConfig+0x13c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d108      	bne.n	80048dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	4313      	orrs	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a0a      	ldr	r2, [pc, #40]	; (800492c <TIM_Base_SetConfig+0x114>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0xf8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a0c      	ldr	r2, [pc, #48]	; (800493c <TIM_Base_SetConfig+0x124>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d103      	bne.n	8004918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	615a      	str	r2, [r3, #20]
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800
 800494c:	40001800 	.word	0x40001800
 8004950:	40001c00 	.word	0x40001c00
 8004954:	40002000 	.word	0x40002000

08004958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	f023 0201 	bic.w	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f023 030a 	bic.w	r3, r3, #10
 8004994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b087      	sub	sp, #28
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	60f8      	str	r0, [r7, #12]
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	f023 0210 	bic.w	r2, r3, #16
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b085      	sub	sp, #20
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f043 0307 	orr.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e05a      	b.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a21      	ldr	r2, [pc, #132]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d022      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af0:	d01d      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d018      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1a      	ldr	r2, [pc, #104]	; (8004b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a17      	ldr	r2, [pc, #92]	; (8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a15      	ldr	r2, [pc, #84]	; (8004b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d10c      	bne.n	8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	40010400 	.word	0x40010400
 8004b7c:	40014000 	.word	0x40014000
 8004b80:	40001800 	.word	0x40001800

08004b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e03f      	b.n	8004c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fe72 	bl	80018bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fddb 	bl	80057ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b08a      	sub	sp, #40	; 0x28
 8004c4a:	af02      	add	r7, sp, #8
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d17c      	bne.n	8004d60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_UART_Transmit+0x2c>
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e075      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Transmit+0x3e>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e06e      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2221      	movs	r2, #33	; 0x21
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9a:	f7fc ff09 	bl	8001ab0 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d108      	bne.n	8004cc8 <HAL_UART_Transmit+0x82>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e003      	b.n	8004cd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cd8:	e02a      	b.n	8004d30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2180      	movs	r1, #128	; 0x80
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fb1f 	bl	8005328 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e036      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e007      	b.n	8004d22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1cf      	bne.n	8004cda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2140      	movs	r1, #64	; 0x40
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 faef 	bl	8005328 <UART_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	4613      	mov	r3, r2
 8004d76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d11d      	bne.n	8004dc0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_UART_Receive_IT+0x26>
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e016      	b.n	8004dc2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_UART_Receive_IT+0x38>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e00f      	b.n	8004dc2 <HAL_UART_Receive_IT+0x58>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	461a      	mov	r2, r3
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f000 fb24 	bl	8005404 <UART_Start_Receive_IT>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	e000      	b.n	8004dc2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b0ba      	sub	sp, #232	; 0xe8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10f      	bne.n	8004e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <HAL_UART_IRQHandler+0x66>
 8004e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e22:	f003 0320 	and.w	r3, r3, #32
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fc03 	bl	8005636 <UART_Receive_IT>
      return;
 8004e30:	e256      	b.n	80052e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80de 	beq.w	8004ff8 <HAL_UART_IRQHandler+0x22c>
 8004e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80d1 	beq.w	8004ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xae>
 8004e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_UART_IRQHandler+0xd2>
 8004e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0202 	orr.w	r2, r3, #2
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00b      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xf6>
 8004eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eba:	f043 0204 	orr.w	r2, r3, #4
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d011      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x126>
 8004ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d105      	bne.n	8004ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f043 0208 	orr.w	r2, r3, #8
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 81ed 	beq.w	80052d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_UART_IRQHandler+0x14e>
 8004f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fb8e 	bl	8005636 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b40      	cmp	r3, #64	; 0x40
 8004f26:	bf0c      	ite	eq
 8004f28:	2301      	moveq	r3, #1
 8004f2a:	2300      	movne	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <HAL_UART_IRQHandler+0x17a>
 8004f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d04f      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa96 	bl	8005478 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f56:	2b40      	cmp	r3, #64	; 0x40
 8004f58:	d141      	bne.n	8004fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3314      	adds	r3, #20
 8004f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f68:	e853 3f00 	ldrex	r3, [r3]
 8004f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3314      	adds	r3, #20
 8004f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1d9      	bne.n	8004f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d013      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	4a7d      	ldr	r2, [pc, #500]	; (80051a8 <HAL_UART_IRQHandler+0x3dc>)
 8004fb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fc ff29 	bl	8001e12 <HAL_DMA_Abort_IT>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d016      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd4:	e00e      	b.n	8004ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f990 	bl	80052fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fdc:	e00a      	b.n	8004ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f98c 	bl	80052fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe4:	e006      	b.n	8004ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f988 	bl	80052fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ff2:	e170      	b.n	80052d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff4:	bf00      	nop
    return;
 8004ff6:	e16e      	b.n	80052d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f040 814a 	bne.w	8005296 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8143 	beq.w	8005296 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 813c 	beq.w	8005296 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	60bb      	str	r3, [r7, #8]
 8005032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	f040 80b4 	bne.w	80051ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8140 	beq.w	80052da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800505e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005062:	429a      	cmp	r2, r3
 8005064:	f080 8139 	bcs.w	80052da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800506e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507a:	f000 8088 	beq.w	800518e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80050aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80050b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80050c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1d9      	bne.n	800507e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e1      	bne.n	80050ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3314      	adds	r3, #20
 800510c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800511c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3314      	adds	r3, #20
 8005126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800512a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800512c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e3      	bne.n	8005106 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800515c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800515e:	f023 0310 	bic.w	r3, r3, #16
 8005162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005170:	65ba      	str	r2, [r7, #88]	; 0x58
 8005172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005178:	e841 2300 	strex	r3, r2, [r1]
 800517c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800517e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e3      	bne.n	800514c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	4618      	mov	r0, r3
 800518a:	f7fc fdd2 	bl	8001d32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005196:	b29b      	uxth	r3, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	b29b      	uxth	r3, r3
 800519c:	4619      	mov	r1, r3
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f8b6 	bl	8005310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051a4:	e099      	b.n	80052da <HAL_UART_IRQHandler+0x50e>
 80051a6:	bf00      	nop
 80051a8:	0800553f 	.word	0x0800553f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 808b 	beq.w	80052de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80051c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8086 	beq.w	80052de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	330c      	adds	r3, #12
 80051d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051f6:	647a      	str	r2, [r7, #68]	; 0x44
 80051f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e3      	bne.n	80051d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	623b      	str	r3, [r7, #32]
   return(result);
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3314      	adds	r3, #20
 800522a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800522e:	633a      	str	r2, [r7, #48]	; 0x30
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e3      	bne.n	800520a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0310 	bic.w	r3, r3, #16
 8005266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005274:	61fa      	str	r2, [r7, #28]
 8005276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	69b9      	ldr	r1, [r7, #24]
 800527a:	69fa      	ldr	r2, [r7, #28]
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	617b      	str	r3, [r7, #20]
   return(result);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e3      	bne.n	8005250 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f83e 	bl	8005310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005294:	e023      	b.n	80052de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d009      	beq.n	80052b6 <HAL_UART_IRQHandler+0x4ea>
 80052a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f959 	bl	8005566 <UART_Transmit_IT>
    return;
 80052b4:	e014      	b.n	80052e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00e      	beq.n	80052e0 <HAL_UART_IRQHandler+0x514>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f999 	bl	8005606 <UART_EndTransmit_IT>
    return;
 80052d4:	e004      	b.n	80052e0 <HAL_UART_IRQHandler+0x514>
    return;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <HAL_UART_IRQHandler+0x514>
      return;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <HAL_UART_IRQHandler+0x514>
      return;
 80052de:	bf00      	nop
  }
}
 80052e0:	37e8      	adds	r7, #232	; 0xe8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop

080052e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b090      	sub	sp, #64	; 0x40
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005338:	e050      	b.n	80053dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d04c      	beq.n	80053dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <UART_WaitOnFlagUntilTimeout+0x30>
 8005348:	f7fc fbb2 	bl	8001ab0 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005354:	429a      	cmp	r2, r3
 8005356:	d241      	bcs.n	80053dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	330c      	adds	r3, #12
 8005376:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005378:	637a      	str	r2, [r7, #52]	; 0x34
 800537a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800537e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e5      	bne.n	8005358 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3314      	adds	r3, #20
 8005392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3314      	adds	r3, #20
 80053aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ac:	623a      	str	r2, [r7, #32]
 80053ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	69f9      	ldr	r1, [r7, #28]
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e00f      	b.n	80053fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	bf0c      	ite	eq
 80053ec:	2301      	moveq	r3, #1
 80053ee:	2300      	movne	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d09f      	beq.n	800533a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3740      	adds	r7, #64	; 0x40
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	4613      	mov	r3, r2
 8005410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	88fa      	ldrh	r2, [r7, #6]
 800541c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	88fa      	ldrh	r2, [r7, #6]
 8005422:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2222      	movs	r2, #34	; 0x22
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68da      	ldr	r2, [r3, #12]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005448:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695a      	ldr	r2, [r3, #20]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f042 0201 	orr.w	r2, r2, #1
 8005458:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0220 	orr.w	r2, r2, #32
 8005468:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005478:	b480      	push	{r7}
 800547a:	b095      	sub	sp, #84	; 0x54
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	330c      	adds	r3, #12
 8005486:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548a:	e853 3f00 	ldrex	r3, [r3]
 800548e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005496:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054a0:	643a      	str	r2, [r7, #64]	; 0x40
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054a8:	e841 2300 	strex	r3, r2, [r1]
 80054ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e5      	bne.n	8005480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3314      	adds	r3, #20
 80054ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f023 0301 	bic.w	r3, r3, #1
 80054ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054dc:	e841 2300 	strex	r3, r2, [r1]
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e5      	bne.n	80054b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d119      	bne.n	8005524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f023 0310 	bic.w	r3, r3, #16
 8005506:	647b      	str	r3, [r7, #68]	; 0x44
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	330c      	adds	r3, #12
 800550e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005510:	61ba      	str	r2, [r7, #24]
 8005512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6979      	ldr	r1, [r7, #20]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	613b      	str	r3, [r7, #16]
   return(result);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005532:	bf00      	nop
 8005534:	3754      	adds	r7, #84	; 0x54
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff fecf 	bl	80052fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b21      	cmp	r3, #33	; 0x21
 8005578:	d13e      	bne.n	80055f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005582:	d114      	bne.n	80055ae <UART_Transmit_IT+0x48>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d110      	bne.n	80055ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	1c9a      	adds	r2, r3, #2
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	621a      	str	r2, [r3, #32]
 80055ac:	e008      	b.n	80055c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	1c59      	adds	r1, r3, #1
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6211      	str	r1, [r2, #32]
 80055b8:	781a      	ldrb	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	3b01      	subs	r3, #1
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4619      	mov	r1, r3
 80055ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10f      	bne.n	80055f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e000      	b.n	80055fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fe5e 	bl	80052e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b08c      	sub	sp, #48	; 0x30
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b22      	cmp	r3, #34	; 0x22
 8005648:	f040 80ab 	bne.w	80057a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005654:	d117      	bne.n	8005686 <UART_Receive_IT+0x50>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d113      	bne.n	8005686 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800565e:	2300      	movs	r3, #0
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005674:	b29a      	uxth	r2, r3
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	1c9a      	adds	r2, r3, #2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	; 0x28
 8005684:	e026      	b.n	80056d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800568c:	2300      	movs	r3, #0
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d007      	beq.n	80056aa <UART_Receive_IT+0x74>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10a      	bne.n	80056b8 <UART_Receive_IT+0x82>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e008      	b.n	80056ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29b      	uxth	r3, r3
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4619      	mov	r1, r3
 80056e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d15a      	bne.n	800579e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0220 	bic.w	r2, r2, #32
 80056f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695a      	ldr	r2, [r3, #20]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0201 	bic.w	r2, r2, #1
 8005716:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	2b01      	cmp	r3, #1
 8005726:	d135      	bne.n	8005794 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	330c      	adds	r3, #12
 8005734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	613b      	str	r3, [r7, #16]
   return(result);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f023 0310 	bic.w	r3, r3, #16
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	330c      	adds	r3, #12
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	623a      	str	r2, [r7, #32]
 8005750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	69f9      	ldr	r1, [r7, #28]
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	61bb      	str	r3, [r7, #24]
   return(result);
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b10      	cmp	r3, #16
 800576e:	d10a      	bne.n	8005786 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff fdbf 	bl	8005310 <HAL_UARTEx_RxEventCallback>
 8005792:	e002      	b.n	800579a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7fc f849 	bl	800182c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e002      	b.n	80057a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	e000      	b.n	80057a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
  }
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3730      	adds	r7, #48	; 0x30
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b0:	b0c0      	sub	sp, #256	; 0x100
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	68d9      	ldr	r1, [r3, #12]
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	ea40 0301 	orr.w	r3, r0, r1
 80057d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005804:	f021 010c 	bic.w	r1, r1, #12
 8005808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005812:	430b      	orrs	r3, r1
 8005814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005826:	6999      	ldr	r1, [r3, #24]
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	ea40 0301 	orr.w	r3, r0, r1
 8005832:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	4b8f      	ldr	r3, [pc, #572]	; (8005a78 <UART_SetConfig+0x2cc>)
 800583c:	429a      	cmp	r2, r3
 800583e:	d005      	beq.n	800584c <UART_SetConfig+0xa0>
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b8d      	ldr	r3, [pc, #564]	; (8005a7c <UART_SetConfig+0x2d0>)
 8005848:	429a      	cmp	r2, r3
 800584a:	d104      	bne.n	8005856 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800584c:	f7fd ff2c 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8005850:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005854:	e003      	b.n	800585e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005856:	f7fd ff13 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 800585a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800585e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005868:	f040 810c 	bne.w	8005a84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800586c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005870:	2200      	movs	r2, #0
 8005872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005876:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800587a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800587e:	4622      	mov	r2, r4
 8005880:	462b      	mov	r3, r5
 8005882:	1891      	adds	r1, r2, r2
 8005884:	65b9      	str	r1, [r7, #88]	; 0x58
 8005886:	415b      	adcs	r3, r3
 8005888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800588a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800588e:	4621      	mov	r1, r4
 8005890:	eb12 0801 	adds.w	r8, r2, r1
 8005894:	4629      	mov	r1, r5
 8005896:	eb43 0901 	adc.w	r9, r3, r1
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ae:	4690      	mov	r8, r2
 80058b0:	4699      	mov	r9, r3
 80058b2:	4623      	mov	r3, r4
 80058b4:	eb18 0303 	adds.w	r3, r8, r3
 80058b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058bc:	462b      	mov	r3, r5
 80058be:	eb49 0303 	adc.w	r3, r9, r3
 80058c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058da:	460b      	mov	r3, r1
 80058dc:	18db      	adds	r3, r3, r3
 80058de:	653b      	str	r3, [r7, #80]	; 0x50
 80058e0:	4613      	mov	r3, r2
 80058e2:	eb42 0303 	adc.w	r3, r2, r3
 80058e6:	657b      	str	r3, [r7, #84]	; 0x54
 80058e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058f0:	f7fa fcbe 	bl	8000270 <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4b61      	ldr	r3, [pc, #388]	; (8005a80 <UART_SetConfig+0x2d4>)
 80058fa:	fba3 2302 	umull	r2, r3, r3, r2
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	011c      	lsls	r4, r3, #4
 8005902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005906:	2200      	movs	r2, #0
 8005908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800590c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005910:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005914:	4642      	mov	r2, r8
 8005916:	464b      	mov	r3, r9
 8005918:	1891      	adds	r1, r2, r2
 800591a:	64b9      	str	r1, [r7, #72]	; 0x48
 800591c:	415b      	adcs	r3, r3
 800591e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005920:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005924:	4641      	mov	r1, r8
 8005926:	eb12 0a01 	adds.w	sl, r2, r1
 800592a:	4649      	mov	r1, r9
 800592c:	eb43 0b01 	adc.w	fp, r3, r1
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800593c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005944:	4692      	mov	sl, r2
 8005946:	469b      	mov	fp, r3
 8005948:	4643      	mov	r3, r8
 800594a:	eb1a 0303 	adds.w	r3, sl, r3
 800594e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005952:	464b      	mov	r3, r9
 8005954:	eb4b 0303 	adc.w	r3, fp, r3
 8005958:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800595c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005968:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800596c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005970:	460b      	mov	r3, r1
 8005972:	18db      	adds	r3, r3, r3
 8005974:	643b      	str	r3, [r7, #64]	; 0x40
 8005976:	4613      	mov	r3, r2
 8005978:	eb42 0303 	adc.w	r3, r2, r3
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
 800597e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005982:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005986:	f7fa fc73 	bl	8000270 <__aeabi_uldivmod>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	4611      	mov	r1, r2
 8005990:	4b3b      	ldr	r3, [pc, #236]	; (8005a80 <UART_SetConfig+0x2d4>)
 8005992:	fba3 2301 	umull	r2, r3, r3, r1
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	2264      	movs	r2, #100	; 0x64
 800599a:	fb02 f303 	mul.w	r3, r2, r3
 800599e:	1acb      	subs	r3, r1, r3
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059a6:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <UART_SetConfig+0x2d4>)
 80059a8:	fba3 2302 	umull	r2, r3, r3, r2
 80059ac:	095b      	lsrs	r3, r3, #5
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059b4:	441c      	add	r4, r3
 80059b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059c8:	4642      	mov	r2, r8
 80059ca:	464b      	mov	r3, r9
 80059cc:	1891      	adds	r1, r2, r2
 80059ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80059d0:	415b      	adcs	r3, r3
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059d8:	4641      	mov	r1, r8
 80059da:	1851      	adds	r1, r2, r1
 80059dc:	6339      	str	r1, [r7, #48]	; 0x30
 80059de:	4649      	mov	r1, r9
 80059e0:	414b      	adcs	r3, r1
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059f0:	4659      	mov	r1, fp
 80059f2:	00cb      	lsls	r3, r1, #3
 80059f4:	4651      	mov	r1, sl
 80059f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fa:	4651      	mov	r1, sl
 80059fc:	00ca      	lsls	r2, r1, #3
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	4642      	mov	r2, r8
 8005a06:	189b      	adds	r3, r3, r2
 8005a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a0c:	464b      	mov	r3, r9
 8005a0e:	460a      	mov	r2, r1
 8005a10:	eb42 0303 	adc.w	r3, r2, r3
 8005a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	18db      	adds	r3, r3, r3
 8005a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a32:	4613      	mov	r3, r2
 8005a34:	eb42 0303 	adc.w	r3, r2, r3
 8005a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a42:	f7fa fc15 	bl	8000270 <__aeabi_uldivmod>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <UART_SetConfig+0x2d4>)
 8005a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a50:	095b      	lsrs	r3, r3, #5
 8005a52:	2164      	movs	r1, #100	; 0x64
 8005a54:	fb01 f303 	mul.w	r3, r1, r3
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	3332      	adds	r3, #50	; 0x32
 8005a5e:	4a08      	ldr	r2, [pc, #32]	; (8005a80 <UART_SetConfig+0x2d4>)
 8005a60:	fba2 2303 	umull	r2, r3, r2, r3
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	f003 0207 	and.w	r2, r3, #7
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4422      	add	r2, r4
 8005a72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a74:	e106      	b.n	8005c84 <UART_SetConfig+0x4d8>
 8005a76:	bf00      	nop
 8005a78:	40011000 	.word	0x40011000
 8005a7c:	40011400 	.word	0x40011400
 8005a80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a96:	4642      	mov	r2, r8
 8005a98:	464b      	mov	r3, r9
 8005a9a:	1891      	adds	r1, r2, r2
 8005a9c:	6239      	str	r1, [r7, #32]
 8005a9e:	415b      	adcs	r3, r3
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	1854      	adds	r4, r2, r1
 8005aaa:	4649      	mov	r1, r9
 8005aac:	eb43 0501 	adc.w	r5, r3, r1
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	00eb      	lsls	r3, r5, #3
 8005aba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005abe:	00e2      	lsls	r2, r4, #3
 8005ac0:	4614      	mov	r4, r2
 8005ac2:	461d      	mov	r5, r3
 8005ac4:	4643      	mov	r3, r8
 8005ac6:	18e3      	adds	r3, r4, r3
 8005ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005acc:	464b      	mov	r3, r9
 8005ace:	eb45 0303 	adc.w	r3, r5, r3
 8005ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ae2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005af2:	4629      	mov	r1, r5
 8005af4:	008b      	lsls	r3, r1, #2
 8005af6:	4621      	mov	r1, r4
 8005af8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afc:	4621      	mov	r1, r4
 8005afe:	008a      	lsls	r2, r1, #2
 8005b00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b04:	f7fa fbb4 	bl	8000270 <__aeabi_uldivmod>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	4b60      	ldr	r3, [pc, #384]	; (8005c90 <UART_SetConfig+0x4e4>)
 8005b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	011c      	lsls	r4, r3, #4
 8005b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b28:	4642      	mov	r2, r8
 8005b2a:	464b      	mov	r3, r9
 8005b2c:	1891      	adds	r1, r2, r2
 8005b2e:	61b9      	str	r1, [r7, #24]
 8005b30:	415b      	adcs	r3, r3
 8005b32:	61fb      	str	r3, [r7, #28]
 8005b34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b38:	4641      	mov	r1, r8
 8005b3a:	1851      	adds	r1, r2, r1
 8005b3c:	6139      	str	r1, [r7, #16]
 8005b3e:	4649      	mov	r1, r9
 8005b40:	414b      	adcs	r3, r1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b50:	4659      	mov	r1, fp
 8005b52:	00cb      	lsls	r3, r1, #3
 8005b54:	4651      	mov	r1, sl
 8005b56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b5a:	4651      	mov	r1, sl
 8005b5c:	00ca      	lsls	r2, r1, #3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	4642      	mov	r2, r8
 8005b66:	189b      	adds	r3, r3, r2
 8005b68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b6c:	464b      	mov	r3, r9
 8005b6e:	460a      	mov	r2, r1
 8005b70:	eb42 0303 	adc.w	r3, r2, r3
 8005b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	f04f 0300 	mov.w	r3, #0
 8005b8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b90:	4649      	mov	r1, r9
 8005b92:	008b      	lsls	r3, r1, #2
 8005b94:	4641      	mov	r1, r8
 8005b96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b9a:	4641      	mov	r1, r8
 8005b9c:	008a      	lsls	r2, r1, #2
 8005b9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ba2:	f7fa fb65 	bl	8000270 <__aeabi_uldivmod>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4611      	mov	r1, r2
 8005bac:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <UART_SetConfig+0x4e4>)
 8005bae:	fba3 2301 	umull	r2, r3, r3, r1
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	2264      	movs	r2, #100	; 0x64
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	1acb      	subs	r3, r1, r3
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	3332      	adds	r3, #50	; 0x32
 8005bc0:	4a33      	ldr	r2, [pc, #204]	; (8005c90 <UART_SetConfig+0x4e4>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bcc:	441c      	add	r4, r3
 8005bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	673b      	str	r3, [r7, #112]	; 0x70
 8005bd6:	677a      	str	r2, [r7, #116]	; 0x74
 8005bd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
 8005be0:	1891      	adds	r1, r2, r2
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	415b      	adcs	r3, r3
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bec:	4641      	mov	r1, r8
 8005bee:	1851      	adds	r1, r2, r1
 8005bf0:	6039      	str	r1, [r7, #0]
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	414b      	adcs	r3, r1
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c04:	4659      	mov	r1, fp
 8005c06:	00cb      	lsls	r3, r1, #3
 8005c08:	4651      	mov	r1, sl
 8005c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c0e:	4651      	mov	r1, sl
 8005c10:	00ca      	lsls	r2, r1, #3
 8005c12:	4610      	mov	r0, r2
 8005c14:	4619      	mov	r1, r3
 8005c16:	4603      	mov	r3, r0
 8005c18:	4642      	mov	r2, r8
 8005c1a:	189b      	adds	r3, r3, r2
 8005c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c1e:	464b      	mov	r3, r9
 8005c20:	460a      	mov	r2, r1
 8005c22:	eb42 0303 	adc.w	r3, r2, r3
 8005c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	663b      	str	r3, [r7, #96]	; 0x60
 8005c32:	667a      	str	r2, [r7, #100]	; 0x64
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	f04f 0300 	mov.w	r3, #0
 8005c3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c40:	4649      	mov	r1, r9
 8005c42:	008b      	lsls	r3, r1, #2
 8005c44:	4641      	mov	r1, r8
 8005c46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c4a:	4641      	mov	r1, r8
 8005c4c:	008a      	lsls	r2, r1, #2
 8005c4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c52:	f7fa fb0d 	bl	8000270 <__aeabi_uldivmod>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <UART_SetConfig+0x4e4>)
 8005c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	2164      	movs	r1, #100	; 0x64
 8005c64:	fb01 f303 	mul.w	r3, r1, r3
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	3332      	adds	r3, #50	; 0x32
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <UART_SetConfig+0x4e4>)
 8005c70:	fba2 2303 	umull	r2, r3, r2, r3
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	f003 020f 	and.w	r2, r3, #15
 8005c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4422      	add	r2, r4
 8005c82:	609a      	str	r2, [r3, #8]
}
 8005c84:	bf00      	nop
 8005c86:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c90:	51eb851f 	.word	0x51eb851f

08005c94 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cac:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <FSMC_NORSRAM_Init+0xa0>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005cbe:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8005cc4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8005cca:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8005cd0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8005cd6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8005cdc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8005ce2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8005ce8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8005cee:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8005cf4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8005cfa:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005d00:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d103      	bne.n	8005d18 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d16:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68f9      	ldr	r1, [r7, #12]
 8005d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	fff00080 	.word	0xfff00080

08005d38 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d52:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d5a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d66:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005d6e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005d76:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005d80:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	3b02      	subs	r3, #2
 8005d88:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005d8a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005d90:	4313      	orrs	r3, r2
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6979      	ldr	r1, [r7, #20]
 8005da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dcc:	d122      	bne.n	8005e14 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4b15      	ldr	r3, [pc, #84]	; (8005e30 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005dea:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005df2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005dfa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005e00:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6979      	ldr	r1, [r7, #20]
 8005e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005e12:	e005      	b.n	8005e20 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	cff00000 	.word	0xcff00000

08005e34 <siprintf>:
 8005e34:	b40e      	push	{r1, r2, r3}
 8005e36:	b500      	push	{lr}
 8005e38:	b09c      	sub	sp, #112	; 0x70
 8005e3a:	ab1d      	add	r3, sp, #116	; 0x74
 8005e3c:	9002      	str	r0, [sp, #8]
 8005e3e:	9006      	str	r0, [sp, #24]
 8005e40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e44:	4809      	ldr	r0, [pc, #36]	; (8005e6c <siprintf+0x38>)
 8005e46:	9107      	str	r1, [sp, #28]
 8005e48:	9104      	str	r1, [sp, #16]
 8005e4a:	4909      	ldr	r1, [pc, #36]	; (8005e70 <siprintf+0x3c>)
 8005e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e50:	9105      	str	r1, [sp, #20]
 8005e52:	6800      	ldr	r0, [r0, #0]
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	a902      	add	r1, sp, #8
 8005e58:	f000 f992 	bl	8006180 <_svfiprintf_r>
 8005e5c:	9b02      	ldr	r3, [sp, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	b01c      	add	sp, #112	; 0x70
 8005e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e68:	b003      	add	sp, #12
 8005e6a:	4770      	bx	lr
 8005e6c:	20000060 	.word	0x20000060
 8005e70:	ffff0208 	.word	0xffff0208

08005e74 <memset>:
 8005e74:	4402      	add	r2, r0
 8005e76:	4603      	mov	r3, r0
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <memset+0xa>
 8005e7c:	4770      	bx	lr
 8005e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e82:	e7f9      	b.n	8005e78 <memset+0x4>

08005e84 <__errno>:
 8005e84:	4b01      	ldr	r3, [pc, #4]	; (8005e8c <__errno+0x8>)
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20000060 	.word	0x20000060

08005e90 <__libc_init_array>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	4d0d      	ldr	r5, [pc, #52]	; (8005ec8 <__libc_init_array+0x38>)
 8005e94:	4c0d      	ldr	r4, [pc, #52]	; (8005ecc <__libc_init_array+0x3c>)
 8005e96:	1b64      	subs	r4, r4, r5
 8005e98:	10a4      	asrs	r4, r4, #2
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	42a6      	cmp	r6, r4
 8005e9e:	d109      	bne.n	8005eb4 <__libc_init_array+0x24>
 8005ea0:	4d0b      	ldr	r5, [pc, #44]	; (8005ed0 <__libc_init_array+0x40>)
 8005ea2:	4c0c      	ldr	r4, [pc, #48]	; (8005ed4 <__libc_init_array+0x44>)
 8005ea4:	f000 fc6a 	bl	800677c <_init>
 8005ea8:	1b64      	subs	r4, r4, r5
 8005eaa:	10a4      	asrs	r4, r4, #2
 8005eac:	2600      	movs	r6, #0
 8005eae:	42a6      	cmp	r6, r4
 8005eb0:	d105      	bne.n	8005ebe <__libc_init_array+0x2e>
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
 8005eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eb8:	4798      	blx	r3
 8005eba:	3601      	adds	r6, #1
 8005ebc:	e7ee      	b.n	8005e9c <__libc_init_array+0xc>
 8005ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec2:	4798      	blx	r3
 8005ec4:	3601      	adds	r6, #1
 8005ec6:	e7f2      	b.n	8005eae <__libc_init_array+0x1e>
 8005ec8:	08006804 	.word	0x08006804
 8005ecc:	08006804 	.word	0x08006804
 8005ed0:	08006804 	.word	0x08006804
 8005ed4:	08006808 	.word	0x08006808

08005ed8 <__retarget_lock_acquire_recursive>:
 8005ed8:	4770      	bx	lr

08005eda <__retarget_lock_release_recursive>:
 8005eda:	4770      	bx	lr

08005edc <_free_r>:
 8005edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ede:	2900      	cmp	r1, #0
 8005ee0:	d044      	beq.n	8005f6c <_free_r+0x90>
 8005ee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ee6:	9001      	str	r0, [sp, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f1a1 0404 	sub.w	r4, r1, #4
 8005eee:	bfb8      	it	lt
 8005ef0:	18e4      	addlt	r4, r4, r3
 8005ef2:	f000 f8df 	bl	80060b4 <__malloc_lock>
 8005ef6:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <_free_r+0x94>)
 8005ef8:	9801      	ldr	r0, [sp, #4]
 8005efa:	6813      	ldr	r3, [r2, #0]
 8005efc:	b933      	cbnz	r3, 8005f0c <_free_r+0x30>
 8005efe:	6063      	str	r3, [r4, #4]
 8005f00:	6014      	str	r4, [r2, #0]
 8005f02:	b003      	add	sp, #12
 8005f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f08:	f000 b8da 	b.w	80060c0 <__malloc_unlock>
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	d908      	bls.n	8005f22 <_free_r+0x46>
 8005f10:	6825      	ldr	r5, [r4, #0]
 8005f12:	1961      	adds	r1, r4, r5
 8005f14:	428b      	cmp	r3, r1
 8005f16:	bf01      	itttt	eq
 8005f18:	6819      	ldreq	r1, [r3, #0]
 8005f1a:	685b      	ldreq	r3, [r3, #4]
 8005f1c:	1949      	addeq	r1, r1, r5
 8005f1e:	6021      	streq	r1, [r4, #0]
 8005f20:	e7ed      	b.n	8005efe <_free_r+0x22>
 8005f22:	461a      	mov	r2, r3
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	b10b      	cbz	r3, 8005f2c <_free_r+0x50>
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	d9fa      	bls.n	8005f22 <_free_r+0x46>
 8005f2c:	6811      	ldr	r1, [r2, #0]
 8005f2e:	1855      	adds	r5, r2, r1
 8005f30:	42a5      	cmp	r5, r4
 8005f32:	d10b      	bne.n	8005f4c <_free_r+0x70>
 8005f34:	6824      	ldr	r4, [r4, #0]
 8005f36:	4421      	add	r1, r4
 8005f38:	1854      	adds	r4, r2, r1
 8005f3a:	42a3      	cmp	r3, r4
 8005f3c:	6011      	str	r1, [r2, #0]
 8005f3e:	d1e0      	bne.n	8005f02 <_free_r+0x26>
 8005f40:	681c      	ldr	r4, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	6053      	str	r3, [r2, #4]
 8005f46:	440c      	add	r4, r1
 8005f48:	6014      	str	r4, [r2, #0]
 8005f4a:	e7da      	b.n	8005f02 <_free_r+0x26>
 8005f4c:	d902      	bls.n	8005f54 <_free_r+0x78>
 8005f4e:	230c      	movs	r3, #12
 8005f50:	6003      	str	r3, [r0, #0]
 8005f52:	e7d6      	b.n	8005f02 <_free_r+0x26>
 8005f54:	6825      	ldr	r5, [r4, #0]
 8005f56:	1961      	adds	r1, r4, r5
 8005f58:	428b      	cmp	r3, r1
 8005f5a:	bf04      	itt	eq
 8005f5c:	6819      	ldreq	r1, [r3, #0]
 8005f5e:	685b      	ldreq	r3, [r3, #4]
 8005f60:	6063      	str	r3, [r4, #4]
 8005f62:	bf04      	itt	eq
 8005f64:	1949      	addeq	r1, r1, r5
 8005f66:	6021      	streq	r1, [r4, #0]
 8005f68:	6054      	str	r4, [r2, #4]
 8005f6a:	e7ca      	b.n	8005f02 <_free_r+0x26>
 8005f6c:	b003      	add	sp, #12
 8005f6e:	bd30      	pop	{r4, r5, pc}
 8005f70:	2000044c 	.word	0x2000044c

08005f74 <sbrk_aligned>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	4e0e      	ldr	r6, [pc, #56]	; (8005fb0 <sbrk_aligned+0x3c>)
 8005f78:	460c      	mov	r4, r1
 8005f7a:	6831      	ldr	r1, [r6, #0]
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	b911      	cbnz	r1, 8005f86 <sbrk_aligned+0x12>
 8005f80:	f000 fba6 	bl	80066d0 <_sbrk_r>
 8005f84:	6030      	str	r0, [r6, #0]
 8005f86:	4621      	mov	r1, r4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	f000 fba1 	bl	80066d0 <_sbrk_r>
 8005f8e:	1c43      	adds	r3, r0, #1
 8005f90:	d00a      	beq.n	8005fa8 <sbrk_aligned+0x34>
 8005f92:	1cc4      	adds	r4, r0, #3
 8005f94:	f024 0403 	bic.w	r4, r4, #3
 8005f98:	42a0      	cmp	r0, r4
 8005f9a:	d007      	beq.n	8005fac <sbrk_aligned+0x38>
 8005f9c:	1a21      	subs	r1, r4, r0
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	f000 fb96 	bl	80066d0 <_sbrk_r>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d101      	bne.n	8005fac <sbrk_aligned+0x38>
 8005fa8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fac:	4620      	mov	r0, r4
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	20000450 	.word	0x20000450

08005fb4 <_malloc_r>:
 8005fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fb8:	1ccd      	adds	r5, r1, #3
 8005fba:	f025 0503 	bic.w	r5, r5, #3
 8005fbe:	3508      	adds	r5, #8
 8005fc0:	2d0c      	cmp	r5, #12
 8005fc2:	bf38      	it	cc
 8005fc4:	250c      	movcc	r5, #12
 8005fc6:	2d00      	cmp	r5, #0
 8005fc8:	4607      	mov	r7, r0
 8005fca:	db01      	blt.n	8005fd0 <_malloc_r+0x1c>
 8005fcc:	42a9      	cmp	r1, r5
 8005fce:	d905      	bls.n	8005fdc <_malloc_r+0x28>
 8005fd0:	230c      	movs	r3, #12
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	2600      	movs	r6, #0
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060b0 <_malloc_r+0xfc>
 8005fe0:	f000 f868 	bl	80060b4 <__malloc_lock>
 8005fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fe8:	461c      	mov	r4, r3
 8005fea:	bb5c      	cbnz	r4, 8006044 <_malloc_r+0x90>
 8005fec:	4629      	mov	r1, r5
 8005fee:	4638      	mov	r0, r7
 8005ff0:	f7ff ffc0 	bl	8005f74 <sbrk_aligned>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	4604      	mov	r4, r0
 8005ff8:	d155      	bne.n	80060a6 <_malloc_r+0xf2>
 8005ffa:	f8d8 4000 	ldr.w	r4, [r8]
 8005ffe:	4626      	mov	r6, r4
 8006000:	2e00      	cmp	r6, #0
 8006002:	d145      	bne.n	8006090 <_malloc_r+0xdc>
 8006004:	2c00      	cmp	r4, #0
 8006006:	d048      	beq.n	800609a <_malloc_r+0xe6>
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	4631      	mov	r1, r6
 800600c:	4638      	mov	r0, r7
 800600e:	eb04 0903 	add.w	r9, r4, r3
 8006012:	f000 fb5d 	bl	80066d0 <_sbrk_r>
 8006016:	4581      	cmp	r9, r0
 8006018:	d13f      	bne.n	800609a <_malloc_r+0xe6>
 800601a:	6821      	ldr	r1, [r4, #0]
 800601c:	1a6d      	subs	r5, r5, r1
 800601e:	4629      	mov	r1, r5
 8006020:	4638      	mov	r0, r7
 8006022:	f7ff ffa7 	bl	8005f74 <sbrk_aligned>
 8006026:	3001      	adds	r0, #1
 8006028:	d037      	beq.n	800609a <_malloc_r+0xe6>
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	442b      	add	r3, r5
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	f8d8 3000 	ldr.w	r3, [r8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d038      	beq.n	80060aa <_malloc_r+0xf6>
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	42a2      	cmp	r2, r4
 800603c:	d12b      	bne.n	8006096 <_malloc_r+0xe2>
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
 8006042:	e00f      	b.n	8006064 <_malloc_r+0xb0>
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	1b52      	subs	r2, r2, r5
 8006048:	d41f      	bmi.n	800608a <_malloc_r+0xd6>
 800604a:	2a0b      	cmp	r2, #11
 800604c:	d917      	bls.n	800607e <_malloc_r+0xca>
 800604e:	1961      	adds	r1, r4, r5
 8006050:	42a3      	cmp	r3, r4
 8006052:	6025      	str	r5, [r4, #0]
 8006054:	bf18      	it	ne
 8006056:	6059      	strne	r1, [r3, #4]
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	bf08      	it	eq
 800605c:	f8c8 1000 	streq.w	r1, [r8]
 8006060:	5162      	str	r2, [r4, r5]
 8006062:	604b      	str	r3, [r1, #4]
 8006064:	4638      	mov	r0, r7
 8006066:	f104 060b 	add.w	r6, r4, #11
 800606a:	f000 f829 	bl	80060c0 <__malloc_unlock>
 800606e:	f026 0607 	bic.w	r6, r6, #7
 8006072:	1d23      	adds	r3, r4, #4
 8006074:	1af2      	subs	r2, r6, r3
 8006076:	d0ae      	beq.n	8005fd6 <_malloc_r+0x22>
 8006078:	1b9b      	subs	r3, r3, r6
 800607a:	50a3      	str	r3, [r4, r2]
 800607c:	e7ab      	b.n	8005fd6 <_malloc_r+0x22>
 800607e:	42a3      	cmp	r3, r4
 8006080:	6862      	ldr	r2, [r4, #4]
 8006082:	d1dd      	bne.n	8006040 <_malloc_r+0x8c>
 8006084:	f8c8 2000 	str.w	r2, [r8]
 8006088:	e7ec      	b.n	8006064 <_malloc_r+0xb0>
 800608a:	4623      	mov	r3, r4
 800608c:	6864      	ldr	r4, [r4, #4]
 800608e:	e7ac      	b.n	8005fea <_malloc_r+0x36>
 8006090:	4634      	mov	r4, r6
 8006092:	6876      	ldr	r6, [r6, #4]
 8006094:	e7b4      	b.n	8006000 <_malloc_r+0x4c>
 8006096:	4613      	mov	r3, r2
 8006098:	e7cc      	b.n	8006034 <_malloc_r+0x80>
 800609a:	230c      	movs	r3, #12
 800609c:	603b      	str	r3, [r7, #0]
 800609e:	4638      	mov	r0, r7
 80060a0:	f000 f80e 	bl	80060c0 <__malloc_unlock>
 80060a4:	e797      	b.n	8005fd6 <_malloc_r+0x22>
 80060a6:	6025      	str	r5, [r4, #0]
 80060a8:	e7dc      	b.n	8006064 <_malloc_r+0xb0>
 80060aa:	605b      	str	r3, [r3, #4]
 80060ac:	deff      	udf	#255	; 0xff
 80060ae:	bf00      	nop
 80060b0:	2000044c 	.word	0x2000044c

080060b4 <__malloc_lock>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__malloc_lock+0x8>)
 80060b6:	f7ff bf0f 	b.w	8005ed8 <__retarget_lock_acquire_recursive>
 80060ba:	bf00      	nop
 80060bc:	20000448 	.word	0x20000448

080060c0 <__malloc_unlock>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__malloc_unlock+0x8>)
 80060c2:	f7ff bf0a 	b.w	8005eda <__retarget_lock_release_recursive>
 80060c6:	bf00      	nop
 80060c8:	20000448 	.word	0x20000448

080060cc <__ssputs_r>:
 80060cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d0:	688e      	ldr	r6, [r1, #8]
 80060d2:	461f      	mov	r7, r3
 80060d4:	42be      	cmp	r6, r7
 80060d6:	680b      	ldr	r3, [r1, #0]
 80060d8:	4682      	mov	sl, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	4690      	mov	r8, r2
 80060de:	d82c      	bhi.n	800613a <__ssputs_r+0x6e>
 80060e0:	898a      	ldrh	r2, [r1, #12]
 80060e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060e6:	d026      	beq.n	8006136 <__ssputs_r+0x6a>
 80060e8:	6965      	ldr	r5, [r4, #20]
 80060ea:	6909      	ldr	r1, [r1, #16]
 80060ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060f0:	eba3 0901 	sub.w	r9, r3, r1
 80060f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060f8:	1c7b      	adds	r3, r7, #1
 80060fa:	444b      	add	r3, r9
 80060fc:	106d      	asrs	r5, r5, #1
 80060fe:	429d      	cmp	r5, r3
 8006100:	bf38      	it	cc
 8006102:	461d      	movcc	r5, r3
 8006104:	0553      	lsls	r3, r2, #21
 8006106:	d527      	bpl.n	8006158 <__ssputs_r+0x8c>
 8006108:	4629      	mov	r1, r5
 800610a:	f7ff ff53 	bl	8005fb4 <_malloc_r>
 800610e:	4606      	mov	r6, r0
 8006110:	b360      	cbz	r0, 800616c <__ssputs_r+0xa0>
 8006112:	6921      	ldr	r1, [r4, #16]
 8006114:	464a      	mov	r2, r9
 8006116:	f000 faeb 	bl	80066f0 <memcpy>
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	6126      	str	r6, [r4, #16]
 8006128:	6165      	str	r5, [r4, #20]
 800612a:	444e      	add	r6, r9
 800612c:	eba5 0509 	sub.w	r5, r5, r9
 8006130:	6026      	str	r6, [r4, #0]
 8006132:	60a5      	str	r5, [r4, #8]
 8006134:	463e      	mov	r6, r7
 8006136:	42be      	cmp	r6, r7
 8006138:	d900      	bls.n	800613c <__ssputs_r+0x70>
 800613a:	463e      	mov	r6, r7
 800613c:	6820      	ldr	r0, [r4, #0]
 800613e:	4632      	mov	r2, r6
 8006140:	4641      	mov	r1, r8
 8006142:	f000 faab 	bl	800669c <memmove>
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	1b9b      	subs	r3, r3, r6
 800614a:	60a3      	str	r3, [r4, #8]
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	4433      	add	r3, r6
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	2000      	movs	r0, #0
 8006154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006158:	462a      	mov	r2, r5
 800615a:	f000 fad7 	bl	800670c <_realloc_r>
 800615e:	4606      	mov	r6, r0
 8006160:	2800      	cmp	r0, #0
 8006162:	d1e0      	bne.n	8006126 <__ssputs_r+0x5a>
 8006164:	6921      	ldr	r1, [r4, #16]
 8006166:	4650      	mov	r0, sl
 8006168:	f7ff feb8 	bl	8005edc <_free_r>
 800616c:	230c      	movs	r3, #12
 800616e:	f8ca 3000 	str.w	r3, [sl]
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	f04f 30ff 	mov.w	r0, #4294967295
 800617e:	e7e9      	b.n	8006154 <__ssputs_r+0x88>

08006180 <_svfiprintf_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	4698      	mov	r8, r3
 8006186:	898b      	ldrh	r3, [r1, #12]
 8006188:	061b      	lsls	r3, r3, #24
 800618a:	b09d      	sub	sp, #116	; 0x74
 800618c:	4607      	mov	r7, r0
 800618e:	460d      	mov	r5, r1
 8006190:	4614      	mov	r4, r2
 8006192:	d50e      	bpl.n	80061b2 <_svfiprintf_r+0x32>
 8006194:	690b      	ldr	r3, [r1, #16]
 8006196:	b963      	cbnz	r3, 80061b2 <_svfiprintf_r+0x32>
 8006198:	2140      	movs	r1, #64	; 0x40
 800619a:	f7ff ff0b 	bl	8005fb4 <_malloc_r>
 800619e:	6028      	str	r0, [r5, #0]
 80061a0:	6128      	str	r0, [r5, #16]
 80061a2:	b920      	cbnz	r0, 80061ae <_svfiprintf_r+0x2e>
 80061a4:	230c      	movs	r3, #12
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	e0d0      	b.n	8006350 <_svfiprintf_r+0x1d0>
 80061ae:	2340      	movs	r3, #64	; 0x40
 80061b0:	616b      	str	r3, [r5, #20]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9309      	str	r3, [sp, #36]	; 0x24
 80061b6:	2320      	movs	r3, #32
 80061b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80061c0:	2330      	movs	r3, #48	; 0x30
 80061c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006368 <_svfiprintf_r+0x1e8>
 80061c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061ca:	f04f 0901 	mov.w	r9, #1
 80061ce:	4623      	mov	r3, r4
 80061d0:	469a      	mov	sl, r3
 80061d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061d6:	b10a      	cbz	r2, 80061dc <_svfiprintf_r+0x5c>
 80061d8:	2a25      	cmp	r2, #37	; 0x25
 80061da:	d1f9      	bne.n	80061d0 <_svfiprintf_r+0x50>
 80061dc:	ebba 0b04 	subs.w	fp, sl, r4
 80061e0:	d00b      	beq.n	80061fa <_svfiprintf_r+0x7a>
 80061e2:	465b      	mov	r3, fp
 80061e4:	4622      	mov	r2, r4
 80061e6:	4629      	mov	r1, r5
 80061e8:	4638      	mov	r0, r7
 80061ea:	f7ff ff6f 	bl	80060cc <__ssputs_r>
 80061ee:	3001      	adds	r0, #1
 80061f0:	f000 80a9 	beq.w	8006346 <_svfiprintf_r+0x1c6>
 80061f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f6:	445a      	add	r2, fp
 80061f8:	9209      	str	r2, [sp, #36]	; 0x24
 80061fa:	f89a 3000 	ldrb.w	r3, [sl]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80a1 	beq.w	8006346 <_svfiprintf_r+0x1c6>
 8006204:	2300      	movs	r3, #0
 8006206:	f04f 32ff 	mov.w	r2, #4294967295
 800620a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800620e:	f10a 0a01 	add.w	sl, sl, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	9307      	str	r3, [sp, #28]
 8006216:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800621a:	931a      	str	r3, [sp, #104]	; 0x68
 800621c:	4654      	mov	r4, sl
 800621e:	2205      	movs	r2, #5
 8006220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006224:	4850      	ldr	r0, [pc, #320]	; (8006368 <_svfiprintf_r+0x1e8>)
 8006226:	f7f9 ffd3 	bl	80001d0 <memchr>
 800622a:	9a04      	ldr	r2, [sp, #16]
 800622c:	b9d8      	cbnz	r0, 8006266 <_svfiprintf_r+0xe6>
 800622e:	06d0      	lsls	r0, r2, #27
 8006230:	bf44      	itt	mi
 8006232:	2320      	movmi	r3, #32
 8006234:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006238:	0711      	lsls	r1, r2, #28
 800623a:	bf44      	itt	mi
 800623c:	232b      	movmi	r3, #43	; 0x2b
 800623e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006242:	f89a 3000 	ldrb.w	r3, [sl]
 8006246:	2b2a      	cmp	r3, #42	; 0x2a
 8006248:	d015      	beq.n	8006276 <_svfiprintf_r+0xf6>
 800624a:	9a07      	ldr	r2, [sp, #28]
 800624c:	4654      	mov	r4, sl
 800624e:	2000      	movs	r0, #0
 8006250:	f04f 0c0a 	mov.w	ip, #10
 8006254:	4621      	mov	r1, r4
 8006256:	f811 3b01 	ldrb.w	r3, [r1], #1
 800625a:	3b30      	subs	r3, #48	; 0x30
 800625c:	2b09      	cmp	r3, #9
 800625e:	d94d      	bls.n	80062fc <_svfiprintf_r+0x17c>
 8006260:	b1b0      	cbz	r0, 8006290 <_svfiprintf_r+0x110>
 8006262:	9207      	str	r2, [sp, #28]
 8006264:	e014      	b.n	8006290 <_svfiprintf_r+0x110>
 8006266:	eba0 0308 	sub.w	r3, r0, r8
 800626a:	fa09 f303 	lsl.w	r3, r9, r3
 800626e:	4313      	orrs	r3, r2
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	46a2      	mov	sl, r4
 8006274:	e7d2      	b.n	800621c <_svfiprintf_r+0x9c>
 8006276:	9b03      	ldr	r3, [sp, #12]
 8006278:	1d19      	adds	r1, r3, #4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	9103      	str	r1, [sp, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	bfbb      	ittet	lt
 8006282:	425b      	neglt	r3, r3
 8006284:	f042 0202 	orrlt.w	r2, r2, #2
 8006288:	9307      	strge	r3, [sp, #28]
 800628a:	9307      	strlt	r3, [sp, #28]
 800628c:	bfb8      	it	lt
 800628e:	9204      	strlt	r2, [sp, #16]
 8006290:	7823      	ldrb	r3, [r4, #0]
 8006292:	2b2e      	cmp	r3, #46	; 0x2e
 8006294:	d10c      	bne.n	80062b0 <_svfiprintf_r+0x130>
 8006296:	7863      	ldrb	r3, [r4, #1]
 8006298:	2b2a      	cmp	r3, #42	; 0x2a
 800629a:	d134      	bne.n	8006306 <_svfiprintf_r+0x186>
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	1d1a      	adds	r2, r3, #4
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	9203      	str	r2, [sp, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bfb8      	it	lt
 80062a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80062ac:	3402      	adds	r4, #2
 80062ae:	9305      	str	r3, [sp, #20]
 80062b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006378 <_svfiprintf_r+0x1f8>
 80062b4:	7821      	ldrb	r1, [r4, #0]
 80062b6:	2203      	movs	r2, #3
 80062b8:	4650      	mov	r0, sl
 80062ba:	f7f9 ff89 	bl	80001d0 <memchr>
 80062be:	b138      	cbz	r0, 80062d0 <_svfiprintf_r+0x150>
 80062c0:	9b04      	ldr	r3, [sp, #16]
 80062c2:	eba0 000a 	sub.w	r0, r0, sl
 80062c6:	2240      	movs	r2, #64	; 0x40
 80062c8:	4082      	lsls	r2, r0
 80062ca:	4313      	orrs	r3, r2
 80062cc:	3401      	adds	r4, #1
 80062ce:	9304      	str	r3, [sp, #16]
 80062d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d4:	4825      	ldr	r0, [pc, #148]	; (800636c <_svfiprintf_r+0x1ec>)
 80062d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062da:	2206      	movs	r2, #6
 80062dc:	f7f9 ff78 	bl	80001d0 <memchr>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d038      	beq.n	8006356 <_svfiprintf_r+0x1d6>
 80062e4:	4b22      	ldr	r3, [pc, #136]	; (8006370 <_svfiprintf_r+0x1f0>)
 80062e6:	bb1b      	cbnz	r3, 8006330 <_svfiprintf_r+0x1b0>
 80062e8:	9b03      	ldr	r3, [sp, #12]
 80062ea:	3307      	adds	r3, #7
 80062ec:	f023 0307 	bic.w	r3, r3, #7
 80062f0:	3308      	adds	r3, #8
 80062f2:	9303      	str	r3, [sp, #12]
 80062f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f6:	4433      	add	r3, r6
 80062f8:	9309      	str	r3, [sp, #36]	; 0x24
 80062fa:	e768      	b.n	80061ce <_svfiprintf_r+0x4e>
 80062fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006300:	460c      	mov	r4, r1
 8006302:	2001      	movs	r0, #1
 8006304:	e7a6      	b.n	8006254 <_svfiprintf_r+0xd4>
 8006306:	2300      	movs	r3, #0
 8006308:	3401      	adds	r4, #1
 800630a:	9305      	str	r3, [sp, #20]
 800630c:	4619      	mov	r1, r3
 800630e:	f04f 0c0a 	mov.w	ip, #10
 8006312:	4620      	mov	r0, r4
 8006314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006318:	3a30      	subs	r2, #48	; 0x30
 800631a:	2a09      	cmp	r2, #9
 800631c:	d903      	bls.n	8006326 <_svfiprintf_r+0x1a6>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0c6      	beq.n	80062b0 <_svfiprintf_r+0x130>
 8006322:	9105      	str	r1, [sp, #20]
 8006324:	e7c4      	b.n	80062b0 <_svfiprintf_r+0x130>
 8006326:	fb0c 2101 	mla	r1, ip, r1, r2
 800632a:	4604      	mov	r4, r0
 800632c:	2301      	movs	r3, #1
 800632e:	e7f0      	b.n	8006312 <_svfiprintf_r+0x192>
 8006330:	ab03      	add	r3, sp, #12
 8006332:	9300      	str	r3, [sp, #0]
 8006334:	462a      	mov	r2, r5
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <_svfiprintf_r+0x1f4>)
 8006338:	a904      	add	r1, sp, #16
 800633a:	4638      	mov	r0, r7
 800633c:	f3af 8000 	nop.w
 8006340:	1c42      	adds	r2, r0, #1
 8006342:	4606      	mov	r6, r0
 8006344:	d1d6      	bne.n	80062f4 <_svfiprintf_r+0x174>
 8006346:	89ab      	ldrh	r3, [r5, #12]
 8006348:	065b      	lsls	r3, r3, #25
 800634a:	f53f af2d 	bmi.w	80061a8 <_svfiprintf_r+0x28>
 800634e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006350:	b01d      	add	sp, #116	; 0x74
 8006352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006356:	ab03      	add	r3, sp, #12
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	462a      	mov	r2, r5
 800635c:	4b05      	ldr	r3, [pc, #20]	; (8006374 <_svfiprintf_r+0x1f4>)
 800635e:	a904      	add	r1, sp, #16
 8006360:	4638      	mov	r0, r7
 8006362:	f000 f879 	bl	8006458 <_printf_i>
 8006366:	e7eb      	b.n	8006340 <_svfiprintf_r+0x1c0>
 8006368:	080067c8 	.word	0x080067c8
 800636c:	080067d2 	.word	0x080067d2
 8006370:	00000000 	.word	0x00000000
 8006374:	080060cd 	.word	0x080060cd
 8006378:	080067ce 	.word	0x080067ce

0800637c <_printf_common>:
 800637c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006380:	4616      	mov	r6, r2
 8006382:	4699      	mov	r9, r3
 8006384:	688a      	ldr	r2, [r1, #8]
 8006386:	690b      	ldr	r3, [r1, #16]
 8006388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800638c:	4293      	cmp	r3, r2
 800638e:	bfb8      	it	lt
 8006390:	4613      	movlt	r3, r2
 8006392:	6033      	str	r3, [r6, #0]
 8006394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006398:	4607      	mov	r7, r0
 800639a:	460c      	mov	r4, r1
 800639c:	b10a      	cbz	r2, 80063a2 <_printf_common+0x26>
 800639e:	3301      	adds	r3, #1
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	0699      	lsls	r1, r3, #26
 80063a6:	bf42      	ittt	mi
 80063a8:	6833      	ldrmi	r3, [r6, #0]
 80063aa:	3302      	addmi	r3, #2
 80063ac:	6033      	strmi	r3, [r6, #0]
 80063ae:	6825      	ldr	r5, [r4, #0]
 80063b0:	f015 0506 	ands.w	r5, r5, #6
 80063b4:	d106      	bne.n	80063c4 <_printf_common+0x48>
 80063b6:	f104 0a19 	add.w	sl, r4, #25
 80063ba:	68e3      	ldr	r3, [r4, #12]
 80063bc:	6832      	ldr	r2, [r6, #0]
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	42ab      	cmp	r3, r5
 80063c2:	dc26      	bgt.n	8006412 <_printf_common+0x96>
 80063c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c8:	1e13      	subs	r3, r2, #0
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	bf18      	it	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	0692      	lsls	r2, r2, #26
 80063d2:	d42b      	bmi.n	800642c <_printf_common+0xb0>
 80063d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d8:	4649      	mov	r1, r9
 80063da:	4638      	mov	r0, r7
 80063dc:	47c0      	blx	r8
 80063de:	3001      	adds	r0, #1
 80063e0:	d01e      	beq.n	8006420 <_printf_common+0xa4>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	6922      	ldr	r2, [r4, #16]
 80063e6:	f003 0306 	and.w	r3, r3, #6
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	bf02      	ittt	eq
 80063ee:	68e5      	ldreq	r5, [r4, #12]
 80063f0:	6833      	ldreq	r3, [r6, #0]
 80063f2:	1aed      	subeq	r5, r5, r3
 80063f4:	68a3      	ldr	r3, [r4, #8]
 80063f6:	bf0c      	ite	eq
 80063f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063fc:	2500      	movne	r5, #0
 80063fe:	4293      	cmp	r3, r2
 8006400:	bfc4      	itt	gt
 8006402:	1a9b      	subgt	r3, r3, r2
 8006404:	18ed      	addgt	r5, r5, r3
 8006406:	2600      	movs	r6, #0
 8006408:	341a      	adds	r4, #26
 800640a:	42b5      	cmp	r5, r6
 800640c:	d11a      	bne.n	8006444 <_printf_common+0xc8>
 800640e:	2000      	movs	r0, #0
 8006410:	e008      	b.n	8006424 <_printf_common+0xa8>
 8006412:	2301      	movs	r3, #1
 8006414:	4652      	mov	r2, sl
 8006416:	4649      	mov	r1, r9
 8006418:	4638      	mov	r0, r7
 800641a:	47c0      	blx	r8
 800641c:	3001      	adds	r0, #1
 800641e:	d103      	bne.n	8006428 <_printf_common+0xac>
 8006420:	f04f 30ff 	mov.w	r0, #4294967295
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	3501      	adds	r5, #1
 800642a:	e7c6      	b.n	80063ba <_printf_common+0x3e>
 800642c:	18e1      	adds	r1, r4, r3
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	2030      	movs	r0, #48	; 0x30
 8006432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006436:	4422      	add	r2, r4
 8006438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800643c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006440:	3302      	adds	r3, #2
 8006442:	e7c7      	b.n	80063d4 <_printf_common+0x58>
 8006444:	2301      	movs	r3, #1
 8006446:	4622      	mov	r2, r4
 8006448:	4649      	mov	r1, r9
 800644a:	4638      	mov	r0, r7
 800644c:	47c0      	blx	r8
 800644e:	3001      	adds	r0, #1
 8006450:	d0e6      	beq.n	8006420 <_printf_common+0xa4>
 8006452:	3601      	adds	r6, #1
 8006454:	e7d9      	b.n	800640a <_printf_common+0x8e>
	...

08006458 <_printf_i>:
 8006458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	7e0f      	ldrb	r7, [r1, #24]
 800645e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006460:	2f78      	cmp	r7, #120	; 0x78
 8006462:	4691      	mov	r9, r2
 8006464:	4680      	mov	r8, r0
 8006466:	460c      	mov	r4, r1
 8006468:	469a      	mov	sl, r3
 800646a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800646e:	d807      	bhi.n	8006480 <_printf_i+0x28>
 8006470:	2f62      	cmp	r7, #98	; 0x62
 8006472:	d80a      	bhi.n	800648a <_printf_i+0x32>
 8006474:	2f00      	cmp	r7, #0
 8006476:	f000 80d4 	beq.w	8006622 <_printf_i+0x1ca>
 800647a:	2f58      	cmp	r7, #88	; 0x58
 800647c:	f000 80c0 	beq.w	8006600 <_printf_i+0x1a8>
 8006480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006488:	e03a      	b.n	8006500 <_printf_i+0xa8>
 800648a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800648e:	2b15      	cmp	r3, #21
 8006490:	d8f6      	bhi.n	8006480 <_printf_i+0x28>
 8006492:	a101      	add	r1, pc, #4	; (adr r1, 8006498 <_printf_i+0x40>)
 8006494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006498:	080064f1 	.word	0x080064f1
 800649c:	08006505 	.word	0x08006505
 80064a0:	08006481 	.word	0x08006481
 80064a4:	08006481 	.word	0x08006481
 80064a8:	08006481 	.word	0x08006481
 80064ac:	08006481 	.word	0x08006481
 80064b0:	08006505 	.word	0x08006505
 80064b4:	08006481 	.word	0x08006481
 80064b8:	08006481 	.word	0x08006481
 80064bc:	08006481 	.word	0x08006481
 80064c0:	08006481 	.word	0x08006481
 80064c4:	08006609 	.word	0x08006609
 80064c8:	08006531 	.word	0x08006531
 80064cc:	080065c3 	.word	0x080065c3
 80064d0:	08006481 	.word	0x08006481
 80064d4:	08006481 	.word	0x08006481
 80064d8:	0800662b 	.word	0x0800662b
 80064dc:	08006481 	.word	0x08006481
 80064e0:	08006531 	.word	0x08006531
 80064e4:	08006481 	.word	0x08006481
 80064e8:	08006481 	.word	0x08006481
 80064ec:	080065cb 	.word	0x080065cb
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	1d1a      	adds	r2, r3, #4
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	602a      	str	r2, [r5, #0]
 80064f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006500:	2301      	movs	r3, #1
 8006502:	e09f      	b.n	8006644 <_printf_i+0x1ec>
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	0607      	lsls	r7, r0, #24
 800650a:	f103 0104 	add.w	r1, r3, #4
 800650e:	6029      	str	r1, [r5, #0]
 8006510:	d501      	bpl.n	8006516 <_printf_i+0xbe>
 8006512:	681e      	ldr	r6, [r3, #0]
 8006514:	e003      	b.n	800651e <_printf_i+0xc6>
 8006516:	0646      	lsls	r6, r0, #25
 8006518:	d5fb      	bpl.n	8006512 <_printf_i+0xba>
 800651a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800651e:	2e00      	cmp	r6, #0
 8006520:	da03      	bge.n	800652a <_printf_i+0xd2>
 8006522:	232d      	movs	r3, #45	; 0x2d
 8006524:	4276      	negs	r6, r6
 8006526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800652a:	485a      	ldr	r0, [pc, #360]	; (8006694 <_printf_i+0x23c>)
 800652c:	230a      	movs	r3, #10
 800652e:	e012      	b.n	8006556 <_printf_i+0xfe>
 8006530:	682b      	ldr	r3, [r5, #0]
 8006532:	6820      	ldr	r0, [r4, #0]
 8006534:	1d19      	adds	r1, r3, #4
 8006536:	6029      	str	r1, [r5, #0]
 8006538:	0605      	lsls	r5, r0, #24
 800653a:	d501      	bpl.n	8006540 <_printf_i+0xe8>
 800653c:	681e      	ldr	r6, [r3, #0]
 800653e:	e002      	b.n	8006546 <_printf_i+0xee>
 8006540:	0641      	lsls	r1, r0, #25
 8006542:	d5fb      	bpl.n	800653c <_printf_i+0xe4>
 8006544:	881e      	ldrh	r6, [r3, #0]
 8006546:	4853      	ldr	r0, [pc, #332]	; (8006694 <_printf_i+0x23c>)
 8006548:	2f6f      	cmp	r7, #111	; 0x6f
 800654a:	bf0c      	ite	eq
 800654c:	2308      	moveq	r3, #8
 800654e:	230a      	movne	r3, #10
 8006550:	2100      	movs	r1, #0
 8006552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006556:	6865      	ldr	r5, [r4, #4]
 8006558:	60a5      	str	r5, [r4, #8]
 800655a:	2d00      	cmp	r5, #0
 800655c:	bfa2      	ittt	ge
 800655e:	6821      	ldrge	r1, [r4, #0]
 8006560:	f021 0104 	bicge.w	r1, r1, #4
 8006564:	6021      	strge	r1, [r4, #0]
 8006566:	b90e      	cbnz	r6, 800656c <_printf_i+0x114>
 8006568:	2d00      	cmp	r5, #0
 800656a:	d04b      	beq.n	8006604 <_printf_i+0x1ac>
 800656c:	4615      	mov	r5, r2
 800656e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006572:	fb03 6711 	mls	r7, r3, r1, r6
 8006576:	5dc7      	ldrb	r7, [r0, r7]
 8006578:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800657c:	4637      	mov	r7, r6
 800657e:	42bb      	cmp	r3, r7
 8006580:	460e      	mov	r6, r1
 8006582:	d9f4      	bls.n	800656e <_printf_i+0x116>
 8006584:	2b08      	cmp	r3, #8
 8006586:	d10b      	bne.n	80065a0 <_printf_i+0x148>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	07de      	lsls	r6, r3, #31
 800658c:	d508      	bpl.n	80065a0 <_printf_i+0x148>
 800658e:	6923      	ldr	r3, [r4, #16]
 8006590:	6861      	ldr	r1, [r4, #4]
 8006592:	4299      	cmp	r1, r3
 8006594:	bfde      	ittt	le
 8006596:	2330      	movle	r3, #48	; 0x30
 8006598:	f805 3c01 	strble.w	r3, [r5, #-1]
 800659c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065a0:	1b52      	subs	r2, r2, r5
 80065a2:	6122      	str	r2, [r4, #16]
 80065a4:	f8cd a000 	str.w	sl, [sp]
 80065a8:	464b      	mov	r3, r9
 80065aa:	aa03      	add	r2, sp, #12
 80065ac:	4621      	mov	r1, r4
 80065ae:	4640      	mov	r0, r8
 80065b0:	f7ff fee4 	bl	800637c <_printf_common>
 80065b4:	3001      	adds	r0, #1
 80065b6:	d14a      	bne.n	800664e <_printf_i+0x1f6>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	b004      	add	sp, #16
 80065be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c2:	6823      	ldr	r3, [r4, #0]
 80065c4:	f043 0320 	orr.w	r3, r3, #32
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	4833      	ldr	r0, [pc, #204]	; (8006698 <_printf_i+0x240>)
 80065cc:	2778      	movs	r7, #120	; 0x78
 80065ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	6829      	ldr	r1, [r5, #0]
 80065d6:	061f      	lsls	r7, r3, #24
 80065d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80065dc:	d402      	bmi.n	80065e4 <_printf_i+0x18c>
 80065de:	065f      	lsls	r7, r3, #25
 80065e0:	bf48      	it	mi
 80065e2:	b2b6      	uxthmi	r6, r6
 80065e4:	07df      	lsls	r7, r3, #31
 80065e6:	bf48      	it	mi
 80065e8:	f043 0320 	orrmi.w	r3, r3, #32
 80065ec:	6029      	str	r1, [r5, #0]
 80065ee:	bf48      	it	mi
 80065f0:	6023      	strmi	r3, [r4, #0]
 80065f2:	b91e      	cbnz	r6, 80065fc <_printf_i+0x1a4>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	f023 0320 	bic.w	r3, r3, #32
 80065fa:	6023      	str	r3, [r4, #0]
 80065fc:	2310      	movs	r3, #16
 80065fe:	e7a7      	b.n	8006550 <_printf_i+0xf8>
 8006600:	4824      	ldr	r0, [pc, #144]	; (8006694 <_printf_i+0x23c>)
 8006602:	e7e4      	b.n	80065ce <_printf_i+0x176>
 8006604:	4615      	mov	r5, r2
 8006606:	e7bd      	b.n	8006584 <_printf_i+0x12c>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	6826      	ldr	r6, [r4, #0]
 800660c:	6961      	ldr	r1, [r4, #20]
 800660e:	1d18      	adds	r0, r3, #4
 8006610:	6028      	str	r0, [r5, #0]
 8006612:	0635      	lsls	r5, r6, #24
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	d501      	bpl.n	800661c <_printf_i+0x1c4>
 8006618:	6019      	str	r1, [r3, #0]
 800661a:	e002      	b.n	8006622 <_printf_i+0x1ca>
 800661c:	0670      	lsls	r0, r6, #25
 800661e:	d5fb      	bpl.n	8006618 <_printf_i+0x1c0>
 8006620:	8019      	strh	r1, [r3, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	4615      	mov	r5, r2
 8006628:	e7bc      	b.n	80065a4 <_printf_i+0x14c>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	602a      	str	r2, [r5, #0]
 8006630:	681d      	ldr	r5, [r3, #0]
 8006632:	6862      	ldr	r2, [r4, #4]
 8006634:	2100      	movs	r1, #0
 8006636:	4628      	mov	r0, r5
 8006638:	f7f9 fdca 	bl	80001d0 <memchr>
 800663c:	b108      	cbz	r0, 8006642 <_printf_i+0x1ea>
 800663e:	1b40      	subs	r0, r0, r5
 8006640:	6060      	str	r0, [r4, #4]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	2300      	movs	r3, #0
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664c:	e7aa      	b.n	80065a4 <_printf_i+0x14c>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	462a      	mov	r2, r5
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	47d0      	blx	sl
 8006658:	3001      	adds	r0, #1
 800665a:	d0ad      	beq.n	80065b8 <_printf_i+0x160>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	d413      	bmi.n	800668a <_printf_i+0x232>
 8006662:	68e0      	ldr	r0, [r4, #12]
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	4298      	cmp	r0, r3
 8006668:	bfb8      	it	lt
 800666a:	4618      	movlt	r0, r3
 800666c:	e7a6      	b.n	80065bc <_printf_i+0x164>
 800666e:	2301      	movs	r3, #1
 8006670:	4632      	mov	r2, r6
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d09d      	beq.n	80065b8 <_printf_i+0x160>
 800667c:	3501      	adds	r5, #1
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	9903      	ldr	r1, [sp, #12]
 8006682:	1a5b      	subs	r3, r3, r1
 8006684:	42ab      	cmp	r3, r5
 8006686:	dcf2      	bgt.n	800666e <_printf_i+0x216>
 8006688:	e7eb      	b.n	8006662 <_printf_i+0x20a>
 800668a:	2500      	movs	r5, #0
 800668c:	f104 0619 	add.w	r6, r4, #25
 8006690:	e7f5      	b.n	800667e <_printf_i+0x226>
 8006692:	bf00      	nop
 8006694:	080067d9 	.word	0x080067d9
 8006698:	080067ea 	.word	0x080067ea

0800669c <memmove>:
 800669c:	4288      	cmp	r0, r1
 800669e:	b510      	push	{r4, lr}
 80066a0:	eb01 0402 	add.w	r4, r1, r2
 80066a4:	d902      	bls.n	80066ac <memmove+0x10>
 80066a6:	4284      	cmp	r4, r0
 80066a8:	4623      	mov	r3, r4
 80066aa:	d807      	bhi.n	80066bc <memmove+0x20>
 80066ac:	1e43      	subs	r3, r0, #1
 80066ae:	42a1      	cmp	r1, r4
 80066b0:	d008      	beq.n	80066c4 <memmove+0x28>
 80066b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ba:	e7f8      	b.n	80066ae <memmove+0x12>
 80066bc:	4402      	add	r2, r0
 80066be:	4601      	mov	r1, r0
 80066c0:	428a      	cmp	r2, r1
 80066c2:	d100      	bne.n	80066c6 <memmove+0x2a>
 80066c4:	bd10      	pop	{r4, pc}
 80066c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ce:	e7f7      	b.n	80066c0 <memmove+0x24>

080066d0 <_sbrk_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4d06      	ldr	r5, [pc, #24]	; (80066ec <_sbrk_r+0x1c>)
 80066d4:	2300      	movs	r3, #0
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fa fee4 	bl	80014a8 <_sbrk>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_sbrk_r+0x1a>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_sbrk_r+0x1a>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	20000444 	.word	0x20000444

080066f0 <memcpy>:
 80066f0:	440a      	add	r2, r1
 80066f2:	4291      	cmp	r1, r2
 80066f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80066f8:	d100      	bne.n	80066fc <memcpy+0xc>
 80066fa:	4770      	bx	lr
 80066fc:	b510      	push	{r4, lr}
 80066fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006706:	4291      	cmp	r1, r2
 8006708:	d1f9      	bne.n	80066fe <memcpy+0xe>
 800670a:	bd10      	pop	{r4, pc}

0800670c <_realloc_r>:
 800670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	4680      	mov	r8, r0
 8006712:	4614      	mov	r4, r2
 8006714:	460e      	mov	r6, r1
 8006716:	b921      	cbnz	r1, 8006722 <_realloc_r+0x16>
 8006718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800671c:	4611      	mov	r1, r2
 800671e:	f7ff bc49 	b.w	8005fb4 <_malloc_r>
 8006722:	b92a      	cbnz	r2, 8006730 <_realloc_r+0x24>
 8006724:	f7ff fbda 	bl	8005edc <_free_r>
 8006728:	4625      	mov	r5, r4
 800672a:	4628      	mov	r0, r5
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	f000 f81b 	bl	800676a <_malloc_usable_size_r>
 8006734:	4284      	cmp	r4, r0
 8006736:	4607      	mov	r7, r0
 8006738:	d802      	bhi.n	8006740 <_realloc_r+0x34>
 800673a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800673e:	d812      	bhi.n	8006766 <_realloc_r+0x5a>
 8006740:	4621      	mov	r1, r4
 8006742:	4640      	mov	r0, r8
 8006744:	f7ff fc36 	bl	8005fb4 <_malloc_r>
 8006748:	4605      	mov	r5, r0
 800674a:	2800      	cmp	r0, #0
 800674c:	d0ed      	beq.n	800672a <_realloc_r+0x1e>
 800674e:	42bc      	cmp	r4, r7
 8006750:	4622      	mov	r2, r4
 8006752:	4631      	mov	r1, r6
 8006754:	bf28      	it	cs
 8006756:	463a      	movcs	r2, r7
 8006758:	f7ff ffca 	bl	80066f0 <memcpy>
 800675c:	4631      	mov	r1, r6
 800675e:	4640      	mov	r0, r8
 8006760:	f7ff fbbc 	bl	8005edc <_free_r>
 8006764:	e7e1      	b.n	800672a <_realloc_r+0x1e>
 8006766:	4635      	mov	r5, r6
 8006768:	e7df      	b.n	800672a <_realloc_r+0x1e>

0800676a <_malloc_usable_size_r>:
 800676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676e:	1f18      	subs	r0, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfbc      	itt	lt
 8006774:	580b      	ldrlt	r3, [r1, r0]
 8006776:	18c0      	addlt	r0, r0, r3
 8006778:	4770      	bx	lr
	...

0800677c <_init>:
 800677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677e:	bf00      	nop
 8006780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006782:	bc08      	pop	{r3}
 8006784:	469e      	mov	lr, r3
 8006786:	4770      	bx	lr

08006788 <_fini>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	bf00      	nop
 800678c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678e:	bc08      	pop	{r3}
 8006790:	469e      	mov	lr, r3
 8006792:	4770      	bx	lr
