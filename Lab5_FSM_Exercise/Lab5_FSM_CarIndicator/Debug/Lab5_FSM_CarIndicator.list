
Lab5_FSM_CarIndicator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000428c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ec18  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802302c  0802302c  00040014  2**0
                  CONTENTS
  4 .ARM          00000008  0802302c  0802302c  0003302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023034  08023034  00040014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023034  08023034  00033034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023038  08023038  00033038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0802303c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040014  2**0
                  CONTENTS
 10 .bss          000001a0  20000014  20000014  00040014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001b4  200001b4  00040014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00040044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ec72  00000000  00000000  00040087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b40  00000000  00000000  0004ecf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ee0  00000000  00000000  00051840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b46  00000000  00000000  00052720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000224b7  00000000  00000000  00053266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001233e  00000000  00000000  0007571d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ccfbb  00000000  00000000  00087a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003c24  00000000  00000000  00154a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0015863c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080043fc 	.word	0x080043fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080043fc 	.word	0x080043fc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	2108      	movs	r1, #8
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <button_init+0x14>)
 80004de:	f001 ffa5 	bl	800242c <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020c00 	.word	0x40020c00

080004ec <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	482f      	ldr	r0, [pc, #188]	; (80005b4 <button_scan+0xc8>)
 80004f8:	f001 ff98 	bl	800242c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	482c      	ldr	r0, [pc, #176]	; (80005b4 <button_scan+0xc8>)
 8000502:	f001 ff93 	bl	800242c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000506:	230a      	movs	r3, #10
 8000508:	2202      	movs	r2, #2
 800050a:	492b      	ldr	r1, [pc, #172]	; (80005b8 <button_scan+0xcc>)
 800050c:	482b      	ldr	r0, [pc, #172]	; (80005bc <button_scan+0xd0>)
 800050e:	f002 fdd0 	bl	80030b2 <HAL_SPI_Receive>

	int button_index = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	e03f      	b.n	80005a2 <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db06      	blt.n	8000536 <button_scan+0x4a>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	dc03      	bgt.n	8000536 <button_scan+0x4a>
			button_index = i + 4;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3304      	adds	r3, #4
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e018      	b.n	8000568 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dd07      	ble.n	800054c <button_scan+0x60>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dc04      	bgt.n	800054c <button_scan+0x60>
			button_index = 7 - i;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f1c3 0307 	rsb	r3, r3, #7
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e00d      	b.n	8000568 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b07      	cmp	r3, #7
 8000550:	dd06      	ble.n	8000560 <button_scan+0x74>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0b      	cmp	r3, #11
 8000556:	dc03      	bgt.n	8000560 <button_scan+0x74>
			button_index = i + 4;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e003      	b.n	8000568 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f1c3 0317 	rsb	r3, r3, #23
 8000566:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <button_scan+0xcc>)
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	897b      	ldrh	r3, [r7, #10]
 800056e:	4013      	ands	r3, r2
 8000570:	b29b      	uxth	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d005      	beq.n	8000582 <button_scan+0x96>
			button_count[button_index] = 0;
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <button_scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2100      	movs	r1, #0
 800057c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000580:	e009      	b.n	8000596 <button_scan+0xaa>
		else
			button_count[button_index]++;
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <button_scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	3301      	adds	r3, #1
 800058c:	b299      	uxth	r1, r3
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <button_scan+0xd4>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	085b      	lsrs	r3, r3, #1
 800059a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	ddbc      	ble.n	8000522 <button_scan+0x36>
	}
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020c00 	.word	0x40020c00
 80005b8:	20000050 	.word	0x20000050
 80005bc:	200000c8 	.word	0x200000c8
 80005c0:	20000030 	.word	0x20000030

080005c4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_FSMC_Init+0xec>)
 80005f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f8:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <MX_FSMC_Init+0xec>)
 80005fa:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <MX_FSMC_Init+0xf0>)
 80005fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_FSMC_Init+0xec>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000612:	2210      	movs	r2, #16
 8000614:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_FSMC_Init+0xec>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_FSMC_Init+0xec>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_FSMC_Init+0xec>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_FSMC_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000656:	230f      	movs	r3, #15
 8000658:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800065a:	230f      	movs	r3, #15
 800065c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800065e:	233c      	movs	r3, #60	; 0x3c
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000666:	2310      	movs	r3, #16
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800066a:	2311      	movs	r3, #17
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800066e:	2300      	movs	r3, #0
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 8000672:	2309      	movs	r3, #9
 8000674:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000676:	230f      	movs	r3, #15
 8000678:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 800067a:	2308      	movs	r3, #8
 800067c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000682:	2310      	movs	r3, #16
 8000684:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000686:	2311      	movs	r3, #17
 8000688:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800068e:	463a      	mov	r2, r7
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000698:	f003 f8ee 	bl	8003878 <HAL_SRAM_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80006a2:	f001 f8e3 	bl	800186c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a6:	bf00      	nop
 80006a8:	3738      	adds	r7, #56	; 0x38
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000054 	.word	0x20000054
 80006b4:	a0000104 	.word	0xa0000104

080006b8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <HAL_FSMC_MspInit+0x88>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d131      	bne.n	8000738 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_FSMC_MspInit+0x88>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6393      	str	r3, [r2, #56]	; 0x38
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006f6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000708:	230c      	movs	r3, #12
 800070a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <HAL_FSMC_MspInit+0x90>)
 8000712:	f001 fcef 	bl	80020f4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000716:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800071a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000728:	230c      	movs	r3, #12
 800072a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FSMC_MspInit+0x94>)
 8000732:	f001 fcdf 	bl	80020f4 <HAL_GPIO_Init>
 8000736:	e000      	b.n	800073a <HAL_FSMC_MspInit+0x82>
    return;
 8000738:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000a4 	.word	0x200000a4
 8000744:	40023800 	.word	0x40023800
 8000748:	40021000 	.word	0x40021000
 800074c:	40020c00 	.word	0x40020c00

08000750 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000758:	f7ff ffae 	bl	80006b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b63      	ldr	r3, [pc, #396]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a62      	ldr	r2, [pc, #392]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b60      	ldr	r3, [pc, #384]	; (800090c <MX_GPIO_Init+0x1a8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b5c      	ldr	r3, [pc, #368]	; (800090c <MX_GPIO_Init+0x1a8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a5b      	ldr	r2, [pc, #364]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b59      	ldr	r3, [pc, #356]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b55      	ldr	r3, [pc, #340]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a54      	ldr	r2, [pc, #336]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b52      	ldr	r3, [pc, #328]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b4e      	ldr	r3, [pc, #312]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a4d      	ldr	r2, [pc, #308]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b4b      	ldr	r3, [pc, #300]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b47      	ldr	r3, [pc, #284]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a46      	ldr	r2, [pc, #280]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b44      	ldr	r3, [pc, #272]	; (800090c <MX_GPIO_Init+0x1a8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b40      	ldr	r3, [pc, #256]	; (800090c <MX_GPIO_Init+0x1a8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a3f      	ldr	r2, [pc, #252]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b3d      	ldr	r3, [pc, #244]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a38      	ldr	r2, [pc, #224]	; (800090c <MX_GPIO_Init+0x1a8>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b36      	ldr	r3, [pc, #216]	; (800090c <MX_GPIO_Init+0x1a8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2170      	movs	r1, #112	; 0x70
 8000842:	4833      	ldr	r0, [pc, #204]	; (8000910 <MX_GPIO_Init+0x1ac>)
 8000844:	f001 fdf2 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	4831      	ldr	r0, [pc, #196]	; (8000914 <MX_GPIO_Init+0x1b0>)
 8000850:	f001 fdec 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	482f      	ldr	r0, [pc, #188]	; (8000918 <MX_GPIO_Init+0x1b4>)
 800085a:	f001 fde7 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	482d      	ldr	r0, [pc, #180]	; (800091c <MX_GPIO_Init+0x1b8>)
 8000866:	f001 fde1 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	482c      	ldr	r0, [pc, #176]	; (8000920 <MX_GPIO_Init+0x1bc>)
 8000870:	f001 fddc 	bl	800242c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000874:	2370      	movs	r3, #112	; 0x70
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4821      	ldr	r0, [pc, #132]	; (8000910 <MX_GPIO_Init+0x1ac>)
 800088c:	f001 fc32 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	481a      	ldr	r0, [pc, #104]	; (8000914 <MX_GPIO_Init+0x1b0>)
 80008aa:	f001 fc23 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4814      	ldr	r0, [pc, #80]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80008c6:	f001 fc15 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <MX_GPIO_Init+0x1b8>)
 80008e4:	f001 fc06 	bl	80020f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80008e8:	2308      	movs	r3, #8
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4808      	ldr	r0, [pc, #32]	; (8000920 <MX_GPIO_Init+0x1bc>)
 8000900:	f001 fbf8 	bl	80020f4 <HAL_GPIO_Init>

}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40021000 	.word	0x40021000
 8000914:	40020800 	.word	0x40020800
 8000918:	40021800 	.word	0x40021800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020c00 	.word	0x40020c00

08000924 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800092e:	4a04      	ldr	r2, [pc, #16]	; (8000940 <LCD_WR_REG+0x1c>)
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	8013      	strh	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	600ffffe 	.word	0x600ffffe

08000944 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <LCD_WR_DATA+0x1c>)
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	8053      	strh	r3, [r2, #2]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	600ffffe 	.word	0x600ffffe

08000964 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LCD_RD_DATA+0x20>)
 800096c:	885b      	ldrh	r3, [r3, #2]
 800096e:	b29b      	uxth	r3, r3
 8000970:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	b29b      	uxth	r3, r3
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	600ffffe 	.word	0x600ffffe

08000988 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4604      	mov	r4, r0
 8000990:	4608      	mov	r0, r1
 8000992:	4611      	mov	r1, r2
 8000994:	461a      	mov	r2, r3
 8000996:	4623      	mov	r3, r4
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	4603      	mov	r3, r0
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	807b      	strh	r3, [r7, #2]
 80009a2:	4613      	mov	r3, r2
 80009a4:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80009a6:	202a      	movs	r0, #42	; 0x2a
 80009a8:	f7ff ffbc 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff ffc6 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	b29b      	uxth	r3, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ffc0 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80009c4:	887b      	ldrh	r3, [r7, #2]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffba 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 80009d0:	887b      	ldrh	r3, [r7, #2]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ffb4 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 80009dc:	202b      	movs	r0, #43	; 0x2b
 80009de:	f7ff ffa1 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 80009e2:	88bb      	ldrh	r3, [r7, #4]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffab 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 80009ee:	88bb      	ldrh	r3, [r7, #4]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffa5 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 80009fa:	883b      	ldrh	r3, [r7, #0]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff9f 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000a06:	883b      	ldrh	r3, [r7, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff ff99 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000a12:	202c      	movs	r0, #44	; 0x2c
 8000a14:	f7ff ff86 	bl	8000924 <LCD_WR_REG>
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <lcd_clear+0x60>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <lcd_clear+0x60>)
 8000a34:	885b      	ldrh	r3, [r3, #2]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	f7ff ffa3 	bl	8000988 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	81fb      	strh	r3, [r7, #14]
 8000a46:	e011      	b.n	8000a6c <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	81bb      	strh	r3, [r7, #12]
 8000a4c:	e006      	b.n	8000a5c <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff77 	bl	8000944 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	81bb      	strh	r3, [r7, #12]
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <lcd_clear+0x60>)
 8000a5e:	885b      	ldrh	r3, [r3, #2]
 8000a60:	89ba      	ldrh	r2, [r7, #12]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d3f3      	bcc.n	8000a4e <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	81fb      	strh	r3, [r7, #14]
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <lcd_clear+0x60>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	89fa      	ldrh	r2, [r7, #14]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d3e8      	bcc.n	8000a48 <lcd_clear+0x28>
		}
	}
}
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200000a8 	.word	0x200000a8

08000a84 <lcd_fill>:
 * @param  yend	End row
 * @param  color Color to fill
 * @retval None
 */
void lcd_fill(uint16_t xsta, uint16_t ysta, uint16_t xend, uint16_t yend,
		uint16_t color) {
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	4611      	mov	r1, r2
 8000a90:	461a      	mov	r2, r3
 8000a92:	4623      	mov	r3, r4
 8000a94:	80fb      	strh	r3, [r7, #6]
 8000a96:	4603      	mov	r3, r0
 8000a98:	80bb      	strh	r3, [r7, #4]
 8000a9a:	460b      	mov	r3, r1
 8000a9c:	807b      	strh	r3, [r7, #2]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	lcd_set_address(xsta, ysta, xend - 1, yend - 1);
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	b29a      	uxth	r2, r3
 8000aa8:	883b      	ldrh	r3, [r7, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	88b9      	ldrh	r1, [r7, #4]
 8000ab0:	88f8      	ldrh	r0, [r7, #6]
 8000ab2:	f7ff ff69 	bl	8000988 <lcd_set_address>
	for (i = ysta; i < yend; i++) {
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	81fb      	strh	r3, [r7, #14]
 8000aba:	e010      	b.n	8000ade <lcd_fill+0x5a>
		for (j = xsta; j < xend; j++) {
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	81bb      	strh	r3, [r7, #12]
 8000ac0:	e006      	b.n	8000ad0 <lcd_fill+0x4c>
			LCD_WR_DATA(color);
 8000ac2:	8c3b      	ldrh	r3, [r7, #32]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff3d 	bl	8000944 <LCD_WR_DATA>
		for (j = xsta; j < xend; j++) {
 8000aca:	89bb      	ldrh	r3, [r7, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	81bb      	strh	r3, [r7, #12]
 8000ad0:	89ba      	ldrh	r2, [r7, #12]
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d3f4      	bcc.n	8000ac2 <lcd_fill+0x3e>
	for (i = ysta; i < yend; i++) {
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	3301      	adds	r3, #1
 8000adc:	81fb      	strh	r3, [r7, #14]
 8000ade:	89fa      	ldrh	r2, [r7, #14]
 8000ae0:	883b      	ldrh	r3, [r7, #0]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d3ea      	bcc.n	8000abc <lcd_fill+0x38>
		}
	}
}
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd90      	pop	{r4, r7, pc}

08000af0 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	80fb      	strh	r3, [r7, #6]
 8000afa:	460b      	mov	r3, r1
 8000afc:	80bb      	strh	r3, [r7, #4]
 8000afe:	4613      	mov	r3, r2
 8000b00:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000b02:	88bb      	ldrh	r3, [r7, #4]
 8000b04:	88fa      	ldrh	r2, [r7, #6]
 8000b06:	88b9      	ldrh	r1, [r7, #4]
 8000b08:	88f8      	ldrh	r0, [r7, #6]
 8000b0a:	f7ff ff3d 	bl	8000988 <lcd_set_address>
	LCD_WR_DATA(color);
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff17 	bl	8000944 <LCD_WR_DATA>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <lcd_show_char>:
	lcd_draw_line(x1, y2, x2, y2, color);
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4604      	mov	r4, r0
 8000b28:	4608      	mov	r0, r1
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4623      	mov	r3, r4
 8000b30:	80fb      	strh	r3, [r7, #6]
 8000b32:	4603      	mov	r3, r0
 8000b34:	80bb      	strh	r3, [r7, #4]
 8000b36:	460b      	mov	r3, r1
 8000b38:	70fb      	strb	r3, [r7, #3]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000b46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b4a:	085b      	lsrs	r3, r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4413      	add	r3, r2
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	fb12 f303 	smulbb	r3, r2, r3
 8000b76:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	3b20      	subs	r3, #32
 8000b7c:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	88fb      	ldrh	r3, [r7, #6]
 8000b84:	4413      	add	r3, r2
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	b29c      	uxth	r4, r3
 8000b8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	88b9      	ldrh	r1, [r7, #4]
 8000b9e:	88f8      	ldrh	r0, [r7, #6]
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	f7ff fef1 	bl	8000988 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	827b      	strh	r3, [r7, #18]
 8000baa:	e07a      	b.n	8000ca2 <lcd_show_char+0x182>
		if (sizey == 12)
 8000bac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bb0:	2b0c      	cmp	r3, #12
 8000bb2:	d028      	beq.n	8000c06 <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000bb4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bb8:	2b10      	cmp	r3, #16
 8000bba:	d108      	bne.n	8000bce <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000bbc:	78fa      	ldrb	r2, [r7, #3]
 8000bbe:	8a7b      	ldrh	r3, [r7, #18]
 8000bc0:	493c      	ldr	r1, [pc, #240]	; (8000cb4 <lcd_show_char+0x194>)
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	440a      	add	r2, r1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	75fb      	strb	r3, [r7, #23]
 8000bcc:	e01b      	b.n	8000c06 <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000bce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bd2:	2b18      	cmp	r3, #24
 8000bd4:	d10b      	bne.n	8000bee <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8000bd6:	78fa      	ldrb	r2, [r7, #3]
 8000bd8:	8a79      	ldrh	r1, [r7, #18]
 8000bda:	4837      	ldr	r0, [pc, #220]	; (8000cb8 <lcd_show_char+0x198>)
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	011b      	lsls	r3, r3, #4
 8000be4:	4403      	add	r3, r0
 8000be6:	440b      	add	r3, r1
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	75fb      	strb	r3, [r7, #23]
 8000bec:	e00b      	b.n	8000c06 <lcd_show_char+0xe6>
		else if (sizey == 32)
 8000bee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bf2:	2b20      	cmp	r3, #32
 8000bf4:	d15a      	bne.n	8000cac <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	8a7b      	ldrh	r3, [r7, #18]
 8000bfa:	4930      	ldr	r1, [pc, #192]	; (8000cbc <lcd_show_char+0x19c>)
 8000bfc:	0192      	lsls	r2, r2, #6
 8000bfe:	440a      	add	r2, r1
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	75bb      	strb	r3, [r7, #22]
 8000c0a:	e044      	b.n	8000c96 <lcd_show_char+0x176>
			if (!mode) {
 8000c0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d120      	bne.n	8000c56 <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8000c14:	7dfa      	ldrb	r2, [r7, #23]
 8000c16:	7dbb      	ldrb	r3, [r7, #22]
 8000c18:	fa42 f303 	asr.w	r3, r2, r3
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d004      	beq.n	8000c2e <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8000c24:	883b      	ldrh	r3, [r7, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fe8c 	bl	8000944 <LCD_WR_DATA>
 8000c2c:	e003      	b.n	8000c36 <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe87 	bl	8000944 <LCD_WR_DATA>
				m++;
 8000c36:	7d7b      	ldrb	r3, [r7, #21]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000c3c:	7d7b      	ldrb	r3, [r7, #21]
 8000c3e:	7bfa      	ldrb	r2, [r7, #15]
 8000c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c44:	fb01 f202 	mul.w	r2, r1, r2
 8000c48:	1a9b      	subs	r3, r3, r2
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d11f      	bne.n	8000c90 <lcd_show_char+0x170>
					m = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	757b      	strb	r3, [r7, #21]
					break;
 8000c54:	e022      	b.n	8000c9c <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8000c56:	7dfa      	ldrb	r2, [r7, #23]
 8000c58:	7dbb      	ldrb	r3, [r7, #22]
 8000c5a:	fa42 f303 	asr.w	r3, r2, r3
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8000c66:	883a      	ldrh	r2, [r7, #0]
 8000c68:	88b9      	ldrh	r1, [r7, #4]
 8000c6a:	88fb      	ldrh	r3, [r7, #6]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ff3f 	bl	8000af0 <lcd_draw_point>
				x++;
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	3301      	adds	r3, #1
 8000c76:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8000c78:	88fa      	ldrh	r2, [r7, #6]
 8000c7a:	8a3b      	ldrh	r3, [r7, #16]
 8000c7c:	1ad2      	subs	r2, r2, r3
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d105      	bne.n	8000c90 <lcd_show_char+0x170>
					x = x0;
 8000c84:	8a3b      	ldrh	r3, [r7, #16]
 8000c86:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c88:	88bb      	ldrh	r3, [r7, #4]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	80bb      	strh	r3, [r7, #4]
					break;
 8000c8e:	e005      	b.n	8000c9c <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8000c90:	7dbb      	ldrb	r3, [r7, #22]
 8000c92:	3301      	adds	r3, #1
 8000c94:	75bb      	strb	r3, [r7, #22]
 8000c96:	7dbb      	ldrb	r3, [r7, #22]
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d9b7      	bls.n	8000c0c <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000c9c:	8a7b      	ldrh	r3, [r7, #18]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	827b      	strh	r3, [r7, #18]
 8000ca2:	8a7a      	ldrh	r2, [r7, #18]
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d380      	bcc.n	8000bac <lcd_show_char+0x8c>
 8000caa:	e000      	b.n	8000cae <lcd_show_char+0x18e>
			return;
 8000cac:	bf00      	nop
				}
			}
		}
	}
}
 8000cae:	371c      	adds	r7, #28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	0800443c 	.word	0x0800443c
 8000cb8:	08004a2c 	.word	0x08004a2c
 8000cbc:	08005bfc 	.word	0x08005bfc

08000cc0 <lcd_show_picture>:
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
	}
}

void lcd_show_picture(uint16_t x, uint16_t y, uint16_t length, uint16_t width,
		const uint8_t pic[]) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b087      	sub	sp, #28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	4608      	mov	r0, r1
 8000cca:	4611      	mov	r1, r2
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4623      	mov	r3, r4
 8000cd0:	80fb      	strh	r3, [r7, #6]
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80bb      	strh	r3, [r7, #4]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	807b      	strh	r3, [r7, #2]
 8000cda:	4613      	mov	r3, r2
 8000cdc:	803b      	strh	r3, [r7, #0]
	uint8_t picH, picL;
	uint16_t i, j;
	uint32_t k = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
	lcd_set_address(x, y, x + length - 1, y + width - 1);
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	3b01      	subs	r3, #1
 8000cec:	b29c      	uxth	r4, r3
 8000cee:	88ba      	ldrh	r2, [r7, #4]
 8000cf0:	883b      	ldrh	r3, [r7, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	88b9      	ldrh	r1, [r7, #4]
 8000cfc:	88f8      	ldrh	r0, [r7, #6]
 8000cfe:	4622      	mov	r2, r4
 8000d00:	f7ff fe42 	bl	8000988 <lcd_set_address>
	for (i = 0; i < length; i++) {
 8000d04:	2300      	movs	r3, #0
 8000d06:	82fb      	strh	r3, [r7, #22]
 8000d08:	e027      	b.n	8000d5a <lcd_show_picture+0x9a>
		for (j = 0; j < width; j++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	82bb      	strh	r3, [r7, #20]
 8000d0e:	e01d      	b.n	8000d4c <lcd_show_picture+0x8c>
			picH = pic[k * 2];
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	73fb      	strb	r3, [r7, #15]
			picL = pic[k * 2 + 1];
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	3301      	adds	r3, #1
 8000d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d24:	4413      	add	r3, r2
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH << 8 | picL);
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	7bbb      	ldrb	r3, [r7, #14]
 8000d32:	b21b      	sxth	r3, r3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fe02 	bl	8000944 <LCD_WR_DATA>
			k++;
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3301      	adds	r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
		for (j = 0; j < width; j++) {
 8000d46:	8abb      	ldrh	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	82bb      	strh	r3, [r7, #20]
 8000d4c:	8aba      	ldrh	r2, [r7, #20]
 8000d4e:	883b      	ldrh	r3, [r7, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d3dd      	bcc.n	8000d10 <lcd_show_picture+0x50>
	for (i = 0; i < length; i++) {
 8000d54:	8afb      	ldrh	r3, [r7, #22]
 8000d56:	3301      	adds	r3, #1
 8000d58:	82fb      	strh	r3, [r7, #22]
 8000d5a:	8afa      	ldrh	r2, [r7, #22]
 8000d5c:	887b      	ldrh	r3, [r7, #2]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3d3      	bcc.n	8000d0a <lcd_show_picture+0x4a>
		}
	}
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	371c      	adds	r7, #28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <lcd_set_direction>:

void lcd_set_direction(uint8_t dir) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	091b      	lsrs	r3, r3, #4
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <lcd_set_direction+0x44>)
 8000d88:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d8c:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <lcd_set_direction+0x44>)
 8000d90:	22f0      	movs	r2, #240	; 0xf0
 8000d92:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8000d94:	e006      	b.n	8000da4 <lcd_set_direction+0x38>
		lcddev.width = 240;
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <lcd_set_direction+0x44>)
 8000d98:	22f0      	movs	r2, #240	; 0xf0
 8000d9a:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <lcd_set_direction+0x44>)
 8000d9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000da2:	805a      	strh	r2, [r3, #2]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	200000a8 	.word	0x200000a8

08000db4 <lcd_init>:

void lcd_init(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbe:	48aa      	ldr	r0, [pc, #680]	; (8001068 <lcd_init+0x2b4>)
 8000dc0:	f001 fb34 	bl	800242c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc8:	f001 f85e 	bl	8001e88 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	48a5      	ldr	r0, [pc, #660]	; (8001068 <lcd_init+0x2b4>)
 8000dd4:	f001 fb2a 	bl	800242c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000dd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ddc:	f001 f854 	bl	8001e88 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ffc3 	bl	8000d6c <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8000de6:	20d3      	movs	r0, #211	; 0xd3
 8000de8:	f7ff fd9c 	bl	8000924 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8000dec:	f7ff fdba 	bl	8000964 <LCD_RD_DATA>
 8000df0:	4603      	mov	r3, r0
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b9d      	ldr	r3, [pc, #628]	; (800106c <lcd_init+0x2b8>)
 8000df6:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000df8:	f7ff fdb4 	bl	8000964 <LCD_RD_DATA>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b9a      	ldr	r3, [pc, #616]	; (800106c <lcd_init+0x2b8>)
 8000e02:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000e04:	f7ff fdae 	bl	8000964 <LCD_RD_DATA>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b97      	ldr	r3, [pc, #604]	; (800106c <lcd_init+0x2b8>)
 8000e0e:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8000e10:	4b96      	ldr	r3, [pc, #600]	; (800106c <lcd_init+0x2b8>)
 8000e12:	889b      	ldrh	r3, [r3, #4]
 8000e14:	021b      	lsls	r3, r3, #8
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	4b94      	ldr	r3, [pc, #592]	; (800106c <lcd_init+0x2b8>)
 8000e1a:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8000e1c:	f7ff fda2 	bl	8000964 <LCD_RD_DATA>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b91      	ldr	r3, [pc, #580]	; (800106c <lcd_init+0x2b8>)
 8000e26:	889b      	ldrh	r3, [r3, #4]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b8f      	ldr	r3, [pc, #572]	; (800106c <lcd_init+0x2b8>)
 8000e2e:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000e30:	20cf      	movs	r0, #207	; 0xcf
 8000e32:	f7ff fd77 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fd84 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000e3c:	20c1      	movs	r0, #193	; 0xc1
 8000e3e:	f7ff fd81 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000e42:	2030      	movs	r0, #48	; 0x30
 8000e44:	f7ff fd7e 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000e48:	20ed      	movs	r0, #237	; 0xed
 8000e4a:	f7ff fd6b 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000e4e:	2064      	movs	r0, #100	; 0x64
 8000e50:	f7ff fd78 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f7ff fd75 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000e5a:	2012      	movs	r0, #18
 8000e5c:	f7ff fd72 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000e60:	2081      	movs	r0, #129	; 0x81
 8000e62:	f7ff fd6f 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000e66:	20e8      	movs	r0, #232	; 0xe8
 8000e68:	f7ff fd5c 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000e6c:	2085      	movs	r0, #133	; 0x85
 8000e6e:	f7ff fd69 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000e72:	2010      	movs	r0, #16
 8000e74:	f7ff fd66 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000e78:	207a      	movs	r0, #122	; 0x7a
 8000e7a:	f7ff fd63 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000e7e:	20cb      	movs	r0, #203	; 0xcb
 8000e80:	f7ff fd50 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000e84:	2039      	movs	r0, #57	; 0x39
 8000e86:	f7ff fd5d 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000e8a:	202c      	movs	r0, #44	; 0x2c
 8000e8c:	f7ff fd5a 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fd57 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000e96:	2034      	movs	r0, #52	; 0x34
 8000e98:	f7ff fd54 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000e9c:	2002      	movs	r0, #2
 8000e9e:	f7ff fd51 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ea2:	20f7      	movs	r0, #247	; 0xf7
 8000ea4:	f7ff fd3e 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	f7ff fd4b 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000eae:	20ea      	movs	r0, #234	; 0xea
 8000eb0:	f7ff fd38 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f7ff fd45 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fd42 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000ec0:	20c0      	movs	r0, #192	; 0xc0
 8000ec2:	f7ff fd2f 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000ec6:	201b      	movs	r0, #27
 8000ec8:	f7ff fd3c 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000ecc:	20c1      	movs	r0, #193	; 0xc1
 8000ece:	f7ff fd29 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fd36 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000ed8:	20c5      	movs	r0, #197	; 0xc5
 8000eda:	f7ff fd23 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000ede:	2030      	movs	r0, #48	; 0x30
 8000ee0:	f7ff fd30 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000ee4:	2030      	movs	r0, #48	; 0x30
 8000ee6:	f7ff fd2d 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000eea:	20c7      	movs	r0, #199	; 0xc7
 8000eec:	f7ff fd1a 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000ef0:	20b7      	movs	r0, #183	; 0xb7
 8000ef2:	f7ff fd27 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000ef6:	2036      	movs	r0, #54	; 0x36
 8000ef8:	f7ff fd14 	bl	8000924 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff fd21 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000f02:	203a      	movs	r0, #58	; 0x3a
 8000f04:	f7ff fd0e 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000f08:	2055      	movs	r0, #85	; 0x55
 8000f0a:	f7ff fd1b 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000f0e:	20b1      	movs	r0, #177	; 0xb1
 8000f10:	f7ff fd08 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fd15 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000f1a:	201a      	movs	r0, #26
 8000f1c:	f7ff fd12 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000f20:	20b6      	movs	r0, #182	; 0xb6
 8000f22:	f7ff fcff 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000f26:	200a      	movs	r0, #10
 8000f28:	f7ff fd0c 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000f2c:	20a2      	movs	r0, #162	; 0xa2
 8000f2e:	f7ff fd09 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000f32:	20f2      	movs	r0, #242	; 0xf2
 8000f34:	f7ff fcf6 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f7ff fd03 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000f3e:	2026      	movs	r0, #38	; 0x26
 8000f40:	f7ff fcf0 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fcfd 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000f4a:	20e0      	movs	r0, #224	; 0xe0
 8000f4c:	f7ff fcea 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000f50:	200f      	movs	r0, #15
 8000f52:	f7ff fcf7 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000f56:	202a      	movs	r0, #42	; 0x2a
 8000f58:	f7ff fcf4 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000f5c:	2028      	movs	r0, #40	; 0x28
 8000f5e:	f7ff fcf1 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000f62:	2008      	movs	r0, #8
 8000f64:	f7ff fcee 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000f68:	200e      	movs	r0, #14
 8000f6a:	f7ff fceb 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff fce8 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000f74:	2054      	movs	r0, #84	; 0x54
 8000f76:	f7ff fce5 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000f7a:	20a9      	movs	r0, #169	; 0xa9
 8000f7c:	f7ff fce2 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000f80:	2043      	movs	r0, #67	; 0x43
 8000f82:	f7ff fcdf 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000f86:	200a      	movs	r0, #10
 8000f88:	f7ff fcdc 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000f8c:	200f      	movs	r0, #15
 8000f8e:	f7ff fcd9 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fcd6 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff fcd3 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f7ff fcd0 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fccd 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000faa:	20e1      	movs	r0, #225	; 0xe1
 8000fac:	f7ff fcba 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f7ff fcc7 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000fb6:	2015      	movs	r0, #21
 8000fb8:	f7ff fcc4 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000fbc:	2017      	movs	r0, #23
 8000fbe:	f7ff fcc1 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f7ff fcbe 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000fc8:	2011      	movs	r0, #17
 8000fca:	f7ff fcbb 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000fce:	2006      	movs	r0, #6
 8000fd0:	f7ff fcb8 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000fd4:	202b      	movs	r0, #43	; 0x2b
 8000fd6:	f7ff fcb5 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000fda:	2056      	movs	r0, #86	; 0x56
 8000fdc:	f7ff fcb2 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000fe0:	203c      	movs	r0, #60	; 0x3c
 8000fe2:	f7ff fcaf 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f7ff fcac 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000fec:	2010      	movs	r0, #16
 8000fee:	f7ff fca9 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f7ff fca6 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000ff8:	203f      	movs	r0, #63	; 0x3f
 8000ffa:	f7ff fca3 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000ffe:	203f      	movs	r0, #63	; 0x3f
 8001000:	f7ff fca0 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001004:	200f      	movs	r0, #15
 8001006:	f7ff fc9d 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800100a:	202b      	movs	r0, #43	; 0x2b
 800100c:	f7ff fc8a 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fc97 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff fc94 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff fc91 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001022:	203f      	movs	r0, #63	; 0x3f
 8001024:	f7ff fc8e 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001028:	202a      	movs	r0, #42	; 0x2a
 800102a:	f7ff fc7b 	bl	8000924 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff fc88 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fc85 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fc82 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001040:	20ef      	movs	r0, #239	; 0xef
 8001042:	f7ff fc7f 	bl	8000944 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8001046:	2011      	movs	r0, #17
 8001048:	f7ff fc6c 	bl	8000924 <LCD_WR_REG>
	HAL_Delay(120);
 800104c:	2078      	movs	r0, #120	; 0x78
 800104e:	f000 ff1b 	bl	8001e88 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8001052:	2029      	movs	r0, #41	; 0x29
 8001054:	f7ff fc66 	bl	8000924 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105e:	4804      	ldr	r0, [pc, #16]	; (8001070 <lcd_init+0x2bc>)
 8001060:	f001 f9e4 	bl	800242c <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40020800 	.word	0x40020800
 800106c:	200000a8 	.word	0x200000a8
 8001070:	40020000 	.word	0x40020000

08001074 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
	lcd_draw_point(xc + x, yc + y, c);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4413      	add	r3, r2
 800108c:	b298      	uxth	r0, r3
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	b29a      	uxth	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	8b3a      	ldrh	r2, [r7, #24]
 800109c:	4619      	mov	r1, r3
 800109e:	f7ff fd27 	bl	8000af0 <lcd_draw_point>

	lcd_draw_point(xc - x, yc + y, c);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	b298      	uxth	r0, r3
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	8b3a      	ldrh	r2, [r7, #24]
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd17 	bl	8000af0 <lcd_draw_point>

	lcd_draw_point(xc + x, yc - y, c);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	b298      	uxth	r0, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	b29b      	uxth	r3, r3
 80010da:	8b3a      	ldrh	r2, [r7, #24]
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd07 	bl	8000af0 <lcd_draw_point>

	lcd_draw_point(xc - x, yc - y, c);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	b298      	uxth	r0, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	8b3a      	ldrh	r2, [r7, #24]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fcf7 	bl	8000af0 <lcd_draw_point>

	lcd_draw_point(xc + y, yc + x, c);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	b29a      	uxth	r2, r3
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4413      	add	r3, r2
 800110c:	b298      	uxth	r0, r3
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4413      	add	r3, r2
 8001118:	b29b      	uxth	r3, r3
 800111a:	8b3a      	ldrh	r2, [r7, #24]
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fce7 	bl	8000af0 <lcd_draw_point>

	lcd_draw_point(xc - y, yc + x, c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	b29a      	uxth	r2, r3
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b29b      	uxth	r3, r3
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	b298      	uxth	r0, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	b29a      	uxth	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	b29b      	uxth	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b29b      	uxth	r3, r3
 800113a:	8b3a      	ldrh	r2, [r7, #24]
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fcd7 	bl	8000af0 <lcd_draw_point>

	lcd_draw_point(xc + y, yc - x, c);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	b29a      	uxth	r2, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b298      	uxth	r0, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	b29b      	uxth	r3, r3
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	8b3a      	ldrh	r2, [r7, #24]
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fcc7 	bl	8000af0 <lcd_draw_point>

	lcd_draw_point(xc - y, yc - x, c);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	b29a      	uxth	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	b298      	uxth	r0, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	b29b      	uxth	r3, r3
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	b29b      	uxth	r3, r3
 800117a:	8b3a      	ldrh	r2, [r7, #24]
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fcb7 	bl	8000af0 <lcd_draw_point>
}
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <lcd_draw_circle>:

void lcd_draw_circle(int xc, int yc, uint16_t c, int r, int fill)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b08a      	sub	sp, #40	; 0x28
 800118e:	af02      	add	r7, sp, #8
 8001190:	60f8      	str	r0, [r7, #12]
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4613      	mov	r3, r2
 8001198:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	f1c3 0303 	rsb	r3, r3, #3
 80011aa:	613b      	str	r3, [r7, #16]

	if (fill) {
 80011ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d04f      	beq.n	8001252 <lcd_draw_circle+0xc8>
		while (x <= y) {
 80011b2:	e029      	b.n	8001208 <lcd_draw_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00a      	b.n	80011d0 <lcd_draw_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	68b9      	ldr	r1, [r7, #8]
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f7ff ff55 	bl	8001074 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	ddf0      	ble.n	80011ba <lcd_draw_circle+0x30>

			if (d < 0) {
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da06      	bge.n	80011ec <lcd_draw_circle+0x62>
				d = d + 4 * x + 6;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	009a      	lsls	r2, r3, #2
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4413      	add	r3, r2
 80011e6:	3306      	adds	r3, #6
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	e00a      	b.n	8001202 <lcd_draw_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	009a      	lsls	r2, r3, #2
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4413      	add	r3, r2
 80011f8:	330a      	adds	r3, #10
 80011fa:	613b      	str	r3, [r7, #16]
				y--;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	3b01      	subs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	429a      	cmp	r2, r3
 800120e:	ddd1      	ble.n	80011b4 <lcd_draw_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001210:	e023      	b.n	800125a <lcd_draw_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	68b9      	ldr	r1, [r7, #8]
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f7ff ff29 	bl	8001074 <_draw_circle_8>
			if (d < 0) {
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	da06      	bge.n	8001236 <lcd_draw_circle+0xac>
				d = d + 4 * x + 6;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	009a      	lsls	r2, r3, #2
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4413      	add	r3, r2
 8001230:	3306      	adds	r3, #6
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	e00a      	b.n	800124c <lcd_draw_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	009a      	lsls	r2, r3, #2
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4413      	add	r3, r2
 8001242:	330a      	adds	r3, #10
 8001244:	613b      	str	r3, [r7, #16]
				y--;
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	3b01      	subs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
			x++;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	3301      	adds	r3, #1
 8001250:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	429a      	cmp	r2, r3
 8001258:	dddb      	ble.n	8001212 <lcd_draw_circle+0x88>
}
 800125a:	bf00      	nop
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <lcd_show_string>:

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b08b      	sub	sp, #44	; 0x2c
 8001268:	af04      	add	r7, sp, #16
 800126a:	60ba      	str	r2, [r7, #8]
 800126c:	461a      	mov	r2, r3
 800126e:	4603      	mov	r3, r0
 8001270:	81fb      	strh	r3, [r7, #14]
 8001272:	460b      	mov	r3, r1
 8001274:	81bb      	strh	r3, [r7, #12]
 8001276:	4613      	mov	r3, r2
 8001278:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 8001282:	e048      	b.n	8001316 <lcd_show_string+0xb2>
		if (!bHz) {
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d145      	bne.n	8001316 <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <lcd_show_string+0xc4>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	1acb      	subs	r3, r1, r3
 800129c:	429a      	cmp	r2, r3
 800129e:	dc3f      	bgt.n	8001320 <lcd_show_string+0xbc>
 80012a0:	89ba      	ldrh	r2, [r7, #12]
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <lcd_show_string+0xc4>)
 80012a4:	885b      	ldrh	r3, [r3, #2]
 80012a6:	4619      	mov	r1, r3
 80012a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012ac:	1acb      	subs	r3, r1, r3
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dc36      	bgt.n	8001320 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b80      	cmp	r3, #128	; 0x80
 80012b8:	d902      	bls.n	80012c0 <lcd_show_string+0x5c>
				bHz = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
 80012be:	e02a      	b.n	8001316 <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b0d      	cmp	r3, #13
 80012c6:	d10b      	bne.n	80012e0 <lcd_show_string+0x7c>
					y += sizey;
 80012c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80012d4:	8abb      	ldrh	r3, [r7, #20]
 80012d6:	81fb      	strh	r3, [r7, #14]
					str++;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3301      	adds	r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	e017      	b.n	8001310 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	88fc      	ldrh	r4, [r7, #6]
 80012e6:	89b9      	ldrh	r1, [r7, #12]
 80012e8:	89f8      	ldrh	r0, [r7, #14]
 80012ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	4623      	mov	r3, r4
 80012fc:	f7ff fc10 	bl	8000b20 <lcd_show_char>
					x += sizey / 2;
 8001300:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	b2db      	uxtb	r3, r3
 8001308:	b29a      	uxth	r2, r3
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4413      	add	r3, r2
 800130e:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3301      	adds	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1b2      	bne.n	8001284 <lcd_show_string+0x20>
 800131e:	e000      	b.n	8001322 <lcd_show_string+0xbe>
				return;
 8001320:	bf00      	nop
			}
		}
	}
}
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	200000a8 	.word	0x200000a8

0800132c <lcd_show_string_center>:

void lcd_show_string_center(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	; 0x28
 8001330:	af04      	add	r7, sp, #16
 8001332:	60ba      	str	r2, [r7, #8]
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	81fb      	strh	r3, [r7, #14]
 800133a:	460b      	mov	r3, r1
 800133c:	81bb      	strh	r3, [r7, #12]
 800133e:	4613      	mov	r3, r2
 8001340:	80fb      	strh	r3, [r7, #6]
	uint16_t len = strlen((const char*) str);
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	f7fe ff40 	bl	80001c8 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = (lcddev.width - len * 8) / 2;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <lcd_show_string_center+0x60>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	0fda      	lsrs	r2, r3, #31
 800135a:	4413      	add	r3, r2
 800135c:	105b      	asrs	r3, r3, #1
 800135e:	82bb      	strh	r3, [r7, #20]
	lcd_show_string(x + x1, y, str, fc, bc, sizey, mode);
 8001360:	89fa      	ldrh	r2, [r7, #14]
 8001362:	8abb      	ldrh	r3, [r7, #20]
 8001364:	4413      	add	r3, r2
 8001366:	b298      	uxth	r0, r3
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	89b9      	ldrh	r1, [r7, #12]
 800136c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	8c3b      	ldrh	r3, [r7, #32]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f7ff ff70 	bl	8001264 <lcd_show_string>
}
 8001384:	bf00      	nop
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000a8 	.word	0x200000a8

08001390 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001394:	2201      	movs	r2, #1
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <led_7seg_init+0x14>)
 800139a:	f001 f847 	bl	800242c <HAL_GPIO_WritePin>
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021800 	.word	0x40021800

080013a8 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <led_7seg_display+0x104>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b3d      	ldr	r3, [pc, #244]	; (80014ac <led_7seg_display+0x104>)
 80013b6:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <led_7seg_display+0x108>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <led_7seg_display+0x10c>)
 80013c0:	5c9b      	ldrb	r3, [r3, r2]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b39      	ldr	r3, [pc, #228]	; (80014ac <led_7seg_display+0x104>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <led_7seg_display+0x104>)
 80013d4:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 80013d6:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <led_7seg_display+0x108>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d846      	bhi.n	800146c <led_7seg_display+0xc4>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <led_7seg_display+0x3c>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	08001413 	.word	0x08001413
 80013ec:	08001431 	.word	0x08001431
 80013f0:	0800144f 	.word	0x0800144f
	case 0:
		spi_buffer |= 0x00b0;
 80013f4:	4b2d      	ldr	r3, [pc, #180]	; (80014ac <led_7seg_display+0x104>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <led_7seg_display+0x104>)
 8001400:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 8001402:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <led_7seg_display+0x104>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800140a:	b29a      	uxth	r2, r3
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <led_7seg_display+0x104>)
 800140e:	801a      	strh	r2, [r3, #0]
		break;
 8001410:	e02d      	b.n	800146e <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <led_7seg_display+0x104>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <led_7seg_display+0x104>)
 800141e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <led_7seg_display+0x104>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	f023 0320 	bic.w	r3, r3, #32
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b20      	ldr	r3, [pc, #128]	; (80014ac <led_7seg_display+0x104>)
 800142c:	801a      	strh	r2, [r3, #0]
		break;
 800142e:	e01e      	b.n	800146e <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <led_7seg_display+0x104>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <led_7seg_display+0x104>)
 800143c:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <led_7seg_display+0x104>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	f023 0310 	bic.w	r3, r3, #16
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <led_7seg_display+0x104>)
 800144a:	801a      	strh	r2, [r3, #0]
		break;
 800144c:	e00f      	b.n	800146e <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <led_7seg_display+0x104>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001456:	b29a      	uxth	r2, r3
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <led_7seg_display+0x104>)
 800145a:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <led_7seg_display+0x104>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <led_7seg_display+0x104>)
 8001468:	801a      	strh	r2, [r3, #0]
		break;
 800146a:	e000      	b.n	800146e <led_7seg_display+0xc6>
	default:
		break;
 800146c:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <led_7seg_display+0x108>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	425a      	negs	r2, r3
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	f002 0203 	and.w	r2, r2, #3
 800147e:	bf58      	it	pl
 8001480:	4253      	negpl	r3, r2
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <led_7seg_display+0x108>)
 8001486:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <led_7seg_display+0x110>)
 800148e:	f000 ffcd 	bl	800242c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 8001492:	2301      	movs	r3, #1
 8001494:	2202      	movs	r2, #2
 8001496:	4905      	ldr	r1, [pc, #20]	; (80014ac <led_7seg_display+0x104>)
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <led_7seg_display+0x114>)
 800149a:	f001 fcce 	bl	8002e3a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800149e:	2201      	movs	r2, #1
 80014a0:	2140      	movs	r1, #64	; 0x40
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <led_7seg_display+0x110>)
 80014a4:	f000 ffc2 	bl	800242c <HAL_GPIO_WritePin>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000004 	.word	0x20000004
 80014b0:	200000ae 	.word	0x200000ae
 80014b4:	20000000 	.word	0x20000000
 80014b8:	40021800 	.word	0x40021800
 80014bc:	200000c8 	.word	0x200000c8

080014c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014c4:	f000 fc6e 	bl	8001da4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014c8:	f000 f81c 	bl	8001504 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014cc:	f7ff f94a 	bl	8000764 <MX_GPIO_Init>
	MX_TIM2_Init();
 80014d0:	f000 fb60 	bl	8001b94 <MX_TIM2_Init>
	MX_SPI1_Init();
 80014d4:	f000 fa68 	bl	80019a8 <MX_SPI1_Init>
	MX_FSMC_Init();
 80014d8:	f7ff f874 	bl	80005c4 <MX_FSMC_Init>
	MX_TIM4_Init();
 80014dc:	f000 fba6 	bl	8001c2c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	system_init();
 80014e0:	f000 f87a 	bl	80015d8 <system_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (!timer2_flag);
 80014e4:	bf00      	nop
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <main+0x40>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0fb      	beq.n	80014e6 <main+0x26>
		timer2_flag = 0;
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <main+0x40>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
		button_scan();
 80014f4:	f7fe fffa 	bl	80004ec <button_scan>
		appIndicator();
 80014f8:	f000 f8d4 	bl	80016a4 <appIndicator>
		while (!timer2_flag);
 80014fc:	e7f2      	b.n	80014e4 <main+0x24>
 80014fe:	bf00      	nop
 8001500:	200000bc 	.word	0x200000bc

08001504 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b094      	sub	sp, #80	; 0x50
 8001508:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	2230      	movs	r2, #48	; 0x30
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f002 ff46 	bl	80043a4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <SystemClock_Config+0xcc>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a27      	ldr	r2, [pc, #156]	; (80015d0 <SystemClock_Config+0xcc>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <SystemClock_Config+0xcc>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <SystemClock_Config+0xd0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <SystemClock_Config+0xd0>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <SystemClock_Config+0xd0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001560:	2301      	movs	r3, #1
 8001562:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001578:	23a8      	movs	r3, #168	; 0xa8
 800157a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800157c:	2302      	movs	r3, #2
 800157e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001580:	2304      	movs	r3, #4
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	4618      	mov	r0, r3
 800158a:	f000 ff69 	bl	8002460 <HAL_RCC_OscConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0x94>
		Error_Handler();
 8001594:	f000 f96a 	bl	800186c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001598:	230f      	movs	r3, #15
 800159a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2105      	movs	r1, #5
 80015b6:	4618      	mov	r0, r3
 80015b8:	f001 f9ca 	bl	8002950 <HAL_RCC_ClockConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xc2>
		Error_Handler();
 80015c2:	f000 f953 	bl	800186c <Error_Handler>
	}
}
 80015c6:	bf00      	nop
 80015c8:	3750      	adds	r7, #80	; 0x50
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40007000 	.word	0x40007000

080015d8 <system_init>:

/* USER CODE BEGIN 4 */
void system_init() {
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2120      	movs	r1, #32
 80015e0:	4811      	ldr	r0, [pc, #68]	; (8001628 <system_init+0x50>)
 80015e2:	f000 ff23 	bl	800242c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2140      	movs	r1, #64	; 0x40
 80015ea:	480f      	ldr	r0, [pc, #60]	; (8001628 <system_init+0x50>)
 80015ec:	f000 ff1e 	bl	800242c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2110      	movs	r1, #16
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <system_init+0x50>)
 80015f6:	f000 ff19 	bl	800242c <HAL_GPIO_WritePin>

	led_7seg_init();
 80015fa:	f7ff fec9 	bl	8001390 <led_7seg_init>
	button_init();
 80015fe:	f7fe ff69 	bl	80004d4 <button_init>
	lcd_init();
 8001602:	f7ff fbd7 	bl	8000db4 <lcd_init>

	timer2_init();
 8001606:	f000 f937 	bl	8001878 <timer2_init>
	timer2_set(50);
 800160a:	2032      	movs	r0, #50	; 0x32
 800160c:	f000 f948 	bl	80018a0 <timer2_set>
	timer4_init();
 8001610:	f000 f93c 	bl	800188c <timer4_init>
	timer4_set(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f000 f95f 	bl	80018d8 <timer4_set>

	HAL_Delay(1000);
 800161a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161e:	f000 fc33 	bl	8001e88 <HAL_Delay>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000

0800162c <leftIndicatorOn>:

void leftIndicatorOn(){
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af02      	add	r7, sp, #8
	lcd_draw_circle(54, 195, YELLOW, 14, 1);
 8001632:	2301      	movs	r3, #1
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	230e      	movs	r3, #14
 8001638:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800163c:	21c3      	movs	r1, #195	; 0xc3
 800163e:	2036      	movs	r0, #54	; 0x36
 8001640:	f7ff fda3 	bl	800118a <lcd_draw_circle>
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <leftIndicatorOff>:
void leftIndicatorOff(){
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af02      	add	r7, sp, #8
	lcd_draw_circle(54, 195, GRAY, 14, 1);
 8001650:	2301      	movs	r3, #1
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	230e      	movs	r3, #14
 8001656:	f248 4230 	movw	r2, #33840	; 0x8430
 800165a:	21c3      	movs	r1, #195	; 0xc3
 800165c:	2036      	movs	r0, #54	; 0x36
 800165e:	f7ff fd94 	bl	800118a <lcd_draw_circle>
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <rightIndicatorOn>:
void rightIndicatorOn(){
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af02      	add	r7, sp, #8
	lcd_draw_circle(194, 196, YELLOW, 14, 1);
 800166e:	2301      	movs	r3, #1
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	230e      	movs	r3, #14
 8001674:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001678:	21c4      	movs	r1, #196	; 0xc4
 800167a:	20c2      	movs	r0, #194	; 0xc2
 800167c:	f7ff fd85 	bl	800118a <lcd_draw_circle>
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <rightIndicatorOff>:
void rightIndicatorOff(){
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af02      	add	r7, sp, #8
	lcd_draw_circle(194, 196, GRAY, 14, 1);
 800168c:	2301      	movs	r3, #1
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	230e      	movs	r3, #14
 8001692:	f248 4230 	movw	r2, #33840	; 0x8430
 8001696:	21c4      	movs	r1, #196	; 0xc4
 8001698:	20c2      	movs	r0, #194	; 0xc2
 800169a:	f7ff fd76 	bl	800118a <lcd_draw_circle>
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <appIndicator>:

void appIndicator()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af04      	add	r7, sp, #16
    cntOfIndicator = (cntOfIndicator + 1)%20;
 80016aa:	4b66      	ldr	r3, [pc, #408]	; (8001844 <appIndicator+0x1a0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	1c59      	adds	r1, r3, #1
 80016b0:	4b65      	ldr	r3, [pc, #404]	; (8001848 <appIndicator+0x1a4>)
 80016b2:	fb83 2301 	smull	r2, r3, r3, r1
 80016b6:	10da      	asrs	r2, r3, #3
 80016b8:	17cb      	asrs	r3, r1, #31
 80016ba:	1ad2      	subs	r2, r2, r3
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	1aca      	subs	r2, r1, r3
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <appIndicator+0x1a0>)
 80016c8:	601a      	str	r2, [r3, #0]
    if (cntOfIndicator == 0){
 80016ca:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <appIndicator+0x1a0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10a      	bne.n	80016e8 <appIndicator+0x44>
    	//every 1s
    	if(flag_blink == 0){
 80016d2:	4b5e      	ldr	r3, [pc, #376]	; (800184c <appIndicator+0x1a8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <appIndicator+0x3e>
    		flag_blink = 1;
 80016da:	4b5c      	ldr	r3, [pc, #368]	; (800184c <appIndicator+0x1a8>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e002      	b.n	80016e8 <appIndicator+0x44>
    	} else {
    		flag_blink = 0;
 80016e2:	4b5a      	ldr	r3, [pc, #360]	; (800184c <appIndicator+0x1a8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
    	}
    }

    switch (statusOfIndicator)
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <appIndicator+0x1ac>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	f200 809d 	bhi.w	800182c <appIndicator+0x188>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <appIndicator+0x54>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001709 	.word	0x08001709
 80016fc:	08001767 	.word	0x08001767
 8001700:	080017eb 	.word	0x080017eb
 8001704:	080017a9 	.word	0x080017a9
    {
		case INIT:
			lcd_clear(WHITE);
 8001708:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800170c:	f7ff f988 	bl	8000a20 <lcd_clear>
			lcd_fill(0, 0, 240, 20, BLUE);
 8001710:	231f      	movs	r3, #31
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2314      	movs	r3, #20
 8001716:	22f0      	movs	r2, #240	; 0xf0
 8001718:	2100      	movs	r1, #0
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff f9b2 	bl	8000a84 <lcd_fill>
			lcd_show_string_center(0, 0, "Car Indicator", WHITE, BLUE, 16, 0);
 8001720:	2300      	movs	r3, #0
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2310      	movs	r3, #16
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	231f      	movs	r3, #31
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001730:	4a48      	ldr	r2, [pc, #288]	; (8001854 <appIndicator+0x1b0>)
 8001732:	2100      	movs	r1, #0
 8001734:	2000      	movs	r0, #0
 8001736:	f7ff fdf9 	bl	800132c <lcd_show_string_center>
			lcd_fill(0, 300, 240, 320, BLUE);
 800173a:	231f      	movs	r3, #31
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001742:	22f0      	movs	r2, #240	; 0xf0
 8001744:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001748:	2000      	movs	r0, #0
 800174a:	f7ff f99b 	bl	8000a84 <lcd_fill>
			lcd_show_picture(0, 30, 240, 237, gImage_background);
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <appIndicator+0x1b4>)
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	23ed      	movs	r3, #237	; 0xed
 8001754:	22f0      	movs	r2, #240	; 0xf0
 8001756:	211e      	movs	r1, #30
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fab1 	bl	8000cc0 <lcd_show_picture>

//			timeOfLight = timeOfGreenPhase1;
			statusOfIndicator = OFF;
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <appIndicator+0x1ac>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]
			break;
 8001764:	e06b      	b.n	800183e <appIndicator+0x19a>
		case OFF:
			lcd_show_string_center(0, 302, " OFF ", WHITE, BLUE, 16, 0);
 8001766:	2300      	movs	r3, #0
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2310      	movs	r3, #16
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	231f      	movs	r3, #31
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001776:	4a39      	ldr	r2, [pc, #228]	; (800185c <appIndicator+0x1b8>)
 8001778:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff fdd5 	bl	800132c <lcd_show_string_center>

			leftIndicatorOff();
 8001782:	f7ff ff62 	bl	800164a <leftIndicatorOff>
			rightIndicatorOff();
 8001786:	f7ff ff7e 	bl	8001686 <rightIndicatorOff>

			if(button_count[11] == 1){
 800178a:	4b35      	ldr	r3, [pc, #212]	; (8001860 <appIndicator+0x1bc>)
 800178c:	8adb      	ldrh	r3, [r3, #22]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d102      	bne.n	8001798 <appIndicator+0xf4>
				statusOfIndicator = RIGHT;
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <appIndicator+0x1ac>)
 8001794:	2203      	movs	r2, #3
 8001796:	601a      	str	r2, [r3, #0]
			}

			if(button_count[15] == 1){
 8001798:	4b31      	ldr	r3, [pc, #196]	; (8001860 <appIndicator+0x1bc>)
 800179a:	8bdb      	ldrh	r3, [r3, #30]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d149      	bne.n	8001834 <appIndicator+0x190>
				statusOfIndicator = LEFT;
 80017a0:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <appIndicator+0x1ac>)
 80017a2:	2202      	movs	r2, #2
 80017a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80017a6:	e045      	b.n	8001834 <appIndicator+0x190>
		case RIGHT:
			lcd_show_string_center(0, 302, "RIGHT", WHITE, BLUE, 16, 0);
 80017a8:	2300      	movs	r3, #0
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	2310      	movs	r3, #16
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	231f      	movs	r3, #31
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b8:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <appIndicator+0x1c0>)
 80017ba:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fdb4 	bl	800132c <lcd_show_string_center>

			leftIndicatorOff();
 80017c4:	f7ff ff41 	bl	800164a <leftIndicatorOff>

			if(flag_blink == 1){
 80017c8:	4b20      	ldr	r3, [pc, #128]	; (800184c <appIndicator+0x1a8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d102      	bne.n	80017d6 <appIndicator+0x132>
				rightIndicatorOn();
 80017d0:	f7ff ff4a 	bl	8001668 <rightIndicatorOn>
 80017d4:	e001      	b.n	80017da <appIndicator+0x136>
			} else {
				rightIndicatorOff();
 80017d6:	f7ff ff56 	bl	8001686 <rightIndicatorOff>
			}

			if(button_count[15] == 1){
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <appIndicator+0x1bc>)
 80017dc:	8bdb      	ldrh	r3, [r3, #30]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d12a      	bne.n	8001838 <appIndicator+0x194>
				statusOfIndicator = OFF;
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <appIndicator+0x1ac>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]
			}
			break;
 80017e8:	e026      	b.n	8001838 <appIndicator+0x194>
		case LEFT:
			lcd_show_string_center(0, 302, "LEFT ", WHITE, BLUE, 16, 0);
 80017ea:	2300      	movs	r3, #0
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	2310      	movs	r3, #16
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	231f      	movs	r3, #31
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fa:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <appIndicator+0x1c4>)
 80017fc:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001800:	2000      	movs	r0, #0
 8001802:	f7ff fd93 	bl	800132c <lcd_show_string_center>

			if(flag_blink == 1){
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <appIndicator+0x1a8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d102      	bne.n	8001814 <appIndicator+0x170>
				leftIndicatorOn();
 800180e:	f7ff ff0d 	bl	800162c <leftIndicatorOn>
 8001812:	e001      	b.n	8001818 <appIndicator+0x174>
			} else {
				leftIndicatorOff();
 8001814:	f7ff ff19 	bl	800164a <leftIndicatorOff>
			}


			rightIndicatorOff();
 8001818:	f7ff ff35 	bl	8001686 <rightIndicatorOff>

			if(button_count[11] == 1){
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <appIndicator+0x1bc>)
 800181e:	8adb      	ldrh	r3, [r3, #22]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d10b      	bne.n	800183c <appIndicator+0x198>
				statusOfIndicator = OFF;
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <appIndicator+0x1ac>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]
			}
			break;
 800182a:	e007      	b.n	800183c <appIndicator+0x198>
        default:
            statusOfIndicator = INIT;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <appIndicator+0x1ac>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
            break;
 8001832:	e004      	b.n	800183e <appIndicator+0x19a>
			break;
 8001834:	bf00      	nop
 8001836:	e002      	b.n	800183e <appIndicator+0x19a>
			break;
 8001838:	bf00      	nop
 800183a:	e000      	b.n	800183e <appIndicator+0x19a>
			break;
 800183c:	bf00      	nop
    }
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200000b4 	.word	0x200000b4
 8001848:	66666667 	.word	0x66666667
 800184c:	200000b0 	.word	0x200000b0
 8001850:	200000b8 	.word	0x200000b8
 8001854:	08004414 	.word	0x08004414
 8001858:	080073bc 	.word	0x080073bc
 800185c:	08004424 	.word	0x08004424
 8001860:	20000030 	.word	0x20000030
 8001864:	0800442c 	.word	0x0800442c
 8001868:	08004434 	.word	0x08004434

0800186c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001874:	e7fe      	b.n	8001874 <Error_Handler+0x8>
	...

08001878 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <timer2_init+0x10>)
 800187e:	f002 f88f 	bl	80039a0 <HAL_TIM_Base_Start_IT>
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000120 	.word	0x20000120

0800188c <timer4_init>:

void timer4_init(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <timer4_init+0x10>)
 8001892:	f002 f885 	bl	80039a0 <HAL_TIM_Base_Start_IT>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000168 	.word	0x20000168

080018a0 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <timer2_set+0x2c>)
 80018ae:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <timer2_set+0x2c>)
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <timer2_set+0x30>)
 80018b6:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <timer2_set+0x34>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200000c0 	.word	0x200000c0
 80018d0:	200000be 	.word	0x200000be
 80018d4:	200000bc 	.word	0x200000bc

080018d8 <timer4_set>:

void timer4_set(int ms) {
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	timer4_mul = ms / TIMER_CYCLE_4;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <timer4_set+0x2c>)
 80018e6:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_mul;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <timer4_set+0x2c>)
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <timer4_set+0x30>)
 80018ee:	801a      	strh	r2, [r3, #0]
	timer4_flag = 0;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <timer4_set+0x34>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200000c6 	.word	0x200000c6
 8001908:	200000c4 	.word	0x200000c4
 800190c:	200000c2 	.word	0x200000c2

08001910 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d114      	bne.n	800194c <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001934:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800194a:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d116      	bne.n	8001984 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d010      	beq.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001968:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d106      	bne.n	8001980 <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800197e:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 8001980:	f7ff fd12 	bl	80013a8 <led_7seg_display>
	}
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200000be 	.word	0x200000be
 8001990:	200000bc 	.word	0x200000bc
 8001994:	200000c0 	.word	0x200000c0
 8001998:	40000800 	.word	0x40000800
 800199c:	200000c4 	.word	0x200000c4
 80019a0:	200000c2 	.word	0x200000c2
 80019a4:	200000c6 	.word	0x200000c6

080019a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019ae:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <MX_SPI1_Init+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019f4:	220a      	movs	r2, #10
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019fa:	f001 f995 	bl	8002d28 <HAL_SPI_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a04:	f7ff ff32 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200000c8 	.word	0x200000c8
 8001a10:	40013000 	.word	0x40013000

08001a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_SPI_MspInit+0x84>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12b      	bne.n	8001a8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a6e:	2338      	movs	r3, #56	; 0x38
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7e:	2305      	movs	r3, #5
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_SPI_MspInit+0x8c>)
 8001a8a:	f000 fb33 	bl	80020f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013000 	.word	0x40013000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f982 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM2_IRQHandler+0x10>)
 8001b4e:	f001 ff97 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000120 	.word	0x20000120

08001b5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b60:	4802      	ldr	r0, [pc, #8]	; (8001b6c <TIM4_IRQHandler+0x10>)
 8001b62:	f001 ff8d 	bl	8003a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000168 	.word	0x20000168

08001b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <SystemInit+0x20>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <SystemInit+0x20>)
 8001b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	605a      	str	r2, [r3, #4]
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bba:	f240 3247 	movw	r2, #839	; 0x347
 8001bbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bc8:	2263      	movs	r2, #99	; 0x63
 8001bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bd8:	4813      	ldr	r0, [pc, #76]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bda:	f001 fe91 	bl	8003900 <HAL_TIM_Base_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001be4:	f7ff fe42 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bee:	f107 0308 	add.w	r3, r7, #8
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480c      	ldr	r0, [pc, #48]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001bf6:	f002 f84b 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c00:	f7ff fe34 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM2_Init+0x94>)
 8001c12:	f002 fa67 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c1c:	f7ff fe26 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000120 	.word	0x20000120

08001c2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_TIM4_Init+0x98>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c50:	f240 3247 	movw	r2, #839	; 0x347
 8001c54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c5e:	2263      	movs	r2, #99	; 0x63
 8001c60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c70:	f001 fe46 	bl	8003900 <HAL_TIM_Base_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001c7a:	f7ff fdf7 	bl	800186c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001c8c:	f002 f800 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f7ff fde9 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM4_Init+0x94>)
 8001ca8:	f002 fa1c 	bl	80040e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001cb2:	f7ff fddb 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000168 	.word	0x20000168
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd8:	d116      	bne.n	8001d08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_TIM_Base_MspInit+0x80>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_TIM_Base_MspInit+0x80>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_TIM_Base_MspInit+0x80>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	201c      	movs	r0, #28
 8001cfc:	f000 f9c3 	bl	8002086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d00:	201c      	movs	r0, #28
 8001d02:	f000 f9dc 	bl	80020be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d06:	e01a      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_TIM_Base_MspInit+0x84>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d115      	bne.n	8001d3e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_TIM_Base_MspInit+0x80>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_TIM_Base_MspInit+0x80>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_TIM_Base_MspInit+0x80>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2100      	movs	r1, #0
 8001d32:	201e      	movs	r0, #30
 8001d34:	f000 f9a7 	bl	8002086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d38:	201e      	movs	r0, #30
 8001d3a:	f000 f9c0 	bl	80020be <HAL_NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40000800 	.word	0x40000800

08001d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d56:	490e      	ldr	r1, [pc, #56]	; (8001d90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d6c:	4c0b      	ldr	r4, [pc, #44]	; (8001d9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d7a:	f7ff fef9 	bl	8001b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d7e:	f002 fb19 	bl	80043b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d82:	f7ff fb9d 	bl	80014c0 <main>
  bx  lr    
 8001d86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d90:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001d94:	0802303c 	.word	0x0802303c
  ldr r2, =_sbss
 8001d98:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001d9c:	200001b4 	.word	0x200001b4

08001da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC_IRQHandler>
	...

08001da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0d      	ldr	r2, [pc, #52]	; (8001de4 <HAL_Init+0x40>)
 8001dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0a      	ldr	r2, [pc, #40]	; (8001de4 <HAL_Init+0x40>)
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <HAL_Init+0x40>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <HAL_Init+0x40>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f000 f94f 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd2:	200f      	movs	r0, #15
 8001dd4:	f000 f808 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd8:	f7ff fe64 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023c00 	.word	0x40023c00

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <HAL_InitTick+0x54>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_InitTick+0x58>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f967 	bl	80020da <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00e      	b.n	8001e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b0f      	cmp	r3, #15
 8001e1a:	d80a      	bhi.n	8001e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295
 8001e24:	f000 f92f 	bl	8002086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_InitTick+0x5c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000008 	.word	0x20000008
 8001e40:	20000010 	.word	0x20000010
 8001e44:	2000000c 	.word	0x2000000c

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000010 	.word	0x20000010
 8001e6c:	200001b0 	.word	0x200001b0

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	200001b0 	.word	0x200001b0

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000010 	.word	0x20000010

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff29 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff3e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff31 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b089      	sub	sp, #36	; 0x24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e16b      	b.n	80023e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 815a 	bne.w	80023e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d005      	beq.n	8002146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002142:	2b02      	cmp	r3, #2
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d017      	beq.n	80021e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d123      	bne.n	8002238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80b4 	beq.w	80023e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b60      	ldr	r3, [pc, #384]	; (8002400 <HAL_GPIO_Init+0x30c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4a5f      	ldr	r2, [pc, #380]	; (8002400 <HAL_GPIO_Init+0x30c>)
 8002284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <HAL_GPIO_Init+0x30c>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002296:	4a5b      	ldr	r2, [pc, #364]	; (8002404 <HAL_GPIO_Init+0x310>)
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	089b      	lsrs	r3, r3, #2
 800229c:	3302      	adds	r3, #2
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	220f      	movs	r2, #15
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a52      	ldr	r2, [pc, #328]	; (8002408 <HAL_GPIO_Init+0x314>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d02b      	beq.n	800231a <HAL_GPIO_Init+0x226>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a51      	ldr	r2, [pc, #324]	; (800240c <HAL_GPIO_Init+0x318>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d025      	beq.n	8002316 <HAL_GPIO_Init+0x222>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a50      	ldr	r2, [pc, #320]	; (8002410 <HAL_GPIO_Init+0x31c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <HAL_GPIO_Init+0x21e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4f      	ldr	r2, [pc, #316]	; (8002414 <HAL_GPIO_Init+0x320>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d019      	beq.n	800230e <HAL_GPIO_Init+0x21a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4e      	ldr	r2, [pc, #312]	; (8002418 <HAL_GPIO_Init+0x324>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d013      	beq.n	800230a <HAL_GPIO_Init+0x216>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4d      	ldr	r2, [pc, #308]	; (800241c <HAL_GPIO_Init+0x328>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d00d      	beq.n	8002306 <HAL_GPIO_Init+0x212>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4c      	ldr	r2, [pc, #304]	; (8002420 <HAL_GPIO_Init+0x32c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d007      	beq.n	8002302 <HAL_GPIO_Init+0x20e>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4b      	ldr	r2, [pc, #300]	; (8002424 <HAL_GPIO_Init+0x330>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_GPIO_Init+0x20a>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e00e      	b.n	800231c <HAL_GPIO_Init+0x228>
 80022fe:	2308      	movs	r3, #8
 8002300:	e00c      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002302:	2306      	movs	r3, #6
 8002304:	e00a      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002306:	2305      	movs	r3, #5
 8002308:	e008      	b.n	800231c <HAL_GPIO_Init+0x228>
 800230a:	2304      	movs	r3, #4
 800230c:	e006      	b.n	800231c <HAL_GPIO_Init+0x228>
 800230e:	2303      	movs	r3, #3
 8002310:	e004      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002312:	2302      	movs	r3, #2
 8002314:	e002      	b.n	800231c <HAL_GPIO_Init+0x228>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <HAL_GPIO_Init+0x228>
 800231a:	2300      	movs	r3, #0
 800231c:	69fa      	ldr	r2, [r7, #28]
 800231e:	f002 0203 	and.w	r2, r2, #3
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	4093      	lsls	r3, r2
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800232c:	4935      	ldr	r1, [pc, #212]	; (8002404 <HAL_GPIO_Init+0x310>)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	089b      	lsrs	r3, r3, #2
 8002332:	3302      	adds	r3, #2
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_GPIO_Init+0x334>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235e:	4a32      	ldr	r2, [pc, #200]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002364:	4b30      	ldr	r3, [pc, #192]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002388:	4a27      	ldr	r2, [pc, #156]	; (8002428 <HAL_GPIO_Init+0x334>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_GPIO_Init+0x334>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a12      	ldr	r2, [pc, #72]	; (8002428 <HAL_GPIO_Init+0x334>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3301      	adds	r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	2b0f      	cmp	r3, #15
 80023ec:	f67f ae90 	bls.w	8002110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023f0:	bf00      	nop
 80023f2:	bf00      	nop
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40023800 	.word	0x40023800
 8002404:	40013800 	.word	0x40013800
 8002408:	40020000 	.word	0x40020000
 800240c:	40020400 	.word	0x40020400
 8002410:	40020800 	.word	0x40020800
 8002414:	40020c00 	.word	0x40020c00
 8002418:	40021000 	.word	0x40021000
 800241c:	40021400 	.word	0x40021400
 8002420:	40021800 	.word	0x40021800
 8002424:	40021c00 	.word	0x40021c00
 8002428:	40013c00 	.word	0x40013c00

0800242c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
 8002438:	4613      	mov	r3, r2
 800243a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800243c:	787b      	ldrb	r3, [r7, #1]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002448:	e003      	b.n	8002452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800244a:	887b      	ldrh	r3, [r7, #2]
 800244c:	041a      	lsls	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e267      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d075      	beq.n	800256a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800247e:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d00c      	beq.n	80024a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800248a:	4b85      	ldr	r3, [pc, #532]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002492:	2b08      	cmp	r3, #8
 8002494:	d112      	bne.n	80024bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002496:	4b82      	ldr	r3, [pc, #520]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a2:	d10b      	bne.n	80024bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	4b7e      	ldr	r3, [pc, #504]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d05b      	beq.n	8002568 <HAL_RCC_OscConfig+0x108>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d157      	bne.n	8002568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e242      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d106      	bne.n	80024d4 <HAL_RCC_OscConfig+0x74>
 80024c6:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a75      	ldr	r2, [pc, #468]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e01d      	b.n	8002510 <HAL_RCC_OscConfig+0xb0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x98>
 80024de:	4b70      	ldr	r3, [pc, #448]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6f      	ldr	r2, [pc, #444]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b6d      	ldr	r3, [pc, #436]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a6c      	ldr	r2, [pc, #432]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e00b      	b.n	8002510 <HAL_RCC_OscConfig+0xb0>
 80024f8:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a68      	ldr	r2, [pc, #416]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a65      	ldr	r2, [pc, #404]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800250a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800250e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d013      	beq.n	8002540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7ff fcaa 	bl	8001e70 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7ff fca6 	bl	8001e70 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e207      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b5b      	ldr	r3, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0xc0>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fc96 	bl	8001e70 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff fc92 	bl	8001e70 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e1f3      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	4b51      	ldr	r3, [pc, #324]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0xe8>
 8002566:	e000      	b.n	800256a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d063      	beq.n	800263e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00b      	beq.n	800259a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002582:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258e:	4b44      	ldr	r3, [pc, #272]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	4b41      	ldr	r3, [pc, #260]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_RCC_OscConfig+0x152>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e1c7      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	e03a      	b.n	800263e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x244>)
 80025d2:	2201      	movs	r2, #1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7ff fc4b 	bl	8001e70 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025de:	f7ff fc47 	bl	8001e70 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e1a8      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	4b2b      	ldr	r3, [pc, #172]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fc:	4b28      	ldr	r3, [pc, #160]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4925      	ldr	r1, [pc, #148]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002612:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x244>)
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff fc2a 	bl	8001e70 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002620:	f7ff fc26 	bl	8001e70 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e187      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	4b1b      	ldr	r3, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d036      	beq.n	80026b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d016      	beq.n	8002680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_RCC_OscConfig+0x248>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff fc0a 	bl	8001e70 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002660:	f7ff fc06 	bl	8001e70 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e167      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <HAL_RCC_OscConfig+0x240>)
 8002674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x200>
 800267e:	e01b      	b.n	80026b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_OscConfig+0x248>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7ff fbf3 	bl	8001e70 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800268c:	e00e      	b.n	80026ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268e:	f7ff fbef 	bl	8001e70 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d907      	bls.n	80026ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e150      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	42470000 	.word	0x42470000
 80026a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	4b88      	ldr	r3, [pc, #544]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ea      	bne.n	800268e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8097 	beq.w	80027f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c6:	2300      	movs	r3, #0
 80026c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ca:	4b81      	ldr	r3, [pc, #516]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d10f      	bne.n	80026f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b7d      	ldr	r3, [pc, #500]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	4a7c      	ldr	r2, [pc, #496]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e4:	6413      	str	r3, [r2, #64]	; 0x40
 80026e6:	4b7a      	ldr	r3, [pc, #488]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f2:	2301      	movs	r3, #1
 80026f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f6:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d118      	bne.n	8002734 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002702:	4b74      	ldr	r3, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a73      	ldr	r2, [pc, #460]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270e:	f7ff fbaf 	bl	8001e70 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7ff fbab 	bl	8001e70 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e10c      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x474>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x2ea>
 800273c:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800273e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002740:	4a63      	ldr	r2, [pc, #396]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6713      	str	r3, [r2, #112]	; 0x70
 8002748:	e01c      	b.n	8002784 <HAL_RCC_OscConfig+0x324>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b05      	cmp	r3, #5
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x30c>
 8002752:	4b5f      	ldr	r3, [pc, #380]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	4a5e      	ldr	r2, [pc, #376]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002758:	f043 0304 	orr.w	r3, r3, #4
 800275c:	6713      	str	r3, [r2, #112]	; 0x70
 800275e:	4b5c      	ldr	r3, [pc, #368]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002762:	4a5b      	ldr	r2, [pc, #364]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0x324>
 800276c:	4b58      	ldr	r3, [pc, #352]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a57      	ldr	r2, [pc, #348]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	4b55      	ldr	r3, [pc, #340]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a54      	ldr	r2, [pc, #336]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d015      	beq.n	80027b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7ff fb70 	bl	8001e70 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002794:	f7ff fb6c 	bl	8001e70 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0cb      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027aa:	4b49      	ldr	r3, [pc, #292]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0ee      	beq.n	8002794 <HAL_RCC_OscConfig+0x334>
 80027b6:	e014      	b.n	80027e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7ff fb5a 	bl	8001e70 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7ff fb56 	bl	8001e70 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0b5      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d6:	4b3e      	ldr	r3, [pc, #248]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1ee      	bne.n	80027c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e8:	4b39      	ldr	r3, [pc, #228]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	4a38      	ldr	r2, [pc, #224]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 80a1 	beq.w	8002940 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fe:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b08      	cmp	r3, #8
 8002808:	d05c      	beq.n	80028c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d141      	bne.n	8002896 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_RCC_OscConfig+0x478>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002818:	f7ff fb2a 	bl	8001e70 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002820:	f7ff fb26 	bl	8001e70 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e087      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f0      	bne.n	8002820 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	019b      	lsls	r3, r3, #6
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	041b      	lsls	r3, r3, #16
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	491b      	ldr	r1, [pc, #108]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <HAL_RCC_OscConfig+0x478>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7ff faff 	bl	8001e70 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002876:	f7ff fafb 	bl	8001e70 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e05c      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x416>
 8002894:	e054      	b.n	8002940 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_RCC_OscConfig+0x478>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff fae8 	bl	8001e70 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a4:	f7ff fae4 	bl	8001e70 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e045      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_OscConfig+0x470>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x444>
 80028c2:	e03d      	b.n	8002940 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e038      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40007000 	.word	0x40007000
 80028d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_RCC_OscConfig+0x4ec>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d028      	beq.n	800293c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d121      	bne.n	800293c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	429a      	cmp	r2, r3
 8002904:	d11a      	bne.n	800293c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002912:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002914:	4293      	cmp	r3, r2
 8002916:	d111      	bne.n	800293c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	085b      	lsrs	r3, r3, #1
 8002924:	3b01      	subs	r3, #1
 8002926:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d107      	bne.n	800293c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002936:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0cc      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d90c      	bls.n	800298c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b65      	ldr	r3, [pc, #404]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0b8      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a4:	4b59      	ldr	r3, [pc, #356]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	4a58      	ldr	r2, [pc, #352]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029bc:	4b53      	ldr	r3, [pc, #332]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a52      	ldr	r2, [pc, #328]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	494d      	ldr	r1, [pc, #308]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d044      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d119      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e07f      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06f      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1e:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e067      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a2e:	4b37      	ldr	r3, [pc, #220]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 0203 	bic.w	r2, r3, #3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	4934      	ldr	r1, [pc, #208]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a40:	f7ff fa16 	bl	8001e70 <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7ff fa12 	bl	8001e70 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e04f      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	4b2b      	ldr	r3, [pc, #172]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 020c 	and.w	r2, r3, #12
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d1eb      	bne.n	8002a48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a70:	4b25      	ldr	r3, [pc, #148]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d20c      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b20      	ldr	r3, [pc, #128]	; (8002b08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e032      	b.n	8002afe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa4:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4916      	ldr	r1, [pc, #88]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ac2:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	490e      	ldr	r1, [pc, #56]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ad6:	f000 f821 	bl	8002b1c <HAL_RCC_GetSysClockFreq>
 8002ada:	4602      	mov	r2, r0
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	490a      	ldr	r1, [pc, #40]	; (8002b10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	5ccb      	ldrb	r3, [r1, r3]
 8002aea:	fa22 f303 	lsr.w	r3, r2, r3
 8002aee:	4a09      	ldr	r2, [pc, #36]	; (8002b14 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f976 	bl	8001de8 <HAL_InitTick>

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	0802301c 	.word	0x0802301c
 8002b14:	20000008 	.word	0x20000008
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b20:	b094      	sub	sp, #80	; 0x50
 8002b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b34:	4b79      	ldr	r3, [pc, #484]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d00d      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x40>
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	f200 80e1 	bhi.w	8002d08 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_RCC_GetSysClockFreq+0x34>
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b4e:	e0db      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b50:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b54:	e0db      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b56:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b5a:	e0d8      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b5c:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b64:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b66:	4b6d      	ldr	r3, [pc, #436]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d063      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b72:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	2200      	movs	r2, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
 8002b8a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b8e:	4622      	mov	r2, r4
 8002b90:	462b      	mov	r3, r5
 8002b92:	f04f 0000 	mov.w	r0, #0
 8002b96:	f04f 0100 	mov.w	r1, #0
 8002b9a:	0159      	lsls	r1, r3, #5
 8002b9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba0:	0150      	lsls	r0, r2, #5
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	1a51      	subs	r1, r2, r1
 8002baa:	6139      	str	r1, [r7, #16]
 8002bac:	4629      	mov	r1, r5
 8002bae:	eb63 0301 	sbc.w	r3, r3, r1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	018b      	lsls	r3, r1, #6
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bca:	4651      	mov	r1, sl
 8002bcc:	018a      	lsls	r2, r1, #6
 8002bce:	4651      	mov	r1, sl
 8002bd0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bee:	4690      	mov	r8, r2
 8002bf0:	4699      	mov	r9, r3
 8002bf2:	4623      	mov	r3, r4
 8002bf4:	eb18 0303 	adds.w	r3, r8, r3
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	eb49 0303 	adc.w	r3, r9, r3
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	024b      	lsls	r3, r1, #9
 8002c12:	4621      	mov	r1, r4
 8002c14:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c18:	4621      	mov	r1, r4
 8002c1a:	024a      	lsls	r2, r1, #9
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c22:	2200      	movs	r2, #0
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c2c:	f7fd fad4 	bl	80001d8 <__aeabi_uldivmod>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4613      	mov	r3, r2
 8002c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c38:	e058      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	099b      	lsrs	r3, r3, #6
 8002c40:	2200      	movs	r2, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	4611      	mov	r1, r2
 8002c46:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c54:	4642      	mov	r2, r8
 8002c56:	464b      	mov	r3, r9
 8002c58:	f04f 0000 	mov.w	r0, #0
 8002c5c:	f04f 0100 	mov.w	r1, #0
 8002c60:	0159      	lsls	r1, r3, #5
 8002c62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c66:	0150      	lsls	r0, r2, #5
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c72:	4649      	mov	r1, r9
 8002c74:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c84:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c88:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c8c:	ebb2 040a 	subs.w	r4, r2, sl
 8002c90:	eb63 050b 	sbc.w	r5, r3, fp
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	00eb      	lsls	r3, r5, #3
 8002c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca2:	00e2      	lsls	r2, r4, #3
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	461d      	mov	r5, r3
 8002ca8:	4643      	mov	r3, r8
 8002caa:	18e3      	adds	r3, r4, r3
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	464b      	mov	r3, r9
 8002cb0:	eb45 0303 	adc.w	r3, r5, r3
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	028b      	lsls	r3, r1, #10
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ccc:	4621      	mov	r1, r4
 8002cce:	028a      	lsls	r2, r1, #10
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	61fa      	str	r2, [r7, #28]
 8002cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce0:	f7fd fa7a 	bl	80001d8 <__aeabi_uldivmod>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	4613      	mov	r3, r2
 8002cea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d0a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3750      	adds	r7, #80	; 0x50
 8002d14:	46bd      	mov	sp, r7
 8002d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200

08002d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07b      	b.n	8002e32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4a:	d009      	beq.n	8002d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	e005      	b.n	8002d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fe4a 	bl	8001a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de4:	ea42 0103 	orr.w	r1, r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0104 	and.w	r1, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f003 0210 	and.w	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b088      	sub	sp, #32
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_SPI_Transmit+0x22>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e126      	b.n	80030aa <HAL_SPI_Transmit+0x270>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e64:	f7ff f804 	bl	8001e70 <HAL_GetTick>
 8002e68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e7e:	e10b      	b.n	8003098 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_SPI_Transmit+0x52>
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e90:	e102      	b.n	8003098 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	88fa      	ldrh	r2, [r7, #6]
 8002eaa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed8:	d10f      	bne.n	8002efa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	d007      	beq.n	8002f18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f20:	d14b      	bne.n	8002fba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Transmit+0xf6>
 8002f2a:	8afb      	ldrh	r3, [r7, #22]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d13e      	bne.n	8002fae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	1c9a      	adds	r2, r3, #2
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f54:	e02b      	b.n	8002fae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d112      	bne.n	8002f8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	881a      	ldrh	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f88:	e011      	b.n	8002fae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f8a:	f7fe ff71 	bl	8001e70 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d803      	bhi.n	8002fa2 <HAL_SPI_Transmit+0x168>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d102      	bne.n	8002fa8 <HAL_SPI_Transmit+0x16e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fac:	e074      	b.n	8003098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ce      	bne.n	8002f56 <HAL_SPI_Transmit+0x11c>
 8002fb8:	e04c      	b.n	8003054 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_SPI_Transmit+0x18e>
 8002fc2:	8afb      	ldrh	r3, [r7, #22]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d140      	bne.n	800304a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fee:	e02c      	b.n	800304a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d113      	bne.n	8003026 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	7812      	ldrb	r2, [r2, #0]
 800300a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	86da      	strh	r2, [r3, #54]	; 0x36
 8003024:	e011      	b.n	800304a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003026:	f7fe ff23 	bl	8001e70 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d803      	bhi.n	800303e <HAL_SPI_Transmit+0x204>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d102      	bne.n	8003044 <HAL_SPI_Transmit+0x20a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003048:	e026      	b.n	8003098 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1cd      	bne.n	8002ff0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	6839      	ldr	r1, [r7, #0]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fbcb 	bl	80037f4 <SPI_EndRxTxTransaction>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77fb      	strb	r3, [r7, #31]
 8003094:	e000      	b.n	8003098 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b088      	sub	sp, #32
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030ce:	d112      	bne.n	80030f6 <HAL_SPI_Receive+0x44>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10e      	bne.n	80030f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2204      	movs	r2, #4
 80030dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	4613      	mov	r3, r2
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f8f1 	bl	80032d4 <HAL_SPI_TransmitReceive>
 80030f2:	4603      	mov	r3, r0
 80030f4:	e0ea      	b.n	80032cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_SPI_Receive+0x52>
 8003100:	2302      	movs	r3, #2
 8003102:	e0e3      	b.n	80032cc <HAL_SPI_Receive+0x21a>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800310c:	f7fe feb0 	bl	8001e70 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d002      	beq.n	8003124 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800311e:	2302      	movs	r3, #2
 8003120:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003122:	e0ca      	b.n	80032ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Receive+0x7e>
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003134:	e0c1      	b.n	80032ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2204      	movs	r2, #4
 800313a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	88fa      	ldrh	r2, [r7, #6]
 800314e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	88fa      	ldrh	r2, [r7, #6]
 8003154:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317c:	d10f      	bne.n	800319e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d007      	beq.n	80031bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d162      	bne.n	800328a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031c4:	e02e      	b.n	8003224 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d115      	bne.n	8003200 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f103 020c 	add.w	r2, r3, #12
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031fe:	e011      	b.n	8003224 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003200:	f7fe fe36 	bl	8001e70 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d803      	bhi.n	8003218 <HAL_SPI_Receive+0x166>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d102      	bne.n	800321e <HAL_SPI_Receive+0x16c>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003222:	e04a      	b.n	80032ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1cb      	bne.n	80031c6 <HAL_SPI_Receive+0x114>
 800322e:	e031      	b.n	8003294 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b01      	cmp	r3, #1
 800323c:	d113      	bne.n	8003266 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	b292      	uxth	r2, r2
 800324a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c9a      	adds	r2, r3, #2
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003264:	e011      	b.n	800328a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003266:	f7fe fe03 	bl	8001e70 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d803      	bhi.n	800327e <HAL_SPI_Receive+0x1cc>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d102      	bne.n	8003284 <HAL_SPI_Receive+0x1d2>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d102      	bne.n	800328a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003288:	e017      	b.n	80032ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1cd      	bne.n	8003230 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fa45 	bl	8003728 <SPI_EndRxTransaction>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
 80032b6:	e000      	b.n	80032ba <HAL_SPI_Receive+0x208>
  }

error :
 80032b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	; 0x30
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032e2:	2301      	movs	r3, #1
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x26>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e18a      	b.n	8003610 <HAL_SPI_TransmitReceive+0x33c>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003302:	f7fe fdb5 	bl	8001e70 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003318:	887b      	ldrh	r3, [r7, #2]
 800331a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800331c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003320:	2b01      	cmp	r3, #1
 8003322:	d00f      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x70>
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332a:	d107      	bne.n	800333c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <HAL_SPI_TransmitReceive+0x68>
 8003334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003338:	2b04      	cmp	r3, #4
 800333a:	d003      	beq.n	8003344 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003342:	e15b      	b.n	80035fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x82>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_SPI_TransmitReceive+0x82>
 8003350:	887b      	ldrh	r3, [r7, #2]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800335c:	e14e      	b.n	80035fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b04      	cmp	r3, #4
 8003368:	d003      	beq.n	8003372 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2205      	movs	r2, #5
 800336e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d007      	beq.n	80033c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ce:	d178      	bne.n	80034c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <HAL_SPI_TransmitReceive+0x10a>
 80033d8:	8b7b      	ldrh	r3, [r7, #26]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d166      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	881a      	ldrh	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	1c9a      	adds	r2, r3, #2
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003402:	e053      	b.n	80034ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d11b      	bne.n	800344a <HAL_SPI_TransmitReceive+0x176>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d016      	beq.n	800344a <HAL_SPI_TransmitReceive+0x176>
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	2b01      	cmp	r3, #1
 8003420:	d113      	bne.n	800344a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343c:	b29b      	uxth	r3, r3
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d119      	bne.n	800348c <HAL_SPI_TransmitReceive+0x1b8>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d014      	beq.n	800348c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	b292      	uxth	r2, r2
 800346e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003488:	2301      	movs	r3, #1
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800348c:	f7fe fcf0 	bl	8001e70 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003498:	429a      	cmp	r2, r3
 800349a:	d807      	bhi.n	80034ac <HAL_SPI_TransmitReceive+0x1d8>
 800349c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d003      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034aa:	e0a7      	b.n	80035fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1a6      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x130>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1a1      	bne.n	8003404 <HAL_SPI_TransmitReceive+0x130>
 80034c0:	e07c      	b.n	80035bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x1fc>
 80034ca:	8b7b      	ldrh	r3, [r7, #26]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d16b      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	7812      	ldrb	r2, [r2, #0]
 80034dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034f6:	e057      	b.n	80035a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	d11c      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x26c>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800350a:	b29b      	uxth	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d017      	beq.n	8003540 <HAL_SPI_TransmitReceive+0x26c>
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003512:	2b01      	cmp	r3, #1
 8003514:	d114      	bne.n	8003540 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	330c      	adds	r3, #12
 8003520:	7812      	ldrb	r2, [r2, #0]
 8003522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d119      	bne.n	8003582 <HAL_SPI_TransmitReceive+0x2ae>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	2b00      	cmp	r3, #0
 8003556:	d014      	beq.n	8003582 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800357e:	2301      	movs	r3, #1
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003582:	f7fe fc75 	bl	8001e70 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800358e:	429a      	cmp	r2, r3
 8003590:	d803      	bhi.n	800359a <HAL_SPI_TransmitReceive+0x2c6>
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d102      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x2cc>
 800359a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d103      	bne.n	80035a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80035a6:	e029      	b.n	80035fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1a2      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x224>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d19d      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f917 	bl	80037f4 <SPI_EndRxTxTransaction>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d006      	beq.n	80035da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2220      	movs	r2, #32
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035d8:	e010      	b.n	80035fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	617b      	str	r3, [r7, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	e000      	b.n	80035fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800360c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003610:	4618      	mov	r0, r3
 8003612:	3730      	adds	r7, #48	; 0x30
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b088      	sub	sp, #32
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	4613      	mov	r3, r2
 8003626:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003628:	f7fe fc22 	bl	8001e70 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	4413      	add	r3, r2
 8003636:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003638:	f7fe fc1a 	bl	8001e70 <HAL_GetTick>
 800363c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800363e:	4b39      	ldr	r3, [pc, #228]	; (8003724 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	0d1b      	lsrs	r3, r3, #20
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800364e:	e054      	b.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d050      	beq.n	80036fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003658:	f7fe fc0a 	bl	8001e70 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	429a      	cmp	r2, r3
 8003666:	d902      	bls.n	800366e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13d      	bne.n	80036ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800367c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003686:	d111      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003690:	d004      	beq.n	800369c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d107      	bne.n	80036ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036b4:	d10f      	bne.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e017      	b.n	800371a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	bf0c      	ite	eq
 800370a:	2301      	moveq	r3, #1
 800370c:	2300      	movne	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	429a      	cmp	r2, r3
 8003716:	d19b      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000008 	.word	0x20000008

08003728 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af02      	add	r7, sp, #8
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373c:	d111      	bne.n	8003762 <SPI_EndRxTransaction+0x3a>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003746:	d004      	beq.n	8003752 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003750:	d107      	bne.n	8003762 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003760:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800376a:	d12a      	bne.n	80037c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003774:	d012      	beq.n	800379c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	2180      	movs	r1, #128	; 0x80
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff ff49 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02d      	beq.n	80037e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	f043 0220 	orr.w	r2, r3, #32
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e026      	b.n	80037ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	2101      	movs	r1, #1
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f7ff ff36 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d01a      	beq.n	80037e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e013      	b.n	80037ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2101      	movs	r1, #1
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff ff23 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e000      	b.n	80037ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003800:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <SPI_EndRxTxTransaction+0x7c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <SPI_EndRxTxTransaction+0x80>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0d5b      	lsrs	r3, r3, #21
 800380c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003810:	fb02 f303 	mul.w	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381e:	d112      	bne.n	8003846 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	9300      	str	r3, [sp, #0]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2200      	movs	r2, #0
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff fef4 	bl	8003618 <SPI_WaitFlagStateUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d016      	beq.n	8003864 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	3b01      	subs	r3, #1
 8003850:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d0f2      	beq.n	8003846 <SPI_EndRxTxTransaction+0x52>
 8003860:	e000      	b.n	8003864 <SPI_EndRxTxTransaction+0x70>
        break;
 8003862:	bf00      	nop
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000008 	.word	0x20000008
 8003874:	165e9f81 	.word	0x165e9f81

08003878 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e034      	b.n	80038f8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7fc ff54 	bl	8000750 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3308      	adds	r3, #8
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f000 fca6 	bl	8004204 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	f000 fcf0 	bl	80042a8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6858      	ldr	r0, [r3, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	f000 fd25 	bl	8004324 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	6892      	ldr	r2, [r2, #8]
 80038ee:	f041 0101 	orr.w	r1, r1, #1
 80038f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e041      	b.n	8003996 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fe f9ce 	bl	8001cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 fa96 	bl	8003e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e04e      	b.n	8003a56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_TIM_Base_Start_IT+0xc4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d022      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e2:	d01d      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_TIM_Base_Start_IT+0xc8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d018      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <HAL_TIM_Base_Start_IT+0xcc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_TIM_Base_Start_IT+0xd0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00e      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1b      	ldr	r2, [pc, #108]	; (8003a74 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d009      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a19      	ldr	r2, [pc, #100]	; (8003a78 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d004      	beq.n	8003a20 <HAL_TIM_Base_Start_IT+0x80>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <HAL_TIM_Base_Start_IT+0xdc>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d111      	bne.n	8003a44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d010      	beq.n	8003a54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a42:	e007      	b.n	8003a54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40010400 	.word	0x40010400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40001800 	.word	0x40001800

08003a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0202 	mvn.w	r2, #2
 8003aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f003 0303 	and.w	r3, r3, #3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f9b5 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f9a7 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9b8 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0204 	mvn.w	r2, #4
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f98b 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f97d 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f98e 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0208 	mvn.w	r2, #8
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2204      	movs	r2, #4
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f961 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f953 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f964 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d122      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0210 	mvn.w	r2, #16
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2208      	movs	r2, #8
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f937 	bl	8003e32 <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f929 	bl	8003e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f93a 	bl	8003e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0201 	mvn.w	r2, #1
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fe86 	bl	8001910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fae0 	bl	80041f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	2b40      	cmp	r3, #64	; 0x40
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8ff 	bl	8003e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0320 	and.w	r3, r3, #32
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0220 	mvn.w	r2, #32
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 faaa 	bl	80041dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_TIM_ConfigClockSource+0x1c>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e0b4      	b.n	8003e16 <HAL_TIM_ConfigClockSource+0x186>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce4:	d03e      	beq.n	8003d64 <HAL_TIM_ConfigClockSource+0xd4>
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cea:	f200 8087 	bhi.w	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	f000 8086 	beq.w	8003e02 <HAL_TIM_ConfigClockSource+0x172>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfa:	d87f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d01a      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xa6>
 8003d00:	2b70      	cmp	r3, #112	; 0x70
 8003d02:	d87b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d050      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x11a>
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d877      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d03c      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0xfa>
 8003d10:	2b50      	cmp	r3, #80	; 0x50
 8003d12:	d873      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d058      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x13a>
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d86f      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b30      	cmp	r3, #48	; 0x30
 8003d1e:	d064      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	2b30      	cmp	r3, #48	; 0x30
 8003d22:	d86b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d060      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d867      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d05c      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d05a      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	e062      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6899      	ldr	r1, [r3, #8]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f000 f9ad 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	609a      	str	r2, [r3, #8]
      break;
 8003d62:	e04f      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6899      	ldr	r1, [r3, #8]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f000 f996 	bl	80040a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d86:	609a      	str	r2, [r3, #8]
      break;
 8003d88:	e03c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 f90a 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2150      	movs	r1, #80	; 0x50
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f963 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003da8:	e02c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	461a      	mov	r2, r3
 8003db8:	f000 f929 	bl	800400e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2160      	movs	r1, #96	; 0x60
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 f953 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003dc8:	e01c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f000 f8ea 	bl	8003fb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	; 0x40
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f943 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003de8:	e00c      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4619      	mov	r1, r3
 8003df4:	4610      	mov	r0, r2
 8003df6:	f000 f93a 	bl	800406e <TIM_ITRx_SetConfig>
      break;
 8003dfa:	e003      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003e00:	e000      	b.n	8003e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b083      	sub	sp, #12
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
	...

08003e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a40      	ldr	r2, [pc, #256]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a3c      	ldr	r2, [pc, #240]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a3b      	ldr	r2, [pc, #236]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a3a      	ldr	r2, [pc, #232]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d108      	bne.n	8003ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2f      	ldr	r2, [pc, #188]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d02b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d027      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a2c      	ldr	r2, [pc, #176]	; (8003f88 <TIM_Base_SetConfig+0x118>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d023      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a2b      	ldr	r2, [pc, #172]	; (8003f8c <TIM_Base_SetConfig+0x11c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <TIM_Base_SetConfig+0x120>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d01b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d017      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a28      	ldr	r2, [pc, #160]	; (8003f98 <TIM_Base_SetConfig+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a27      	ldr	r2, [pc, #156]	; (8003f9c <TIM_Base_SetConfig+0x12c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00f      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <TIM_Base_SetConfig+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00b      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <TIM_Base_SetConfig+0x134>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d007      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <TIM_Base_SetConfig+0x138>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	; (8003fac <TIM_Base_SetConfig+0x13c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d108      	bne.n	8003f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <TIM_Base_SetConfig+0x114>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <TIM_Base_SetConfig+0xf8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <TIM_Base_SetConfig+0x124>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d103      	bne.n	8003f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	615a      	str	r2, [r3, #20]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40010000 	.word	0x40010000
 8003f88:	40000400 	.word	0x40000400
 8003f8c:	40000800 	.word	0x40000800
 8003f90:	40000c00 	.word	0x40000c00
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800
 8003fa4:	40001800 	.word	0x40001800
 8003fa8:	40001c00 	.word	0x40001c00
 8003fac:	40002000 	.word	0x40002000

08003fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f023 030a 	bic.w	r3, r3, #10
 8003fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400e:	b480      	push	{r7}
 8004010:	b087      	sub	sp, #28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0210 	bic.w	r2, r3, #16
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	031b      	lsls	r3, r3, #12
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	621a      	str	r2, [r3, #32]
}
 8004062:	bf00      	nop
 8004064:	371c      	adds	r7, #28
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	f043 0307 	orr.w	r3, r3, #7
 8004090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	021a      	lsls	r2, r3, #8
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f8:	2302      	movs	r3, #2
 80040fa:	e05a      	b.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d022      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004148:	d01d      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d018      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1a      	ldr	r2, [pc, #104]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d00e      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d009      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d004      	beq.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d10c      	bne.n	80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40010000 	.word	0x40010000
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800
 80041cc:	40000c00 	.word	0x40000c00
 80041d0:	40010400 	.word	0x40010400
 80041d4:	40014000 	.word	0x40014000
 80041d8:	40001800 	.word	0x40001800

080041dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <FSMC_NORSRAM_Init+0xa0>)
 8004222:	4013      	ands	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800422e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004234:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800423a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004240:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8004246:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800424c:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004252:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8004258:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800425e:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004264:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800426a:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004270:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d103      	bne.n	8004288 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004286:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	fff00080 	.word	0xfff00080

080042a8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80042ca:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80042d6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80042de:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80042e6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80042f0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	3b02      	subs	r3, #2
 80042f8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80042fa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004300:	4313      	orrs	r3, r2
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6979      	ldr	r1, [r7, #20]
 8004310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800433c:	d122      	bne.n	8004384 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004346:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800434c:	4013      	ands	r3, r2
 800434e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800435a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004362:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800436a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004370:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6979      	ldr	r1, [r7, #20]
 800437e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004382:	e005      	b.n	8004390 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800438c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	cff00000 	.word	0xcff00000

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <__libc_init_array>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	4d0d      	ldr	r5, [pc, #52]	; (80043ec <__libc_init_array+0x38>)
 80043b8:	4c0d      	ldr	r4, [pc, #52]	; (80043f0 <__libc_init_array+0x3c>)
 80043ba:	1b64      	subs	r4, r4, r5
 80043bc:	10a4      	asrs	r4, r4, #2
 80043be:	2600      	movs	r6, #0
 80043c0:	42a6      	cmp	r6, r4
 80043c2:	d109      	bne.n	80043d8 <__libc_init_array+0x24>
 80043c4:	4d0b      	ldr	r5, [pc, #44]	; (80043f4 <__libc_init_array+0x40>)
 80043c6:	4c0c      	ldr	r4, [pc, #48]	; (80043f8 <__libc_init_array+0x44>)
 80043c8:	f000 f818 	bl	80043fc <_init>
 80043cc:	1b64      	subs	r4, r4, r5
 80043ce:	10a4      	asrs	r4, r4, #2
 80043d0:	2600      	movs	r6, #0
 80043d2:	42a6      	cmp	r6, r4
 80043d4:	d105      	bne.n	80043e2 <__libc_init_array+0x2e>
 80043d6:	bd70      	pop	{r4, r5, r6, pc}
 80043d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043dc:	4798      	blx	r3
 80043de:	3601      	adds	r6, #1
 80043e0:	e7ee      	b.n	80043c0 <__libc_init_array+0xc>
 80043e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e6:	4798      	blx	r3
 80043e8:	3601      	adds	r6, #1
 80043ea:	e7f2      	b.n	80043d2 <__libc_init_array+0x1e>
 80043ec:	08023034 	.word	0x08023034
 80043f0:	08023034 	.word	0x08023034
 80043f4:	08023034 	.word	0x08023034
 80043f8:	08023038 	.word	0x08023038

080043fc <_init>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr

08004408 <_fini>:
 8004408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440a:	bf00      	nop
 800440c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800440e:	bc08      	pop	{r3}
 8004410:	469e      	mov	lr, r3
 8004412:	4770      	bx	lr
