
Bai3_LCD_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ef8  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800add4  0800add4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800add4  0800add4  0001add4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800addc  0800addc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800addc  0800addc  0001addc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ade0  0800ade0  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ade4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000014c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000015c  2000015c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000edaa  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b5d  00000000  00000000  0002ee2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec8  00000000  00000000  00031990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b31  00000000  00000000  00032858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000224ed  00000000  00000000  00033389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012218  00000000  00000000  00055876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd05a  00000000  00000000  00067a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ba0  00000000  00000000  00134ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  00138688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ec4 	.word	0x08003ec4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003ec4 	.word	0x08003ec4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	2108      	movs	r1, #8
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <button_init+0x14>)
 80004de:	f001 fe45 	bl	800216c <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020c00 	.word	0x40020c00

080004ec <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2108      	movs	r1, #8
 80004f4:	4836      	ldr	r0, [pc, #216]	; (80005d0 <button_scan+0xe4>)
 80004f6:	f001 fe39 	bl	800216c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004fa:	2201      	movs	r2, #1
 80004fc:	2108      	movs	r1, #8
 80004fe:	4834      	ldr	r0, [pc, #208]	; (80005d0 <button_scan+0xe4>)
 8000500:	f001 fe34 	bl	800216c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000504:	230a      	movs	r3, #10
 8000506:	2202      	movs	r2, #2
 8000508:	4932      	ldr	r1, [pc, #200]	; (80005d4 <button_scan+0xe8>)
 800050a:	4833      	ldr	r0, [pc, #204]	; (80005d8 <button_scan+0xec>)
 800050c:	f002 fb35 	bl	8002b7a <HAL_SPI_Receive>

	static int button_index = 0;
	static uint16_t mask = 0x8000;
	static int i = 0;
	for (i = 0; i < 16; i++) {
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <button_scan+0xf0>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e054      	b.n	80005c2 <button_scan+0xd6>
		if (i >= 0 && i <= 3) {
 8000518:	4b30      	ldr	r3, [pc, #192]	; (80005dc <button_scan+0xf0>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	db09      	blt.n	8000534 <button_scan+0x48>
 8000520:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <button_scan+0xf0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b03      	cmp	r3, #3
 8000526:	dc05      	bgt.n	8000534 <button_scan+0x48>
			button_index = i + 4;
 8000528:	4b2c      	ldr	r3, [pc, #176]	; (80005dc <button_scan+0xf0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3304      	adds	r3, #4
 800052e:	4a2c      	ldr	r2, [pc, #176]	; (80005e0 <button_scan+0xf4>)
 8000530:	6013      	str	r3, [r2, #0]
 8000532:	e022      	b.n	800057a <button_scan+0x8e>
		} else if (i >= 4 && i <= 7) {
 8000534:	4b29      	ldr	r3, [pc, #164]	; (80005dc <button_scan+0xf0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dd0a      	ble.n	8000552 <button_scan+0x66>
 800053c:	4b27      	ldr	r3, [pc, #156]	; (80005dc <button_scan+0xf0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b07      	cmp	r3, #7
 8000542:	dc06      	bgt.n	8000552 <button_scan+0x66>
			button_index = 7 - i;
 8000544:	4b25      	ldr	r3, [pc, #148]	; (80005dc <button_scan+0xf0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f1c3 0307 	rsb	r3, r3, #7
 800054c:	4a24      	ldr	r2, [pc, #144]	; (80005e0 <button_scan+0xf4>)
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	e013      	b.n	800057a <button_scan+0x8e>
		} else if (i >= 8 && i <= 11) {
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <button_scan+0xf0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b07      	cmp	r3, #7
 8000558:	dd09      	ble.n	800056e <button_scan+0x82>
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <button_scan+0xf0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b0b      	cmp	r3, #11
 8000560:	dc05      	bgt.n	800056e <button_scan+0x82>
			button_index = i + 4;
 8000562:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <button_scan+0xf0>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3304      	adds	r3, #4
 8000568:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <button_scan+0xf4>)
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	e005      	b.n	800057a <button_scan+0x8e>
		} else {
			button_index = 23 - i;
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <button_scan+0xf0>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f1c3 0317 	rsb	r3, r3, #23
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <button_scan+0xf4>)
 8000578:	6013      	str	r3, [r2, #0]
		}
		if (button_spi_buffer & mask)
 800057a:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <button_scan+0xe8>)
 800057c:	881a      	ldrh	r2, [r3, #0]
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <button_scan+0xf8>)
 8000580:	881b      	ldrh	r3, [r3, #0]
 8000582:	4013      	ands	r3, r2
 8000584:	b29b      	uxth	r3, r3
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <button_scan+0xac>
			button_count[button_index] = 0;
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <button_scan+0xf4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a16      	ldr	r2, [pc, #88]	; (80005e8 <button_scan+0xfc>)
 8000590:	2100      	movs	r1, #0
 8000592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000596:	e009      	b.n	80005ac <button_scan+0xc0>
		else
			button_count[button_index]++;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <button_scan+0xf4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <button_scan+0xfc>)
 800059e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80005a2:	3201      	adds	r2, #1
 80005a4:	b291      	uxth	r1, r2
 80005a6:	4a10      	ldr	r2, [pc, #64]	; (80005e8 <button_scan+0xfc>)
 80005a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <button_scan+0xf8>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	085b      	lsrs	r3, r3, #1
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <button_scan+0xf8>)
 80005b6:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 16; i++) {
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <button_scan+0xf0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <button_scan+0xf0>)
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <button_scan+0xf0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	dda6      	ble.n	8000518 <button_scan+0x2c>
	}
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	2000004c 	.word	0x2000004c
 80005d8:	200000b8 	.word	0x200000b8
 80005dc:	20000050 	.word	0x20000050
 80005e0:	20000054 	.word	0x20000054
 80005e4:	20000000 	.word	0x20000000
 80005e8:	2000002c 	.word	0x2000002c

080005ec <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
 8000602:	615a      	str	r2, [r3, #20]
 8000604:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000606:	463b      	mov	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
 8000614:	615a      	str	r2, [r3, #20]
 8000616:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <MX_FSMC_Init+0xec>)
 800061a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800061e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000622:	4a2e      	ldr	r2, [pc, #184]	; (80006dc <MX_FSMC_Init+0xf0>)
 8000624:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000626:	4b2c      	ldr	r3, [pc, #176]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800062c:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_FSMC_Init+0xec>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_FSMC_Init+0xec>)
 800063a:	2210      	movs	r2, #16
 800063c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_FSMC_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800065c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800066a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_FSMC_Init+0xec>)
 800066e:	2200      	movs	r2, #0
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_FSMC_Init+0xec>)
 8000674:	2200      	movs	r2, #0
 8000676:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000678:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_FSMC_Init+0xec>)
 800067a:	2200      	movs	r2, #0
 800067c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800067e:	230f      	movs	r3, #15
 8000680:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000682:	230f      	movs	r3, #15
 8000684:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000686:	233c      	movs	r3, #60	; 0x3c
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800068e:	2310      	movs	r3, #16
 8000690:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000692:	2311      	movs	r3, #17
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000696:	2300      	movs	r3, #0
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800069a:	2308      	movs	r3, #8
 800069c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800069e:	230f      	movs	r3, #15
 80006a0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80006a2:	2309      	movs	r3, #9
 80006a4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80006aa:	2310      	movs	r3, #16
 80006ac:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80006ae:	2311      	movs	r3, #17
 80006b0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80006b6:	463a      	mov	r2, r7
 80006b8:	f107 031c 	add.w	r3, r7, #28
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_FSMC_Init+0xec>)
 80006c0:	f002 fe3e 	bl	8003340 <HAL_SRAM_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80006ca:	f001 f82b 	bl	8001724 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006ce:	bf00      	nop
 80006d0:	3738      	adds	r7, #56	; 0x38
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000058 	.word	0x20000058
 80006dc:	a0000104 	.word	0xa0000104

080006e0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <HAL_FSMC_MspInit+0x88>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d131      	bne.n	8000760 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_FSMC_MspInit+0x88>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_FSMC_MspInit+0x8c>)
 8000708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <HAL_FSMC_MspInit+0x8c>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6393      	str	r3, [r2, #56]	; 0x38
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_FSMC_MspInit+0x8c>)
 8000714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800071e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000722:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000730:	230c      	movs	r3, #12
 8000732:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <HAL_FSMC_MspInit+0x90>)
 800073a:	f001 fb7b 	bl	8001e34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800073e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000742:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000750:	230c      	movs	r3, #12
 8000752:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4806      	ldr	r0, [pc, #24]	; (8000774 <HAL_FSMC_MspInit+0x94>)
 800075a:	f001 fb6b 	bl	8001e34 <HAL_GPIO_Init>
 800075e:	e000      	b.n	8000762 <HAL_FSMC_MspInit+0x82>
    return;
 8000760:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000762:	3718      	adds	r7, #24
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000a8 	.word	0x200000a8
 800076c:	40023800 	.word	0x40023800
 8000770:	40021000 	.word	0x40021000
 8000774:	40020c00 	.word	0x40020c00

08000778 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000780:	f7ff ffae 	bl	80006e0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08c      	sub	sp, #48	; 0x30
 8000790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	4b5a      	ldr	r3, [pc, #360]	; (8000910 <MX_GPIO_Init+0x184>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a59      	ldr	r2, [pc, #356]	; (8000910 <MX_GPIO_Init+0x184>)
 80007ac:	f043 0310 	orr.w	r3, r3, #16
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b57      	ldr	r3, [pc, #348]	; (8000910 <MX_GPIO_Init+0x184>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
 80007c2:	4b53      	ldr	r3, [pc, #332]	; (8000910 <MX_GPIO_Init+0x184>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a52      	ldr	r2, [pc, #328]	; (8000910 <MX_GPIO_Init+0x184>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b50      	ldr	r3, [pc, #320]	; (8000910 <MX_GPIO_Init+0x184>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	617b      	str	r3, [r7, #20]
 80007d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	4b4c      	ldr	r3, [pc, #304]	; (8000910 <MX_GPIO_Init+0x184>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a4b      	ldr	r2, [pc, #300]	; (8000910 <MX_GPIO_Init+0x184>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b49      	ldr	r3, [pc, #292]	; (8000910 <MX_GPIO_Init+0x184>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	4b45      	ldr	r3, [pc, #276]	; (8000910 <MX_GPIO_Init+0x184>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a44      	ldr	r2, [pc, #272]	; (8000910 <MX_GPIO_Init+0x184>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b42      	ldr	r3, [pc, #264]	; (8000910 <MX_GPIO_Init+0x184>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b3e      	ldr	r3, [pc, #248]	; (8000910 <MX_GPIO_Init+0x184>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a3d      	ldr	r2, [pc, #244]	; (8000910 <MX_GPIO_Init+0x184>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b3b      	ldr	r3, [pc, #236]	; (8000910 <MX_GPIO_Init+0x184>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b37      	ldr	r3, [pc, #220]	; (8000910 <MX_GPIO_Init+0x184>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a36      	ldr	r2, [pc, #216]	; (8000910 <MX_GPIO_Init+0x184>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b34      	ldr	r3, [pc, #208]	; (8000910 <MX_GPIO_Init+0x184>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b30      	ldr	r3, [pc, #192]	; (8000910 <MX_GPIO_Init+0x184>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <MX_GPIO_Init+0x184>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_GPIO_Init+0x184>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2170      	movs	r1, #112	; 0x70
 800086a:	482a      	ldr	r0, [pc, #168]	; (8000914 <MX_GPIO_Init+0x188>)
 800086c:	f001 fc7e 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	4828      	ldr	r0, [pc, #160]	; (8000918 <MX_GPIO_Init+0x18c>)
 8000876:	f001 fc79 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4827      	ldr	r0, [pc, #156]	; (800091c <MX_GPIO_Init+0x190>)
 8000880:	f001 fc74 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000884:	2370      	movs	r3, #112	; 0x70
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	2301      	movs	r3, #1
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	481e      	ldr	r0, [pc, #120]	; (8000914 <MX_GPIO_Init+0x188>)
 800089c:	f001 faca 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80008a0:	23c0      	movs	r3, #192	; 0xc0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_GPIO_Init+0x194>)
 80008b4:	f001 fabe 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008b8:	2330      	movs	r3, #48	; 0x30
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4816      	ldr	r0, [pc, #88]	; (8000924 <MX_GPIO_Init+0x198>)
 80008cc:	f001 fab2 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008d0:	2340      	movs	r3, #64	; 0x40
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0x18c>)
 80008e8:	f001 faa4 	bl	8001e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80008ec:	2308      	movs	r3, #8
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <MX_GPIO_Init+0x190>)
 8000904:	f001 fa96 	bl	8001e34 <HAL_GPIO_Init>

}
 8000908:	bf00      	nop
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40021000 	.word	0x40021000
 8000918:	40021800 	.word	0x40021800
 800091c:	40020c00 	.word	0x40020c00
 8000920:	40020000 	.word	0x40020000
 8000924:	40020800 	.word	0x40020800

08000928 <LCD_WR_REG>:
_lcd_dev lcddev;

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);

void LCD_WR_REG(uint16_t reg) {
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <LCD_WR_REG+0x1c>)
 8000934:	88fb      	ldrh	r3, [r7, #6]
 8000936:	8013      	strh	r3, [r2, #0]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	600ffffe 	.word	0x600ffffe

08000948 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 8000952:	4a04      	ldr	r2, [pc, #16]	; (8000964 <LCD_WR_DATA+0x1c>)
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	8053      	strh	r3, [r2, #2]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	600ffffe 	.word	0x600ffffe

08000968 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <LCD_RD_DATA+0x20>)
 8000970:	885b      	ldrh	r3, [r3, #2]
 8000972:	b29b      	uxth	r3, r3
 8000974:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	b29b      	uxth	r3, r3
}
 800097a:	4618      	mov	r0, r3
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	600ffffe 	.word	0x600ffffe

0800098c <lcd_set_address>:

void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4604      	mov	r4, r0
 8000994:	4608      	mov	r0, r1
 8000996:	4611      	mov	r1, r2
 8000998:	461a      	mov	r2, r3
 800099a:	4623      	mov	r3, r4
 800099c:	80fb      	strh	r3, [r7, #6]
 800099e:	4603      	mov	r3, r0
 80009a0:	80bb      	strh	r3, [r7, #4]
 80009a2:	460b      	mov	r3, r1
 80009a4:	807b      	strh	r3, [r7, #2]
 80009a6:	4613      	mov	r3, r2
 80009a8:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80009aa:	202a      	movs	r0, #42	; 0x2a
 80009ac:	f7ff ffbc 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffc6 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffc0 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ffba 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 80009d4:	887b      	ldrh	r3, [r7, #2]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ffb4 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 80009e0:	202b      	movs	r0, #43	; 0x2b
 80009e2:	f7ff ffa1 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 80009e6:	88bb      	ldrh	r3, [r7, #4]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ffab 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 80009f2:	88bb      	ldrh	r3, [r7, #4]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff ffa5 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 80009fe:	883b      	ldrh	r3, [r7, #0]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff9f 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000a0a:	883b      	ldrh	r3, [r7, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff99 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000a16:	202c      	movs	r0, #44	; 0x2c
 8000a18:	f7ff ff86 	bl	8000928 <LCD_WR_REG>
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}

08000a24 <lcd_clear>:
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) //
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <lcd_clear+0x60>)
 8000a30:	881b      	ldrh	r3, [r3, #0]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <lcd_clear+0x60>)
 8000a38:	885b      	ldrh	r3, [r3, #2]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2000      	movs	r0, #0
 8000a42:	f7ff ffa3 	bl	800098c <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	81fb      	strh	r3, [r7, #14]
 8000a4a:	e011      	b.n	8000a70 <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	81bb      	strh	r3, [r7, #12]
 8000a50:	e006      	b.n	8000a60 <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff77 	bl	8000948 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8000a5a:	89bb      	ldrh	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	81bb      	strh	r3, [r7, #12]
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <lcd_clear+0x60>)
 8000a62:	885b      	ldrh	r3, [r3, #2]
 8000a64:	89ba      	ldrh	r2, [r7, #12]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3f3      	bcc.n	8000a52 <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	81fb      	strh	r3, [r7, #14]
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <lcd_clear+0x60>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	89fa      	ldrh	r2, [r7, #14]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d3e8      	bcc.n	8000a4c <lcd_clear+0x28>
		}
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000ac 	.word	0x200000ac

08000a88 <lcd_fill>:
 * @param  color Color to fill
 * @retval None
 */
void lcd_fill(uint16_t xsta, uint16_t ysta, uint16_t xend, uint16_t yend,
		uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4604      	mov	r4, r0
 8000a90:	4608      	mov	r0, r1
 8000a92:	4611      	mov	r1, r2
 8000a94:	461a      	mov	r2, r3
 8000a96:	4623      	mov	r3, r4
 8000a98:	80fb      	strh	r3, [r7, #6]
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80bb      	strh	r3, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	807b      	strh	r3, [r7, #2]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	lcd_set_address(xsta, ysta, xend - 1, yend - 1);
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	883b      	ldrh	r3, [r7, #0]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	88b9      	ldrh	r1, [r7, #4]
 8000ab4:	88f8      	ldrh	r0, [r7, #6]
 8000ab6:	f7ff ff69 	bl	800098c <lcd_set_address>
	for (i = ysta; i < yend; i++) {
 8000aba:	88bb      	ldrh	r3, [r7, #4]
 8000abc:	81fb      	strh	r3, [r7, #14]
 8000abe:	e010      	b.n	8000ae2 <lcd_fill+0x5a>
		for (j = xsta; j < xend; j++) {
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	81bb      	strh	r3, [r7, #12]
 8000ac4:	e006      	b.n	8000ad4 <lcd_fill+0x4c>
			LCD_WR_DATA(color);
 8000ac6:	8c3b      	ldrh	r3, [r7, #32]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff3d 	bl	8000948 <LCD_WR_DATA>
		for (j = xsta; j < xend; j++) {
 8000ace:	89bb      	ldrh	r3, [r7, #12]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	81bb      	strh	r3, [r7, #12]
 8000ad4:	89ba      	ldrh	r2, [r7, #12]
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d3f4      	bcc.n	8000ac6 <lcd_fill+0x3e>
	for (i = ysta; i < yend; i++) {
 8000adc:	89fb      	ldrh	r3, [r7, #14]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	81fb      	strh	r3, [r7, #14]
 8000ae2:	89fa      	ldrh	r2, [r7, #14]
 8000ae4:	883b      	ldrh	r3, [r7, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d3ea      	bcc.n	8000ac0 <lcd_fill+0x38>
		}
	}
}
 8000aea:	bf00      	nop
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd90      	pop	{r4, r7, pc}

08000af4 <lcd_draw_point>:
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) // 1 ddieemr anhr
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	80fb      	strh	r3, [r7, #6]
 8000afe:	460b      	mov	r3, r1
 8000b00:	80bb      	strh	r3, [r7, #4]
 8000b02:	4613      	mov	r3, r2
 8000b04:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y); //ÉèÖÃ¹â±êÎ»ÖÃ
 8000b06:	88bb      	ldrh	r3, [r7, #4]
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	88b9      	ldrh	r1, [r7, #4]
 8000b0c:	88f8      	ldrh	r0, [r7, #6]
 8000b0e:	f7ff ff3d 	bl	800098c <lcd_set_address>
	LCD_WR_DATA(color);
 8000b12:	887b      	ldrh	r3, [r7, #2]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff17 	bl	8000948 <LCD_WR_DATA>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <lcd_ShowChar>:
	lcd_draw_line(x2, y1, x2, y2, color);
}

void lcd_ShowChar(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	4611      	mov	r1, r2
 8000b30:	461a      	mov	r2, r3
 8000b32:	4623      	mov	r3, r4
 8000b34:	80fb      	strh	r3, [r7, #6]
 8000b36:	4603      	mov	r3, r0
 8000b38:	80bb      	strh	r3, [r7, #4]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	70fb      	strb	r3, [r7, #3]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000b4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	08db      	lsrs	r3, r3, #3
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	bf14      	ite	ne
 8000b66:	2301      	movne	r3, #1
 8000b68:	2300      	moveq	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	4413      	add	r3, r2
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	fb12 f303 	smulbb	r3, r2, r3
 8000b7a:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000b7c:	78fb      	ldrb	r3, [r7, #3]
 8000b7e:	3b20      	subs	r3, #32
 8000b80:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	4413      	add	r3, r2
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	b29c      	uxth	r4, r3
 8000b90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	88bb      	ldrh	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	88b9      	ldrh	r1, [r7, #4]
 8000ba2:	88f8      	ldrh	r0, [r7, #6]
 8000ba4:	4622      	mov	r2, r4
 8000ba6:	f7ff fef1 	bl	800098c <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000baa:	2300      	movs	r3, #0
 8000bac:	827b      	strh	r3, [r7, #18]
 8000bae:	e07a      	b.n	8000ca6 <lcd_ShowChar+0x182>
		if (sizey == 12)
 8000bb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bb4:	2b0c      	cmp	r3, #12
 8000bb6:	d028      	beq.n	8000c0a <lcd_ShowChar+0xe6>
			;
		else if (sizey == 16)
 8000bb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bbc:	2b10      	cmp	r3, #16
 8000bbe:	d108      	bne.n	8000bd2 <lcd_ShowChar+0xae>
			temp = ascii_1608[character][i];
 8000bc0:	78fa      	ldrb	r2, [r7, #3]
 8000bc2:	8a7b      	ldrh	r3, [r7, #18]
 8000bc4:	493c      	ldr	r1, [pc, #240]	; (8000cb8 <lcd_ShowChar+0x194>)
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	440a      	add	r2, r1
 8000bca:	4413      	add	r3, r2
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	75fb      	strb	r3, [r7, #23]
 8000bd0:	e01b      	b.n	8000c0a <lcd_ShowChar+0xe6>
		else if (sizey == 24)
 8000bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bd6:	2b18      	cmp	r3, #24
 8000bd8:	d10b      	bne.n	8000bf2 <lcd_ShowChar+0xce>
			temp = ascii_2412[character][i];
 8000bda:	78fa      	ldrb	r2, [r7, #3]
 8000bdc:	8a79      	ldrh	r1, [r7, #18]
 8000bde:	4837      	ldr	r0, [pc, #220]	; (8000cbc <lcd_ShowChar+0x198>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	011b      	lsls	r3, r3, #4
 8000be8:	4403      	add	r3, r0
 8000bea:	440b      	add	r3, r1
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	75fb      	strb	r3, [r7, #23]
 8000bf0:	e00b      	b.n	8000c0a <lcd_ShowChar+0xe6>
		else if (sizey == 32)
 8000bf2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bf6:	2b20      	cmp	r3, #32
 8000bf8:	d15a      	bne.n	8000cb0 <lcd_ShowChar+0x18c>
			temp = ascii_3216[character][i];
 8000bfa:	78fa      	ldrb	r2, [r7, #3]
 8000bfc:	8a7b      	ldrh	r3, [r7, #18]
 8000bfe:	4930      	ldr	r1, [pc, #192]	; (8000cc0 <lcd_ShowChar+0x19c>)
 8000c00:	0192      	lsls	r2, r2, #6
 8000c02:	440a      	add	r2, r1
 8000c04:	4413      	add	r3, r2
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	75bb      	strb	r3, [r7, #22]
 8000c0e:	e044      	b.n	8000c9a <lcd_ShowChar+0x176>
			if (!mode) {
 8000c10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d120      	bne.n	8000c5a <lcd_ShowChar+0x136>
				if (temp & (0x01 << t))
 8000c18:	7dfa      	ldrb	r2, [r7, #23]
 8000c1a:	7dbb      	ldrb	r3, [r7, #22]
 8000c1c:	fa42 f303 	asr.w	r3, r2, r3
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <lcd_ShowChar+0x10e>
					LCD_WR_DATA(fc);
 8000c28:	883b      	ldrh	r3, [r7, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff fe8c 	bl	8000948 <LCD_WR_DATA>
 8000c30:	e003      	b.n	8000c3a <lcd_ShowChar+0x116>
				else
					LCD_WR_DATA(bc);
 8000c32:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe87 	bl	8000948 <LCD_WR_DATA>
				m++;
 8000c3a:	7d7b      	ldrb	r3, [r7, #21]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000c40:	7d7b      	ldrb	r3, [r7, #21]
 8000c42:	7bfa      	ldrb	r2, [r7, #15]
 8000c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c48:	fb01 f202 	mul.w	r2, r1, r2
 8000c4c:	1a9b      	subs	r3, r3, r2
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11f      	bne.n	8000c94 <lcd_ShowChar+0x170>
					m = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	757b      	strb	r3, [r7, #21]
					break;
 8000c58:	e022      	b.n	8000ca0 <lcd_ShowChar+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8000c5a:	7dfa      	ldrb	r2, [r7, #23]
 8000c5c:	7dbb      	ldrb	r3, [r7, #22]
 8000c5e:	fa42 f303 	asr.w	r3, r2, r3
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <lcd_ShowChar+0x152>
					lcd_draw_point(x, y, fc);
 8000c6a:	883a      	ldrh	r2, [r7, #0]
 8000c6c:	88b9      	ldrh	r1, [r7, #4]
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff3f 	bl	8000af4 <lcd_draw_point>
				x++;
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8000c7c:	88fa      	ldrh	r2, [r7, #6]
 8000c7e:	8a3b      	ldrh	r3, [r7, #16]
 8000c80:	1ad2      	subs	r2, r2, r3
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d105      	bne.n	8000c94 <lcd_ShowChar+0x170>
					x = x0;
 8000c88:	8a3b      	ldrh	r3, [r7, #16]
 8000c8a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	80bb      	strh	r3, [r7, #4]
					break;
 8000c92:	e005      	b.n	8000ca0 <lcd_ShowChar+0x17c>
		for (t = 0; t < 8; t++) {
 8000c94:	7dbb      	ldrb	r3, [r7, #22]
 8000c96:	3301      	adds	r3, #1
 8000c98:	75bb      	strb	r3, [r7, #22]
 8000c9a:	7dbb      	ldrb	r3, [r7, #22]
 8000c9c:	2b07      	cmp	r3, #7
 8000c9e:	d9b7      	bls.n	8000c10 <lcd_ShowChar+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000ca0:	8a7b      	ldrh	r3, [r7, #18]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	827b      	strh	r3, [r7, #18]
 8000ca6:	8a7a      	ldrh	r2, [r7, #18]
 8000ca8:	89bb      	ldrh	r3, [r7, #12]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d380      	bcc.n	8000bb0 <lcd_ShowChar+0x8c>
 8000cae:	e000      	b.n	8000cb2 <lcd_ShowChar+0x18e>
			return;
 8000cb0:	bf00      	nop
				}
			}
		}
	}
}
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	08003efc 	.word	0x08003efc
 8000cbc:	080044ec 	.word	0x080044ec
 8000cc0:	080056bc 	.word	0x080056bc

08000cc4 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	460a      	mov	r2, r1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000cd8:	e004      	b.n	8000ce4 <mypow+0x20>
		result *= m;
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	1e5a      	subs	r2, r3, #1
 8000ce8:	71ba      	strb	r2, [r7, #6]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f5      	bne.n	8000cda <mypow+0x16>
	return result;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) //len: ddooj daif cuar so
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af04      	add	r7, sp, #16
 8000d02:	4604      	mov	r4, r0
 8000d04:	4608      	mov	r0, r1
 8000d06:	4611      	mov	r1, r2
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4623      	mov	r3, r4
 8000d0c:	80fb      	strh	r3, [r7, #6]
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80bb      	strh	r3, [r7, #4]
 8000d12:	460b      	mov	r3, r1
 8000d14:	807b      	strh	r3, [r7, #2]
 8000d16:	4613      	mov	r3, r2
 8000d18:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8000d1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d22:	085b      	lsrs	r3, r3, #1
 8000d24:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e059      	b.n	8000de0 <lcd_ShowIntNum+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8000d2c:	887c      	ldrh	r4, [r7, #2]
 8000d2e:	787a      	ldrb	r2, [r7, #1]
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	3b01      	subs	r3, #1
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	f7ff ffc1 	bl	8000cc4 <mypow>
 8000d42:	4603      	mov	r3, r0
 8000d44:	fbb4 f1f3 	udiv	r1, r4, r3
 8000d48:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <lcd_ShowIntNum+0xf8>)
 8000d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	4613      	mov	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	4413      	add	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	1aca      	subs	r2, r1, r3
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d121      	bne.n	8000da8 <lcd_ShowIntNum+0xac>
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	787b      	ldrb	r3, [r7, #1]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	da1c      	bge.n	8000da8 <lcd_ShowIntNum+0xac>
			if (temp == 0) {
 8000d6e:	7b3b      	ldrb	r3, [r7, #12]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d117      	bne.n	8000da4 <lcd_ShowIntNum+0xa8>
				lcd_ShowChar(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	7b7b      	ldrb	r3, [r7, #13]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	fb12 f303 	smulbb	r3, r2, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88fb      	ldrh	r3, [r7, #6]
 8000d84:	4413      	add	r3, r2
 8000d86:	b298      	uxth	r0, r3
 8000d88:	8c3a      	ldrh	r2, [r7, #32]
 8000d8a:	88b9      	ldrh	r1, [r7, #4]
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9302      	str	r3, [sp, #8]
 8000d90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	f7ff fec1 	bl	8000b24 <lcd_ShowChar>
				continue;
 8000da2:	e01a      	b.n	8000dda <lcd_ShowIntNum+0xde>
			} else
				enshow = 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	73bb      	strb	r3, [r7, #14]

		}
		lcd_ShowChar(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	7b7b      	ldrb	r3, [r7, #13]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	fb12 f303 	smulbb	r3, r2, r3
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	4413      	add	r3, r2
 8000dba:	b298      	uxth	r0, r3
 8000dbc:	7b3b      	ldrb	r3, [r7, #12]
 8000dbe:	3330      	adds	r3, #48	; 0x30
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	8c3c      	ldrh	r4, [r7, #32]
 8000dc4:	88b9      	ldrh	r1, [r7, #4]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	4623      	mov	r3, r4
 8000dd6:	f7ff fea5 	bl	8000b24 <lcd_ShowChar>
	for (t = 0; t < len; t++) {
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	787b      	ldrb	r3, [r7, #1]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d3a1      	bcc.n	8000d2c <lcd_ShowIntNum+0x30>
	}
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3714      	adds	r7, #20
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd90      	pop	{r4, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	cccccccd 	.word	0xcccccccd

08000df8 <lcd_ShowPicture>:
	}
}

void lcd_ShowPicture(uint16_t x, uint16_t y, uint16_t length, uint16_t width,
		const uint8_t pic[]) //code of picture
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4604      	mov	r4, r0
 8000e00:	4608      	mov	r0, r1
 8000e02:	4611      	mov	r1, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	4623      	mov	r3, r4
 8000e08:	80fb      	strh	r3, [r7, #6]
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80bb      	strh	r3, [r7, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	807b      	strh	r3, [r7, #2]
 8000e12:	4613      	mov	r3, r2
 8000e14:	803b      	strh	r3, [r7, #0]
	uint8_t picH, picL;
	uint16_t i, j;
	uint32_t k = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
	lcd_set_address(x, y, x + length - 1, y + width - 1);
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b29c      	uxth	r4, r3
 8000e26:	88ba      	ldrh	r2, [r7, #4]
 8000e28:	883b      	ldrh	r3, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	88b9      	ldrh	r1, [r7, #4]
 8000e34:	88f8      	ldrh	r0, [r7, #6]
 8000e36:	4622      	mov	r2, r4
 8000e38:	f7ff fda8 	bl	800098c <lcd_set_address>
	for (i = 0; i < length; i++) {
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	82fb      	strh	r3, [r7, #22]
 8000e40:	e027      	b.n	8000e92 <lcd_ShowPicture+0x9a>
		for (j = 0; j < width; j++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	82bb      	strh	r3, [r7, #20]
 8000e46:	e01d      	b.n	8000e84 <lcd_ShowPicture+0x8c>
			picH = pic[k * 2];
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e4e:	4413      	add	r3, r2
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	73fb      	strb	r3, [r7, #15]
			picL = pic[k * 2 + 1];
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	3301      	adds	r3, #1
 8000e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e5c:	4413      	add	r3, r2
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH << 8 | picL);
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	021b      	lsls	r3, r3, #8
 8000e66:	b21a      	sxth	r2, r3
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b21b      	sxth	r3, r3
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fd68 	bl	8000948 <LCD_WR_DATA>
			k++;
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	613b      	str	r3, [r7, #16]
		for (j = 0; j < width; j++) {
 8000e7e:	8abb      	ldrh	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	82bb      	strh	r3, [r7, #20]
 8000e84:	8aba      	ldrh	r2, [r7, #20]
 8000e86:	883b      	ldrh	r3, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d3dd      	bcc.n	8000e48 <lcd_ShowPicture+0x50>
	for (i = 0; i < length; i++) {
 8000e8c:	8afb      	ldrh	r3, [r7, #22]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	82fb      	strh	r3, [r7, #22]
 8000e92:	8afa      	ldrh	r2, [r7, #22]
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3d3      	bcc.n	8000e42 <lcd_ShowPicture+0x4a>
		}
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	bf00      	nop
 8000e9e:	371c      	adds	r7, #28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}

08000ea4 <lcd_SetDir>:

void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <lcd_SetDir+0x2a>
		lcddev.width = 320;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <lcd_SetDir+0x44>)
 8000ec0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ec4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <lcd_SetDir+0x44>)
 8000ec8:	22f0      	movs	r2, #240	; 0xf0
 8000eca:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8000ecc:	e006      	b.n	8000edc <lcd_SetDir+0x38>
		lcddev.width = 240;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <lcd_SetDir+0x44>)
 8000ed0:	22f0      	movs	r2, #240	; 0xf0
 8000ed2:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <lcd_SetDir+0x44>)
 8000ed6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000eda:	805a      	strh	r2, [r3, #2]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	200000ac 	.word	0x200000ac

08000eec <lcd_init>:

void lcd_init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef6:	48aa      	ldr	r0, [pc, #680]	; (80011a0 <lcd_init+0x2b4>)
 8000ef8:	f001 f938 	bl	800216c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f00:	f000 fe62 	bl	8001bc8 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	48a5      	ldr	r0, [pc, #660]	; (80011a0 <lcd_init+0x2b4>)
 8000f0c:	f001 f92e 	bl	800216c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f14:	f000 fe58 	bl	8001bc8 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff ffc3 	bl	8000ea4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000f1e:	20d3      	movs	r0, #211	; 0xd3
 8000f20:	f7ff fd02 	bl	8000928 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();	//dummy read
 8000f24:	f7ff fd20 	bl	8000968 <LCD_RD_DATA>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b9d      	ldr	r3, [pc, #628]	; (80011a4 <lcd_init+0x2b8>)
 8000f2e:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000f30:	f7ff fd1a 	bl	8000968 <LCD_RD_DATA>
 8000f34:	4603      	mov	r3, r0
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b9a      	ldr	r3, [pc, #616]	; (80011a4 <lcd_init+0x2b8>)
 8000f3a:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000f3c:	f7ff fd14 	bl	8000968 <LCD_RD_DATA>
 8000f40:	4603      	mov	r3, r0
 8000f42:	461a      	mov	r2, r3
 8000f44:	4b97      	ldr	r3, [pc, #604]	; (80011a4 <lcd_init+0x2b8>)
 8000f46:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8000f48:	4b96      	ldr	r3, [pc, #600]	; (80011a4 <lcd_init+0x2b8>)
 8000f4a:	889b      	ldrh	r3, [r3, #4]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	4b94      	ldr	r3, [pc, #592]	; (80011a4 <lcd_init+0x2b8>)
 8000f52:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8000f54:	f7ff fd08 	bl	8000968 <LCD_RD_DATA>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4b91      	ldr	r3, [pc, #580]	; (80011a4 <lcd_init+0x2b8>)
 8000f5e:	889b      	ldrh	r3, [r3, #4]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b8f      	ldr	r3, [pc, #572]	; (80011a4 <lcd_init+0x2b8>)
 8000f66:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000f68:	20cf      	movs	r0, #207	; 0xcf
 8000f6a:	f7ff fcdd 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff fcea 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000f74:	20c1      	movs	r0, #193	; 0xc1
 8000f76:	f7ff fce7 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000f7a:	2030      	movs	r0, #48	; 0x30
 8000f7c:	f7ff fce4 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000f80:	20ed      	movs	r0, #237	; 0xed
 8000f82:	f7ff fcd1 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000f86:	2064      	movs	r0, #100	; 0x64
 8000f88:	f7ff fcde 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f7ff fcdb 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000f92:	2012      	movs	r0, #18
 8000f94:	f7ff fcd8 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000f98:	2081      	movs	r0, #129	; 0x81
 8000f9a:	f7ff fcd5 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000f9e:	20e8      	movs	r0, #232	; 0xe8
 8000fa0:	f7ff fcc2 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000fa4:	2085      	movs	r0, #133	; 0x85
 8000fa6:	f7ff fccf 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000faa:	2010      	movs	r0, #16
 8000fac:	f7ff fccc 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000fb0:	207a      	movs	r0, #122	; 0x7a
 8000fb2:	f7ff fcc9 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000fb6:	20cb      	movs	r0, #203	; 0xcb
 8000fb8:	f7ff fcb6 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000fbc:	2039      	movs	r0, #57	; 0x39
 8000fbe:	f7ff fcc3 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000fc2:	202c      	movs	r0, #44	; 0x2c
 8000fc4:	f7ff fcc0 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fcbd 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000fce:	2034      	movs	r0, #52	; 0x34
 8000fd0:	f7ff fcba 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000fd4:	2002      	movs	r0, #2
 8000fd6:	f7ff fcb7 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000fda:	20f7      	movs	r0, #247	; 0xf7
 8000fdc:	f7ff fca4 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000fe0:	2020      	movs	r0, #32
 8000fe2:	f7ff fcb1 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000fe6:	20ea      	movs	r0, #234	; 0xea
 8000fe8:	f7ff fc9e 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fcab 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f7ff fca8 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000ff8:	20c0      	movs	r0, #192	; 0xc0
 8000ffa:	f7ff fc95 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000ffe:	201b      	movs	r0, #27
 8001000:	f7ff fca2 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001004:	20c1      	movs	r0, #193	; 0xc1
 8001006:	f7ff fc8f 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff fc9c 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001010:	20c5      	movs	r0, #197	; 0xc5
 8001012:	f7ff fc89 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001016:	2030      	movs	r0, #48	; 0x30
 8001018:	f7ff fc96 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800101c:	2030      	movs	r0, #48	; 0x30
 800101e:	f7ff fc93 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001022:	20c7      	movs	r0, #199	; 0xc7
 8001024:	f7ff fc80 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001028:	20b7      	movs	r0, #183	; 0xb7
 800102a:	f7ff fc8d 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800102e:	2036      	movs	r0, #54	; 0x36
 8001030:	f7ff fc7a 	bl	8000928 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8001034:	2008      	movs	r0, #8
 8001036:	f7ff fc87 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800103a:	203a      	movs	r0, #58	; 0x3a
 800103c:	f7ff fc74 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001040:	2055      	movs	r0, #85	; 0x55
 8001042:	f7ff fc81 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001046:	20b1      	movs	r0, #177	; 0xb1
 8001048:	f7ff fc6e 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc7b 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001052:	201a      	movs	r0, #26
 8001054:	f7ff fc78 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001058:	20b6      	movs	r0, #182	; 0xb6
 800105a:	f7ff fc65 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800105e:	200a      	movs	r0, #10
 8001060:	f7ff fc72 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001064:	20a2      	movs	r0, #162	; 0xa2
 8001066:	f7ff fc6f 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800106a:	20f2      	movs	r0, #242	; 0xf2
 800106c:	f7ff fc5c 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc69 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001076:	2026      	movs	r0, #38	; 0x26
 8001078:	f7ff fc56 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff fc63 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001082:	20e0      	movs	r0, #224	; 0xe0
 8001084:	f7ff fc50 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001088:	200f      	movs	r0, #15
 800108a:	f7ff fc5d 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800108e:	202a      	movs	r0, #42	; 0x2a
 8001090:	f7ff fc5a 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001094:	2028      	movs	r0, #40	; 0x28
 8001096:	f7ff fc57 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800109a:	2008      	movs	r0, #8
 800109c:	f7ff fc54 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f7ff fc51 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80010a6:	2008      	movs	r0, #8
 80010a8:	f7ff fc4e 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80010ac:	2054      	movs	r0, #84	; 0x54
 80010ae:	f7ff fc4b 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80010b2:	20a9      	movs	r0, #169	; 0xa9
 80010b4:	f7ff fc48 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80010b8:	2043      	movs	r0, #67	; 0x43
 80010ba:	f7ff fc45 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80010be:	200a      	movs	r0, #10
 80010c0:	f7ff fc42 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80010c4:	200f      	movs	r0, #15
 80010c6:	f7ff fc3f 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fc3c 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fc39 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fc36 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fc33 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80010e2:	20e1      	movs	r0, #225	; 0xe1
 80010e4:	f7ff fc20 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fc2d 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80010ee:	2015      	movs	r0, #21
 80010f0:	f7ff fc2a 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80010f4:	2017      	movs	r0, #23
 80010f6:	f7ff fc27 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80010fa:	2007      	movs	r0, #7
 80010fc:	f7ff fc24 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001100:	2011      	movs	r0, #17
 8001102:	f7ff fc21 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001106:	2006      	movs	r0, #6
 8001108:	f7ff fc1e 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800110c:	202b      	movs	r0, #43	; 0x2b
 800110e:	f7ff fc1b 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001112:	2056      	movs	r0, #86	; 0x56
 8001114:	f7ff fc18 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001118:	203c      	movs	r0, #60	; 0x3c
 800111a:	f7ff fc15 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800111e:	2005      	movs	r0, #5
 8001120:	f7ff fc12 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001124:	2010      	movs	r0, #16
 8001126:	f7ff fc0f 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800112a:	200f      	movs	r0, #15
 800112c:	f7ff fc0c 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001130:	203f      	movs	r0, #63	; 0x3f
 8001132:	f7ff fc09 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001136:	203f      	movs	r0, #63	; 0x3f
 8001138:	f7ff fc06 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800113c:	200f      	movs	r0, #15
 800113e:	f7ff fc03 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001142:	202b      	movs	r0, #43	; 0x2b
 8001144:	f7ff fbf0 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff fbfd 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fbfa 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff fbf7 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800115a:	203f      	movs	r0, #63	; 0x3f
 800115c:	f7ff fbf4 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001160:	202a      	movs	r0, #42	; 0x2a
 8001162:	f7ff fbe1 	bl	8000928 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001166:	2000      	movs	r0, #0
 8001168:	f7ff fbee 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fbeb 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff fbe8 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001178:	20ef      	movs	r0, #239	; 0xef
 800117a:	f7ff fbe5 	bl	8000948 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800117e:	2011      	movs	r0, #17
 8001180:	f7ff fbd2 	bl	8000928 <LCD_WR_REG>
	HAL_Delay(120);
 8001184:	2078      	movs	r0, #120	; 0x78
 8001186:	f000 fd1f 	bl	8001bc8 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800118a:	2029      	movs	r0, #41	; 0x29
 800118c:	f7ff fbcc 	bl	8000928 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <lcd_init+0x2bc>)
 8001198:	f000 ffe8 	bl	800216c <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40020800 	.word	0x40020800
 80011a4:	200000ac 	.word	0x200000ac
 80011a8:	40020000 	.word	0x40020000

080011ac <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
	lcd_draw_point(xc + x, yc + y, c);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4413      	add	r3, r2
 80011c4:	b298      	uxth	r0, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	8b3a      	ldrh	r2, [r7, #24]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f7ff fc8d 	bl	8000af4 <lcd_draw_point>

	lcd_draw_point(xc - x, yc + y, c);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	b298      	uxth	r0, r3
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	8b3a      	ldrh	r2, [r7, #24]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fc7d 	bl	8000af4 <lcd_draw_point>

	lcd_draw_point(xc + x, yc - y, c);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	b29b      	uxth	r3, r3
 8001202:	4413      	add	r3, r2
 8001204:	b298      	uxth	r0, r3
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	b29a      	uxth	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b29b      	uxth	r3, r3
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	b29b      	uxth	r3, r3
 8001212:	8b3a      	ldrh	r2, [r7, #24]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fc6d 	bl	8000af4 <lcd_draw_point>

	lcd_draw_point(xc - x, yc - y, c);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	b29a      	uxth	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	b29b      	uxth	r3, r3
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b298      	uxth	r0, r3
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	b29a      	uxth	r2, r3
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	b29b      	uxth	r3, r3
 8001232:	8b3a      	ldrh	r2, [r7, #24]
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc5d 	bl	8000af4 <lcd_draw_point>

	lcd_draw_point(xc + y, yc + x, c);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	b29a      	uxth	r2, r3
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4413      	add	r3, r2
 8001244:	b298      	uxth	r0, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	b29a      	uxth	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	b29b      	uxth	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	b29b      	uxth	r3, r3
 8001252:	8b3a      	ldrh	r2, [r7, #24]
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc4d 	bl	8000af4 <lcd_draw_point>

	lcd_draw_point(xc - y, yc + x, c);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	b29a      	uxth	r2, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	b298      	uxth	r0, r3
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	b29a      	uxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4413      	add	r3, r2
 8001270:	b29b      	uxth	r3, r3
 8001272:	8b3a      	ldrh	r2, [r7, #24]
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fc3d 	bl	8000af4 <lcd_draw_point>

	lcd_draw_point(xc + y, yc - x, c);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b29a      	uxth	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b29b      	uxth	r3, r3
 8001282:	4413      	add	r3, r2
 8001284:	b298      	uxth	r0, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	b29a      	uxth	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	b29b      	uxth	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	8b3a      	ldrh	r2, [r7, #24]
 8001294:	4619      	mov	r1, r3
 8001296:	f7ff fc2d 	bl	8000af4 <lcd_draw_point>

	lcd_draw_point(xc - y, yc - x, c);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b29a      	uxth	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b298      	uxth	r0, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	8b3a      	ldrh	r2, [r7, #24]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc1d 	bl	8000af4 <lcd_draw_point>
}
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc, uint16_t c, int r, int fill) //ve duong or hinh, c: color
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b08a      	sub	sp, #40	; 0x28
 80012c6:	af02      	add	r7, sp, #8
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	f1c3 0303 	rsb	r3, r3, #3
 80012e2:	613b      	str	r3, [r7, #16]

	if (fill) {
 80012e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d04f      	beq.n	800138a <lcd_DrawCircle+0xc8>
		while (x <= y) {
 80012ea:	e029      	b.n	8001340 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e00a      	b.n	8001308 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff ff55 	bl	80011ac <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	429a      	cmp	r2, r3
 800130e:	ddf0      	ble.n	80012f2 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	da06      	bge.n	8001324 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	009a      	lsls	r2, r3, #2
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4413      	add	r3, r2
 800131e:	3306      	adds	r3, #6
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	e00a      	b.n	800133a <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	009a      	lsls	r2, r3, #2
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4413      	add	r3, r2
 8001330:	330a      	adds	r3, #10
 8001332:	613b      	str	r3, [r7, #16]
				y--;
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	3b01      	subs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	429a      	cmp	r2, r3
 8001346:	ddd1      	ble.n	80012ec <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001348:	e023      	b.n	8001392 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	68b9      	ldr	r1, [r7, #8]
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff ff29 	bl	80011ac <_draw_circle_8>
			if (d < 0) {
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	da06      	bge.n	800136e <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	009a      	lsls	r2, r3, #2
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4413      	add	r3, r2
 8001368:	3306      	adds	r3, #6
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	e00a      	b.n	8001384 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	009a      	lsls	r2, r3, #2
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4413      	add	r3, r2
 800137a:	330a      	adds	r3, #10
 800137c:	613b      	str	r3, [r7, #16]
				y--;
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	3b01      	subs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
			x++;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	3301      	adds	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	429a      	cmp	r2, r3
 8001390:	dddb      	ble.n	800134a <lcd_DrawCircle+0x88>
}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af04      	add	r7, sp, #16
 80013a2:	60ba      	str	r2, [r7, #8]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	81fb      	strh	r3, [r7, #14]
 80013aa:	460b      	mov	r3, r1
 80013ac:	81bb      	strh	r3, [r7, #12]
 80013ae:	4613      	mov	r3, r2
 80013b0:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 80013b2:	89fb      	ldrh	r3, [r7, #14]
 80013b4:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 80013ba:	e048      	b.n	800144e <lcd_ShowStr+0xb2>
		if (!bHz) {
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d145      	bne.n	800144e <lcd_ShowStr+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 80013c2:	89fa      	ldrh	r2, [r7, #14]
 80013c4:	4b26      	ldr	r3, [pc, #152]	; (8001460 <lcd_ShowStr+0xc4>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013ce:	085b      	lsrs	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	1acb      	subs	r3, r1, r3
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dc3f      	bgt.n	8001458 <lcd_ShowStr+0xbc>
 80013d8:	89ba      	ldrh	r2, [r7, #12]
 80013da:	4b21      	ldr	r3, [pc, #132]	; (8001460 <lcd_ShowStr+0xc4>)
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	4619      	mov	r1, r3
 80013e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013e4:	1acb      	subs	r3, r1, r3
 80013e6:	429a      	cmp	r2, r3
 80013e8:	dc36      	bgt.n	8001458 <lcd_ShowStr+0xbc>
				return;
			if (*str > 0x80)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b80      	cmp	r3, #128	; 0x80
 80013f0:	d902      	bls.n	80013f8 <lcd_ShowStr+0x5c>
				bHz = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	75fb      	strb	r3, [r7, #23]
 80013f6:	e02a      	b.n	800144e <lcd_ShowStr+0xb2>
			else {
				if (*str == 0x0D) {
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b0d      	cmp	r3, #13
 80013fe:	d10b      	bne.n	8001418 <lcd_ShowStr+0x7c>
					y += sizey;
 8001400:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001404:	b29a      	uxth	r2, r3
 8001406:	89bb      	ldrh	r3, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	81bb      	strh	r3, [r7, #12]
					x = x0;
 800140c:	8abb      	ldrh	r3, [r7, #20]
 800140e:	81fb      	strh	r3, [r7, #14]
					str++;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	3301      	adds	r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	e017      	b.n	8001448 <lcd_ShowStr+0xac>
				} else {
					lcd_ShowChar(x, y, *str, fc, bc, sizey, mode);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	781a      	ldrb	r2, [r3, #0]
 800141c:	88fc      	ldrh	r4, [r7, #6]
 800141e:	89b9      	ldrh	r1, [r7, #12]
 8001420:	89f8      	ldrh	r0, [r7, #14]
 8001422:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001426:	9302      	str	r3, [sp, #8]
 8001428:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4623      	mov	r3, r4
 8001434:	f7ff fb76 	bl	8000b24 <lcd_ShowChar>
					x += sizey / 2;
 8001438:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	b29a      	uxth	r2, r3
 8001442:	89fb      	ldrh	r3, [r7, #14]
 8001444:	4413      	add	r3, r2
 8001446:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	3301      	adds	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1b2      	bne.n	80013bc <lcd_ShowStr+0x20>
 8001456:	e000      	b.n	800145a <lcd_ShowStr+0xbe>
				return;
 8001458:	bf00      	nop
			}
		}
	}
}
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	200000ac 	.word	0x200000ac

08001464 <lcd_StrCenter>:

void lcd_StrCenter(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af04      	add	r7, sp, #16
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	81fb      	strh	r3, [r7, #14]
 8001472:	460b      	mov	r3, r1
 8001474:	81bb      	strh	r3, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
	uint16_t len = strlen((const char*) str);
 800147a:	68b8      	ldr	r0, [r7, #8]
 800147c:	f7fe fea4 	bl	80001c8 <strlen>
 8001480:	4603      	mov	r3, r0
 8001482:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = (lcddev.width - len * 8) / 2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <lcd_StrCenter+0x60>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	8afb      	ldrh	r3, [r7, #22]
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	0fda      	lsrs	r2, r3, #31
 8001492:	4413      	add	r3, r2
 8001494:	105b      	asrs	r3, r3, #1
 8001496:	82bb      	strh	r3, [r7, #20]
	lcd_ShowStr(x + x1, y, str, fc, bc, sizey, mode);
 8001498:	89fa      	ldrh	r2, [r7, #14]
 800149a:	8abb      	ldrh	r3, [r7, #20]
 800149c:	4413      	add	r3, r2
 800149e:	b298      	uxth	r0, r3
 80014a0:	88fa      	ldrh	r2, [r7, #6]
 80014a2:	89b9      	ldrh	r1, [r7, #12]
 80014a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	8c3b      	ldrh	r3, [r7, #32]
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f7ff ff70 	bl	800139c <lcd_ShowStr>
}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200000ac 	.word	0x200000ac

080014c8 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2140      	movs	r1, #64	; 0x40
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <led_7seg_init+0x14>)
 80014d2:	f000 fe4b 	bl	800216c <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021800 	.word	0x40021800

080014e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e4:	f000 fafe 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e8:	f000 f820 	bl	800152c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ec:	f7ff f94e 	bl	800078c <MX_GPIO_Init>
  MX_TIM2_Init();
 80014f0:	f000 fa5c 	bl	80019ac <MX_TIM2_Init>
  MX_SPI1_Init();
 80014f4:	f000 f96e 	bl	80017d4 <MX_SPI1_Init>
  MX_FSMC_Init();
 80014f8:	f7ff f878 	bl	80005ec <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80014fc:	f000 f880 	bl	8001600 <system_init>
  lcd_clear(WHITE);
 8001500:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001504:	f7ff fa8e 	bl	8000a24 <lcd_clear>
  test_lcd();
 8001508:	f000 f8c2 	bl	8001690 <test_lcd>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(!timer2_flag);
 800150c:	bf00      	nop
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <main+0x48>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0fb      	beq.n	800150e <main+0x2e>
	  timer2_flag = 0;
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <main+0x48>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
	  button_scan();
 800151c:	f7fe ffe6 	bl	80004ec <button_scan>
	  test_button();
 8001520:	f000 f88e 	bl	8001640 <test_button>
	  while(!timer2_flag);
 8001524:	e7f2      	b.n	800150c <main+0x2c>
 8001526:	bf00      	nop
 8001528:	200000b2 	.word	0x200000b2

0800152c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b094      	sub	sp, #80	; 0x50
 8001530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	2230      	movs	r2, #48	; 0x30
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fc96 	bl	8003e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <SystemClock_Config+0xcc>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <SystemClock_Config+0xcc>)
 800155a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800155e:	6413      	str	r3, [r2, #64]	; 0x40
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <SystemClock_Config+0xcc>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <SystemClock_Config+0xd0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a21      	ldr	r2, [pc, #132]	; (80015fc <SystemClock_Config+0xd0>)
 8001576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <SystemClock_Config+0xd0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001588:	2302      	movs	r3, #2
 800158a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158c:	2301      	movs	r3, #1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001590:	2310      	movs	r3, #16
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001594:	2302      	movs	r3, #2
 8001596:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001598:	2300      	movs	r3, #0
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800159c:	2308      	movs	r3, #8
 800159e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015a0:	23a8      	movs	r3, #168	; 0xa8
 80015a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ac:	f107 0320 	add.w	r3, r7, #32
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 fdf5 	bl	80021a0 <HAL_RCC_OscConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015bc:	f000 f8b2 	bl	8001724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2105      	movs	r1, #5
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 f856 	bl	8002690 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015ea:	f000 f89b 	bl	8001724 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	; 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2120      	movs	r1, #32
 8001608:	480c      	ldr	r0, [pc, #48]	; (800163c <system_init+0x3c>)
 800160a:	f000 fdaf 	bl	800216c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <system_init+0x3c>)
 8001614:	f000 fdaa 	bl	800216c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2110      	movs	r1, #16
 800161c:	4807      	ldr	r0, [pc, #28]	; (800163c <system_init+0x3c>)
 800161e:	f000 fda5 	bl	800216c <HAL_GPIO_WritePin>
	  timer2_init();
 8001622:	f000 f885 	bl	8001730 <timer2_init>
	  led_7seg_init();
 8001626:	f7ff ff4f 	bl	80014c8 <led_7seg_init>
	  button_init();
 800162a:	f7fe ff53 	bl	80004d4 <button_init>
	  lcd_init();
 800162e:	f7ff fc5d 	bl	8000eec <lcd_init>
	  timer2_set(50);
 8001632:	2032      	movs	r0, #50	; 0x32
 8001634:	f000 f888 	bl	8001748 <timer2_set>
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000

08001640 <test_button>:
	led_7seg_set_digit(0, 0, 0);
	led_7seg_set_digit(5, 1, 0);
	led_7seg_set_digit(4, 2, 0);
	led_7seg_set_digit(7, 3, 0);
}
void test_button(){
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af04      	add	r7, sp, #16
	for(int i = 0; i < 16; i++){
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e017      	b.n	800167c <test_button+0x3c>
		if(button_count[i] == 1){
 800164c:	4a0f      	ldr	r2, [pc, #60]	; (800168c <test_button+0x4c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d10e      	bne.n	8001676 <test_button+0x36>
			lcd_ShowIntNum(140, 105, i, 2, BRED, WHITE, 32);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	b29a      	uxth	r2, r3
 800165c:	2320      	movs	r3, #32
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2302      	movs	r3, #2
 800166e:	2169      	movs	r1, #105	; 0x69
 8001670:	208c      	movs	r0, #140	; 0x8c
 8001672:	f7ff fb43 	bl	8000cfc <lcd_ShowIntNum>
	for(int i = 0; i < 16; i++){
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3301      	adds	r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	dde4      	ble.n	800164c <test_button+0xc>
		}
	}
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	2000002c 	.word	0x2000002c

08001690 <test_lcd>:
void test_lcd(){
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af04      	add	r7, sp, #16
	lcd_fill(0, 0, 240, 20, BLUE);
 8001696:	231f      	movs	r3, #31
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2314      	movs	r3, #20
 800169c:	22f0      	movs	r2, #240	; 0xf0
 800169e:	2100      	movs	r1, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff f9f1 	bl	8000a88 <lcd_fill>
	lcd_StrCenter(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 80016a6:	2301      	movs	r3, #1
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	2310      	movs	r3, #16
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	231f      	movs	r3, #31
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <test_lcd+0x88>)
 80016b8:	2102      	movs	r1, #2
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff fed2 	bl	8001464 <lcd_StrCenter>
	lcd_ShowStr(20, 30, "Test lcd screen", WHITE, RED, 24, 0);
 80016c0:	2300      	movs	r3, #0
 80016c2:	9302      	str	r3, [sp, #8]
 80016c4:	2318      	movs	r3, #24
 80016c6:	9301      	str	r3, [sp, #4]
 80016c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <test_lcd+0x8c>)
 80016d4:	211e      	movs	r1, #30
 80016d6:	2014      	movs	r0, #20
 80016d8:	f7ff fe60 	bl	800139c <lcd_ShowStr>
	lcd_DrawCircle(60, 120, GREEN, 40, 1);
 80016dc:	2301      	movs	r3, #1
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2328      	movs	r3, #40	; 0x28
 80016e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80016e6:	2178      	movs	r1, #120	; 0x78
 80016e8:	203c      	movs	r0, #60	; 0x3c
 80016ea:	f7ff fdea 	bl	80012c2 <lcd_DrawCircle>
	lcd_DrawCircle(160, 120, BRED, 40, 0);
 80016ee:	2300      	movs	r3, #0
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	2328      	movs	r3, #40	; 0x28
 80016f4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80016f8:	2178      	movs	r1, #120	; 0x78
 80016fa:	20a0      	movs	r0, #160	; 0xa0
 80016fc:	f7ff fde1 	bl	80012c2 <lcd_DrawCircle>
	lcd_ShowPicture(80, 200, 90, 90, gImage_logo);
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <test_lcd+0x90>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	235a      	movs	r3, #90	; 0x5a
 8001706:	225a      	movs	r2, #90	; 0x5a
 8001708:	21c8      	movs	r1, #200	; 0xc8
 800170a:	2050      	movs	r0, #80	; 0x50
 800170c:	f7ff fb74 	bl	8000df8 <lcd_ShowPicture>
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	08003edc 	.word	0x08003edc
 800171c:	08003eec 	.word	0x08003eec
 8001720:	08006e7c 	.word	0x08006e7c

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	MX_TIM2_Init();
 8001734:	f000 f93a 	bl	80019ac <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <timer2_init+0x14>)
 800173a:	f001 fe95 	bl	8003468 <HAL_TIM_Base_Start_IT>
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000110 	.word	0x20000110

08001748 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <timer2_set+0x2c>)
 8001756:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <timer2_set+0x2c>)
 800175a:	881a      	ldrh	r2, [r3, #0]
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <timer2_set+0x30>)
 800175e:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <timer2_set+0x34>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200000b6 	.word	0x200000b6
 8001778:	200000b4 	.word	0x200000b4
 800177c:	200000b2 	.word	0x200000b2

08001780 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	d114      	bne.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017a4:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d106      	bne.n	80017bc <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 80017ae:	4b07      	ldr	r3, [pc, #28]	; (80017cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80017b6:	881a      	ldrh	r2, [r3, #0]
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017ba:	801a      	strh	r2, [r3, #0]
			}
		}
	}
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	200000b4 	.word	0x200000b4
 80017cc:	200000b2 	.word	0x200000b2
 80017d0:	200000b6 	.word	0x200000b6

080017d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <MX_SPI1_Init+0x64>)
 80017da:	4a18      	ldr	r2, [pc, #96]	; (800183c <MX_SPI1_Init+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017de:	4b16      	ldr	r3, [pc, #88]	; (8001838 <MX_SPI1_Init+0x64>)
 80017e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_SPI1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_SPI1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_SPI1_Init+0x64>)
 8001800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_SPI1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <MX_SPI1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_SPI1_Init+0x64>)
 8001820:	220a      	movs	r2, #10
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	; (8001838 <MX_SPI1_Init+0x64>)
 8001826:	f001 f91f 	bl	8002a68 <HAL_SPI_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001830:	f7ff ff78 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200000b8 	.word	0x200000b8
 800183c:	40013000 	.word	0x40013000

08001840 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_SPI_MspInit+0x84>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d12b      	bne.n	80018ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	613b      	str	r3, [r7, #16]
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_SPI_MspInit+0x88>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_SPI_MspInit+0x88>)
 800186c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_SPI_MspInit+0x88>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_SPI_MspInit+0x88>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <HAL_SPI_MspInit+0x88>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	; 0x30
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_SPI_MspInit+0x88>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800189a:	2338      	movs	r3, #56	; 0x38
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018aa:	2305      	movs	r3, #5
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_SPI_MspInit+0x8c>)
 80018b6:	f000 fabd 	bl	8001e34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018ba:	bf00      	nop
 80018bc:	3728      	adds	r7, #40	; 0x28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40013000 	.word	0x40013000
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40020400 	.word	0x40020400

080018d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_MspInit+0x4c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <HAL_MspInit+0x4c>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_MspInit+0x4c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_MspInit+0x4c>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a08      	ldr	r2, [pc, #32]	; (800191c <HAL_MspInit+0x4c>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_MspInit+0x4c>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f90c 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <TIM2_IRQHandler+0x10>)
 800197a:	f001 fde5 	bl	8003548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000110 	.word	0x20000110

08001988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <SystemInit+0x20>)
 800198e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <SystemInit+0x20>)
 8001994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	463b      	mov	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019d2:	f240 3247 	movw	r2, #839	; 0x347
 80019d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019e0:	2263      	movs	r2, #99	; 0x63
 80019e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f0:	4813      	ldr	r0, [pc, #76]	; (8001a40 <MX_TIM2_Init+0x94>)
 80019f2:	f001 fce9 	bl	80033c8 <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019fc:	f7ff fe92 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480c      	ldr	r0, [pc, #48]	; (8001a40 <MX_TIM2_Init+0x94>)
 8001a0e:	f001 fea3 	bl	8003758 <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a18:	f7ff fe84 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_TIM2_Init+0x94>)
 8001a2a:	f002 f8bf 	bl	8003bac <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a34:	f7ff fe76 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000110 	.word	0x20000110

08001a44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a54:	d115      	bne.n	8001a82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a0b      	ldr	r2, [pc, #44]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_TIM_Base_MspInit+0x48>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	201c      	movs	r0, #28
 8001a78:	f000 f9a5 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a7c:	201c      	movs	r0, #28
 8001a7e:	f000 f9be 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a96:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aac:	4c0b      	ldr	r4, [pc, #44]	; (8001adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aba:	f7ff ff65 	bl	8001988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f002 f9dd 	bl	8003e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fd0d 	bl	80014e0 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ad4:	0800ade4 	.word	0x0800ade4
  ldr r2, =_sbss
 8001ad8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001adc:	2000015c 	.word	0x2000015c

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f94f 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff feda 	bl	80018d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f967 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f92f 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	20000158 	.word	0x20000158

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000158 	.word	0x20000158

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000000c 	.word	0x2000000c

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e16b      	b.n	8002128 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 815a 	bne.w	8002122 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d005      	beq.n	8001e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d017      	beq.n	8001f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80b4 	beq.w	8002122 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b60      	ldr	r3, [pc, #384]	; (8002140 <HAL_GPIO_Init+0x30c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a5f      	ldr	r2, [pc, #380]	; (8002140 <HAL_GPIO_Init+0x30c>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b5d      	ldr	r3, [pc, #372]	; (8002140 <HAL_GPIO_Init+0x30c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd6:	4a5b      	ldr	r2, [pc, #364]	; (8002144 <HAL_GPIO_Init+0x310>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <HAL_GPIO_Init+0x314>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d02b      	beq.n	800205a <HAL_GPIO_Init+0x226>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a51      	ldr	r2, [pc, #324]	; (800214c <HAL_GPIO_Init+0x318>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x222>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a50      	ldr	r2, [pc, #320]	; (8002150 <HAL_GPIO_Init+0x31c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x21e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4f      	ldr	r2, [pc, #316]	; (8002154 <HAL_GPIO_Init+0x320>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x21a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4e      	ldr	r2, [pc, #312]	; (8002158 <HAL_GPIO_Init+0x324>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x216>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4d      	ldr	r2, [pc, #308]	; (800215c <HAL_GPIO_Init+0x328>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x212>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_GPIO_Init+0x32c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x20e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_GPIO_Init+0x330>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x20a>
 800203a:	2307      	movs	r3, #7
 800203c:	e00e      	b.n	800205c <HAL_GPIO_Init+0x228>
 800203e:	2308      	movs	r3, #8
 8002040:	e00c      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002042:	2306      	movs	r3, #6
 8002044:	e00a      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002046:	2305      	movs	r3, #5
 8002048:	e008      	b.n	800205c <HAL_GPIO_Init+0x228>
 800204a:	2304      	movs	r3, #4
 800204c:	e006      	b.n	800205c <HAL_GPIO_Init+0x228>
 800204e:	2303      	movs	r3, #3
 8002050:	e004      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002052:	2302      	movs	r3, #2
 8002054:	e002      	b.n	800205c <HAL_GPIO_Init+0x228>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_GPIO_Init+0x228>
 800205a:	2300      	movs	r3, #0
 800205c:	69fa      	ldr	r2, [r7, #28]
 800205e:	f002 0203 	and.w	r2, r2, #3
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	4093      	lsls	r3, r2
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206c:	4935      	ldr	r1, [pc, #212]	; (8002144 <HAL_GPIO_Init+0x310>)
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	3302      	adds	r3, #2
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800207a:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_GPIO_Init+0x334>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209e:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_GPIO_Init+0x334>)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_GPIO_Init+0x334>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <HAL_GPIO_Init+0x334>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_GPIO_Init+0x334>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_GPIO_Init+0x334>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_GPIO_Init+0x334>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_GPIO_Init+0x334>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3301      	adds	r3, #1
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	2b0f      	cmp	r3, #15
 800212c:	f67f ae90 	bls.w	8001e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	40013800 	.word	0x40013800
 8002148:	40020000 	.word	0x40020000
 800214c:	40020400 	.word	0x40020400
 8002150:	40020800 	.word	0x40020800
 8002154:	40020c00 	.word	0x40020c00
 8002158:	40021000 	.word	0x40021000
 800215c:	40021400 	.word	0x40021400
 8002160:	40021800 	.word	0x40021800
 8002164:	40021c00 	.word	0x40021c00
 8002168:	40013c00 	.word	0x40013c00

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002188:	e003      	b.n	8002192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	041a      	lsls	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	619a      	str	r2, [r3, #24]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e267      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d075      	beq.n	80022aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021be:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d00c      	beq.n	80021e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ca:	4b85      	ldr	r3, [pc, #532]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d112      	bne.n	80021fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021d6:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021e2:	d10b      	bne.n	80021fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e4:	4b7e      	ldr	r3, [pc, #504]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d05b      	beq.n	80022a8 <HAL_RCC_OscConfig+0x108>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d157      	bne.n	80022a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e242      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d106      	bne.n	8002214 <HAL_RCC_OscConfig+0x74>
 8002206:	4b76      	ldr	r3, [pc, #472]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a75      	ldr	r2, [pc, #468]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xb0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0x98>
 800221e:	4b70      	ldr	r3, [pc, #448]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6f      	ldr	r2, [pc, #444]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b6d      	ldr	r3, [pc, #436]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a6c      	ldr	r2, [pc, #432]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xb0>
 8002238:	4b69      	ldr	r3, [pc, #420]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a68      	ldr	r2, [pc, #416]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b66      	ldr	r3, [pc, #408]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800224e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fcaa 	bl	8001bb0 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002260:	f7ff fca6 	bl	8001bb0 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e207      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b5b      	ldr	r3, [pc, #364]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xc0>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fc96 	bl	8001bb0 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002288:	f7ff fc92 	bl	8001bb0 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	; 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e1f3      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b51      	ldr	r3, [pc, #324]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0xe8>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022b6:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b47      	ldr	r3, [pc, #284]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ce:	4b44      	ldr	r3, [pc, #272]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x152>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1c7      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	4937      	ldr	r1, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e03a      	b.n	800237e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x244>)
 8002312:	2201      	movs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff fc4b 	bl	8001bb0 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff fc47 	bl	8001bb0 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1a8      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b28      	ldr	r3, [pc, #160]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	4925      	ldr	r1, [pc, #148]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]
 8002350:	e015      	b.n	800237e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCC_OscConfig+0x244>)
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff fc2a 	bl	8001bb0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002360:	f7ff fc26 	bl	8001bb0 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e187      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d036      	beq.n	80023f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d016      	beq.n	80023c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_RCC_OscConfig+0x248>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7ff fc0a 	bl	8001bb0 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023a0:	f7ff fc06 	bl	8001bb0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e167      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b2:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_OscConfig+0x240>)
 80023b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f0      	beq.n	80023a0 <HAL_RCC_OscConfig+0x200>
 80023be:	e01b      	b.n	80023f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x248>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7ff fbf3 	bl	8001bb0 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	e00e      	b.n	80023ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ce:	f7ff fbef 	bl	8001bb0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d907      	bls.n	80023ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e150      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
 80023e0:	40023800 	.word	0x40023800
 80023e4:	42470000 	.word	0x42470000
 80023e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ea      	bne.n	80023ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 8097 	beq.w	8002534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002406:	2300      	movs	r3, #0
 8002408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	4b81      	ldr	r3, [pc, #516]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10f      	bne.n	8002436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b7d      	ldr	r3, [pc, #500]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a7c      	ldr	r2, [pc, #496]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b7a      	ldr	r3, [pc, #488]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b77      	ldr	r3, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002442:	4b74      	ldr	r3, [pc, #464]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a73      	ldr	r2, [pc, #460]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7ff fbaf 	bl	8001bb0 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7ff fbab 	bl	8001bb0 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e10c      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_OscConfig+0x474>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x2ea>
 800247c:	4b64      	ldr	r3, [pc, #400]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a63      	ldr	r2, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x324>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x30c>
 8002492:	4b5f      	ldr	r3, [pc, #380]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a5e      	ldr	r2, [pc, #376]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a5b      	ldr	r2, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x324>
 80024ac:	4b58      	ldr	r3, [pc, #352]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a57      	ldr	r2, [pc, #348]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	4b55      	ldr	r3, [pc, #340]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a54      	ldr	r2, [pc, #336]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024be:	f023 0304 	bic.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff fb70 	bl	8001bb0 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7ff fb6c 	bl	8001bb0 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e0cb      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	4b49      	ldr	r3, [pc, #292]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ee      	beq.n	80024d4 <HAL_RCC_OscConfig+0x334>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7ff fb5a 	bl	8001bb0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7ff fb56 	bl	8001bb0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0b5      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ee      	bne.n	8002500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	4a38      	ldr	r2, [pc, #224]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a1 	beq.w	8002680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b08      	cmp	r3, #8
 8002548:	d05c      	beq.n	8002604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d141      	bne.n	80025d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002552:	4b31      	ldr	r3, [pc, #196]	; (8002618 <HAL_RCC_OscConfig+0x478>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fb2a 	bl	8001bb0 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002560:	f7ff fb26 	bl	8001bb0 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e087      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002572:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	041b      	lsls	r3, r3, #16
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	061b      	lsls	r3, r3, #24
 80025a2:	491b      	ldr	r1, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x478>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff faff 	bl	8001bb0 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b6:	f7ff fafb 	bl	8001bb0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e05c      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x416>
 80025d4:	e054      	b.n	8002680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_RCC_OscConfig+0x478>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7ff fae8 	bl	8001bb0 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7ff fae4 	bl	8001bb0 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e045      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_OscConfig+0x470>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x444>
 8002602:	e03d      	b.n	8002680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d107      	bne.n	800261c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e038      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	40007000 	.word	0x40007000
 8002618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x4ec>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d028      	beq.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d121      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	429a      	cmp	r2, r3
 8002644:	d11a      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800264c:	4013      	ands	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002654:	4293      	cmp	r3, r2
 8002656:	d111      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0cc      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b68      	ldr	r3, [pc, #416]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d90c      	bls.n	80026cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b65      	ldr	r3, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d044      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d119      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d003      	beq.n	800274e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800274a:	2b03      	cmp	r3, #3
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e06f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b3b      	ldr	r3, [pc, #236]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e067      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 0203 	bic.w	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4934      	ldr	r1, [pc, #208]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	4313      	orrs	r3, r2
 800277e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7ff fa16 	bl	8001bb0 <HAL_GetTick>
 8002784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002786:	e00a      	b.n	800279e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002788:	f7ff fa12 	bl	8001bb0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e04f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 020c 	and.w	r2, r3, #12
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1eb      	bne.n	8002788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b25      	ldr	r3, [pc, #148]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d20c      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1b8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f976 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00
 800284c:	40023800 	.word	0x40023800
 8002850:	0800adc4 	.word	0x0800adc4
 8002854:	20000004 	.word	0x20000004
 8002858:	20000008 	.word	0x20000008

0800285c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002860:	b094      	sub	sp, #80	; 0x50
 8002862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	2300      	movs	r3, #0
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800286c:	2300      	movs	r3, #0
 800286e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002874:	4b79      	ldr	r3, [pc, #484]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	2b08      	cmp	r3, #8
 800287e:	d00d      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0x40>
 8002880:	2b08      	cmp	r3, #8
 8002882:	f200 80e1 	bhi.w	8002a48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002886:	2b00      	cmp	r3, #0
 8002888:	d002      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x34>
 800288a:	2b04      	cmp	r3, #4
 800288c:	d003      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x3a>
 800288e:	e0db      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b73      	ldr	r3, [pc, #460]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002892:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002894:	e0db      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002896:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800289a:	e0d8      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800289c:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a6:	4b6d      	ldr	r3, [pc, #436]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b2:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	099b      	lsrs	r3, r3, #6
 80028b8:	2200      	movs	r2, #0
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80028bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028ce:	4622      	mov	r2, r4
 80028d0:	462b      	mov	r3, r5
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f04f 0100 	mov.w	r1, #0
 80028da:	0159      	lsls	r1, r3, #5
 80028dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028e0:	0150      	lsls	r0, r2, #5
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4621      	mov	r1, r4
 80028e8:	1a51      	subs	r1, r2, r1
 80028ea:	6139      	str	r1, [r7, #16]
 80028ec:	4629      	mov	r1, r5
 80028ee:	eb63 0301 	sbc.w	r3, r3, r1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002900:	4659      	mov	r1, fp
 8002902:	018b      	lsls	r3, r1, #6
 8002904:	4651      	mov	r1, sl
 8002906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800290a:	4651      	mov	r1, sl
 800290c:	018a      	lsls	r2, r1, #6
 800290e:	4651      	mov	r1, sl
 8002910:	ebb2 0801 	subs.w	r8, r2, r1
 8002914:	4659      	mov	r1, fp
 8002916:	eb63 0901 	sbc.w	r9, r3, r1
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292e:	4690      	mov	r8, r2
 8002930:	4699      	mov	r9, r3
 8002932:	4623      	mov	r3, r4
 8002934:	eb18 0303 	adds.w	r3, r8, r3
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	462b      	mov	r3, r5
 800293c:	eb49 0303 	adc.w	r3, r9, r3
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800294e:	4629      	mov	r1, r5
 8002950:	024b      	lsls	r3, r1, #9
 8002952:	4621      	mov	r1, r4
 8002954:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002958:	4621      	mov	r1, r4
 800295a:	024a      	lsls	r2, r1, #9
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002962:	2200      	movs	r2, #0
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
 8002966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002968:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800296c:	f7fd fc34 	bl	80001d8 <__aeabi_uldivmod>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4613      	mov	r3, r2
 8002976:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002978:	e058      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800297a:	4b38      	ldr	r3, [pc, #224]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	099b      	lsrs	r3, r3, #6
 8002980:	2200      	movs	r2, #0
 8002982:	4618      	mov	r0, r3
 8002984:	4611      	mov	r1, r2
 8002986:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	2300      	movs	r3, #0
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
 8002990:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002994:	4642      	mov	r2, r8
 8002996:	464b      	mov	r3, r9
 8002998:	f04f 0000 	mov.w	r0, #0
 800299c:	f04f 0100 	mov.w	r1, #0
 80029a0:	0159      	lsls	r1, r3, #5
 80029a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029a6:	0150      	lsls	r0, r2, #5
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4641      	mov	r1, r8
 80029ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029cc:	ebb2 040a 	subs.w	r4, r2, sl
 80029d0:	eb63 050b 	sbc.w	r5, r3, fp
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	00eb      	lsls	r3, r5, #3
 80029de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029e2:	00e2      	lsls	r2, r4, #3
 80029e4:	4614      	mov	r4, r2
 80029e6:	461d      	mov	r5, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	18e3      	adds	r3, r4, r3
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	464b      	mov	r3, r9
 80029f0:	eb45 0303 	adc.w	r3, r5, r3
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a02:	4629      	mov	r1, r5
 8002a04:	028b      	lsls	r3, r1, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	028a      	lsls	r2, r1, #10
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a16:	2200      	movs	r2, #0
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	61fa      	str	r2, [r7, #28]
 8002a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a20:	f7fd fbda 	bl	80001d8 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a46:	e002      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3750      	adds	r7, #80	; 0x50
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	007a1200 	.word	0x007a1200

08002a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07b      	b.n	8002b72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a8a:	d009      	beq.n	8002aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
 8002a92:	e005      	b.n	8002aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7fe fec0 	bl	8001840 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b10:	431a      	orrs	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	ea42 0103 	orr.w	r1, r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	f003 0104 	and.w	r1, r3, #4
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f003 0210 	and.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	69da      	ldr	r2, [r3, #28]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b088      	sub	sp, #32
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b96:	d112      	bne.n	8002bbe <HAL_SPI_Receive+0x44>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10e      	bne.n	8002bbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f8f1 	bl	8002d9c <HAL_SPI_TransmitReceive>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	e0ea      	b.n	8002d94 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_SPI_Receive+0x52>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0e3      	b.n	8002d94 <HAL_SPI_Receive+0x21a>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002bd4:	f7fe ffec 	bl	8001bb0 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d002      	beq.n	8002bec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bea:	e0ca      	b.n	8002d82 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_SPI_Receive+0x7e>
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002bfc:	e0c1      	b.n	8002d82 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2204      	movs	r2, #4
 8002c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c44:	d10f      	bne.n	8002c66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d007      	beq.n	8002c84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d162      	bne.n	8002d52 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c8c:	e02e      	b.n	8002cec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d115      	bne.n	8002cc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f103 020c 	add.w	r2, r3, #12
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb2:	1c5a      	adds	r2, r3, #1
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cc6:	e011      	b.n	8002cec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc8:	f7fe ff72 	bl	8001bb0 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d803      	bhi.n	8002ce0 <HAL_SPI_Receive+0x166>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d102      	bne.n	8002ce6 <HAL_SPI_Receive+0x16c>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002cea:	e04a      	b.n	8002d82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1cb      	bne.n	8002c8e <HAL_SPI_Receive+0x114>
 8002cf6:	e031      	b.n	8002d5c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d113      	bne.n	8002d2e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	b292      	uxth	r2, r2
 8002d12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	1c9a      	adds	r2, r3, #2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d2c:	e011      	b.n	8002d52 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2e:	f7fe ff3f 	bl	8001bb0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d803      	bhi.n	8002d46 <HAL_SPI_Receive+0x1cc>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d102      	bne.n	8002d4c <HAL_SPI_Receive+0x1d2>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d50:	e017      	b.n	8002d82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1cd      	bne.n	8002cf8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	6839      	ldr	r1, [r7, #0]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fa45 	bl	80031f0 <SPI_EndRxTransaction>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
 8002d7e:	e000      	b.n	8002d82 <HAL_SPI_Receive+0x208>
  }

error :
 8002d80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08c      	sub	sp, #48	; 0x30
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002daa:	2301      	movs	r3, #1
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_SPI_TransmitReceive+0x26>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e18a      	b.n	80030d8 <HAL_SPI_TransmitReceive+0x33c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dca:	f7fe fef1 	bl	8001bb0 <HAL_GetTick>
 8002dce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002de0:	887b      	ldrh	r3, [r7, #2]
 8002de2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d00f      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x70>
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002df2:	d107      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d103      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x68>
 8002dfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d003      	beq.n	8002e0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e0a:	e15b      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x82>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_SPI_TransmitReceive+0x82>
 8002e18:	887b      	ldrh	r3, [r7, #2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e24:	e14e      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d003      	beq.n	8002e3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2205      	movs	r2, #5
 8002e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d007      	beq.n	8002e8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e96:	d178      	bne.n	8002f8a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x10a>
 8002ea0:	8b7b      	ldrh	r3, [r7, #26]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d166      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	881a      	ldrh	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	1c9a      	adds	r2, r3, #2
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eca:	e053      	b.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d11b      	bne.n	8002f12 <HAL_SPI_TransmitReceive+0x176>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d016      	beq.n	8002f12 <HAL_SPI_TransmitReceive+0x176>
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d113      	bne.n	8002f12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	881a      	ldrh	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	1c9a      	adds	r2, r3, #2
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d119      	bne.n	8002f54 <HAL_SPI_TransmitReceive+0x1b8>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d014      	beq.n	8002f54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	b292      	uxth	r2, r2
 8002f36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f50:	2301      	movs	r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f54:	f7fe fe2c 	bl	8001bb0 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d807      	bhi.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d003      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f72:	e0a7      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1a6      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x130>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1a1      	bne.n	8002ecc <HAL_SPI_TransmitReceive+0x130>
 8002f88:	e07c      	b.n	8003084 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x1fc>
 8002f92:	8b7b      	ldrh	r3, [r7, #26]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d16b      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	330c      	adds	r3, #12
 8002fa2:	7812      	ldrb	r2, [r2, #0]
 8002fa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fbe:	e057      	b.n	8003070 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d11c      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x26c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d017      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x26c>
 8002fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d114      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b01      	cmp	r3, #1
 8003014:	d119      	bne.n	800304a <HAL_SPI_TransmitReceive+0x2ae>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d014      	beq.n	800304a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003046:	2301      	movs	r3, #1
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800304a:	f7fe fdb1 	bl	8001bb0 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003056:	429a      	cmp	r2, r3
 8003058:	d803      	bhi.n	8003062 <HAL_SPI_TransmitReceive+0x2c6>
 800305a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d102      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x2cc>
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	2b00      	cmp	r3, #0
 8003066:	d103      	bne.n	8003070 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800306e:	e029      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1a2      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x224>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d19d      	bne.n	8002fc0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f917 	bl	80032bc <SPI_EndRxTxTransaction>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030a0:	e010      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030aa:	2300      	movs	r3, #0
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	e000      	b.n	80030c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80030c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3730      	adds	r7, #48	; 0x30
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030f0:	f7fe fd5e 	bl	8001bb0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003100:	f7fe fd56 	bl	8001bb0 <HAL_GetTick>
 8003104:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	015b      	lsls	r3, r3, #5
 800310c:	0d1b      	lsrs	r3, r3, #20
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003116:	e054      	b.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d050      	beq.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003120:	f7fe fd46 	bl	8001bb0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	429a      	cmp	r2, r3
 800312e:	d902      	bls.n	8003136 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d13d      	bne.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314e:	d111      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003158:	d004      	beq.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d107      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317c:	d10f      	bne.n	800319e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e017      	b.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3b01      	subs	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d19b      	bne.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000004 	.word	0x20000004

080031f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003204:	d111      	bne.n	800322a <SPI_EndRxTransaction+0x3a>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320e:	d004      	beq.n	800321a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003218:	d107      	bne.n	800322a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003228:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003232:	d12a      	bne.n	800328a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d012      	beq.n	8003264 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f7ff ff49 	bl	80030e0 <SPI_WaitFlagStateUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02d      	beq.n	80032b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e026      	b.n	80032b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	2101      	movs	r1, #1
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff ff36 	bl	80030e0 <SPI_WaitFlagStateUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01a      	beq.n	80032b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e013      	b.n	80032b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	2101      	movs	r1, #1
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f7ff ff23 	bl	80030e0 <SPI_WaitFlagStateUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	f043 0220 	orr.w	r2, r3, #32
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e000      	b.n	80032b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <SPI_EndRxTxTransaction+0x7c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1b      	ldr	r2, [pc, #108]	; (800333c <SPI_EndRxTxTransaction+0x80>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0d5b      	lsrs	r3, r3, #21
 80032d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032e6:	d112      	bne.n	800330e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	2180      	movs	r1, #128	; 0x80
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff fef4 	bl	80030e0 <SPI_WaitFlagStateUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e00f      	b.n	800332e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b80      	cmp	r3, #128	; 0x80
 8003326:	d0f2      	beq.n	800330e <SPI_EndRxTxTransaction+0x52>
 8003328:	e000      	b.n	800332c <SPI_EndRxTxTransaction+0x70>
        break;
 800332a:	bf00      	nop
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000004 	.word	0x20000004
 800333c:	165e9f81 	.word	0x165e9f81

08003340 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e034      	b.n	80033c0 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d106      	bne.n	8003370 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7fd fa04 	bl	8000778 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	3308      	adds	r3, #8
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f000 fca6 	bl	8003ccc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	461a      	mov	r2, r3
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	f000 fcf0 	bl	8003d70 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6858      	ldr	r0, [r3, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	f000 fd25 	bl	8003dec <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6892      	ldr	r2, [r2, #8]
 80033b6:	f041 0101 	orr.w	r1, r1, #1
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fb28 	bl	8001a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fa96 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e04e      	b.n	800351e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a23      	ldr	r2, [pc, #140]	; (800352c <HAL_TIM_Base_Start_IT+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d022      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x80>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d01d      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x80>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_TIM_Base_Start_IT+0xc8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d018      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x80>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <HAL_TIM_Base_Start_IT+0xcc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d013      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x80>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_TIM_Base_Start_IT+0xd0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00e      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x80>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_TIM_Base_Start_IT+0xd4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x80>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_TIM_Base_Start_IT+0xd8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x80>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_TIM_Base_Start_IT+0xdc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d111      	bne.n	800350c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d010      	beq.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350a:	e007      	b.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40010400 	.word	0x40010400
 8003540:	40014000 	.word	0x40014000
 8003544:	40001800 	.word	0x40001800

08003548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0202 	mvn.w	r2, #2
 8003574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f9b5 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f9a7 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f9b8 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0204 	mvn.w	r2, #4
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f98b 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f97d 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f98e 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b08      	cmp	r3, #8
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0208 	mvn.w	r2, #8
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f961 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f953 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f964 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b10      	cmp	r3, #16
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2208      	movs	r2, #8
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f937 	bl	80038fa <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f929 	bl	80038e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f93a 	bl	800390e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0201 	mvn.w	r2, #1
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7fe f85a 	bl	8001780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fae0 	bl	8003cb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d10e      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003710:	2b40      	cmp	r3, #64	; 0x40
 8003712:	d107      	bne.n	8003724 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800371c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f8ff 	bl	8003922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b20      	cmp	r3, #32
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b20      	cmp	r3, #32
 800373e:	d107      	bne.n	8003750 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0220 	mvn.w	r2, #32
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 faaa 	bl	8003ca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003750:	bf00      	nop
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIM_ConfigClockSource+0x1c>
 8003770:	2302      	movs	r3, #2
 8003772:	e0b4      	b.n	80038de <HAL_TIM_ConfigClockSource+0x186>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800379a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ac:	d03e      	beq.n	800382c <HAL_TIM_ConfigClockSource+0xd4>
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b2:	f200 8087 	bhi.w	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	f000 8086 	beq.w	80038ca <HAL_TIM_ConfigClockSource+0x172>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d87f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b70      	cmp	r3, #112	; 0x70
 80037c6:	d01a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xa6>
 80037c8:	2b70      	cmp	r3, #112	; 0x70
 80037ca:	d87b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d050      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x11a>
 80037d0:	2b60      	cmp	r3, #96	; 0x60
 80037d2:	d877      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d03c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xfa>
 80037d8:	2b50      	cmp	r3, #80	; 0x50
 80037da:	d873      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d058      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x13a>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d86f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d064      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15a>
 80037e8:	2b30      	cmp	r3, #48	; 0x30
 80037ea:	d86b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d060      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15a>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d867      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15a>
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d05a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x15a>
 80037fc:	e062      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f000 f9ad 	bl	8003b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003820:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	609a      	str	r2, [r3, #8]
      break;
 800382a:	e04f      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f000 f996 	bl	8003b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384e:	609a      	str	r2, [r3, #8]
      break;
 8003850:	e03c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f000 f90a 	bl	8003a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2150      	movs	r1, #80	; 0x50
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f963 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 8003870:	e02c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f000 f929 	bl	8003ad6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2160      	movs	r1, #96	; 0x60
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f953 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 8003890:	e01c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 f8ea 	bl	8003a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f943 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 80038b0:	e00c      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 f93a 	bl	8003b36 <TIM_ITRx_SetConfig>
      break;
 80038c2:	e003      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	73fb      	strb	r3, [r7, #15]
      break;
 80038c8:	e000      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390e:	b480      	push	{r7}
 8003910:	b083      	sub	sp, #12
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a40      	ldr	r2, [pc, #256]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d013      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d00f      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <TIM_Base_SetConfig+0x118>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00b      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <TIM_Base_SetConfig+0x11c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d007      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3b      	ldr	r2, [pc, #236]	; (8003a58 <TIM_Base_SetConfig+0x120>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d003      	beq.n	8003978 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d108      	bne.n	800398a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a2f      	ldr	r2, [pc, #188]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02b      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d027      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a2c      	ldr	r2, [pc, #176]	; (8003a50 <TIM_Base_SetConfig+0x118>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d023      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2b      	ldr	r2, [pc, #172]	; (8003a54 <TIM_Base_SetConfig+0x11c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01f      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <TIM_Base_SetConfig+0x120>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01b      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d017      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a28      	ldr	r2, [pc, #160]	; (8003a60 <TIM_Base_SetConfig+0x128>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a27      	ldr	r2, [pc, #156]	; (8003a64 <TIM_Base_SetConfig+0x12c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00f      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a26      	ldr	r2, [pc, #152]	; (8003a68 <TIM_Base_SetConfig+0x130>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00b      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <TIM_Base_SetConfig+0x134>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a24      	ldr	r2, [pc, #144]	; (8003a70 <TIM_Base_SetConfig+0x138>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d003      	beq.n	80039ea <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a23      	ldr	r2, [pc, #140]	; (8003a74 <TIM_Base_SetConfig+0x13c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d108      	bne.n	80039fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <TIM_Base_SetConfig+0x114>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d003      	beq.n	8003a30 <TIM_Base_SetConfig+0xf8>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0c      	ldr	r2, [pc, #48]	; (8003a5c <TIM_Base_SetConfig+0x124>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d103      	bne.n	8003a38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	615a      	str	r2, [r3, #20]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40010000 	.word	0x40010000
 8003a50:	40000400 	.word	0x40000400
 8003a54:	40000800 	.word	0x40000800
 8003a58:	40000c00 	.word	0x40000c00
 8003a5c:	40010400 	.word	0x40010400
 8003a60:	40014000 	.word	0x40014000
 8003a64:	40014400 	.word	0x40014400
 8003a68:	40014800 	.word	0x40014800
 8003a6c:	40001800 	.word	0x40001800
 8003a70:	40001c00 	.word	0x40001c00
 8003a74:	40002000 	.word	0x40002000

08003a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f023 0201 	bic.w	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f023 030a 	bic.w	r3, r3, #10
 8003ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	bf00      	nop
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b087      	sub	sp, #28
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	f023 0210 	bic.w	r2, r3, #16
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	031b      	lsls	r3, r3, #12
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b085      	sub	sp, #20
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f043 0307 	orr.w	r3, r3, #7
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	609a      	str	r2, [r3, #8]
}
 8003b60:	bf00      	nop
 8003b62:	3714      	adds	r7, #20
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	021a      	lsls	r2, r3, #8
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d101      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	e05a      	b.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a21      	ldr	r2, [pc, #132]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d022      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c10:	d01d      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d018      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a18      	ldr	r2, [pc, #96]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10c      	bne.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40000800 	.word	0x40000800
 8003c94:	40000c00 	.word	0x40000c00
 8003c98:	40010400 	.word	0x40010400
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40001800 	.word	0x40001800

08003ca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4b20      	ldr	r3, [pc, #128]	; (8003d6c <FSMC_NORSRAM_Init+0xa0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003cf6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8003cfc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8003d02:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8003d08:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8003d0e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8003d14:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8003d1a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8003d20:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8003d26:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8003d2c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8003d32:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8003d38:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d103      	bne.n	8003d50 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	fff00080 	.word	0xfff00080

08003d70 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003d92:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003d9e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8003da6:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8003dae:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003db8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	3b02      	subs	r3, #2
 8003dc0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8003dc2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	371c      	adds	r7, #28
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e04:	d122      	bne.n	8003e4c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003e22:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8003e2a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8003e32:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8003e38:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e4a:	e005      	b.n	8003e58 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	cff00000 	.word	0xcff00000

08003e6c <memset>:
 8003e6c:	4402      	add	r2, r0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d100      	bne.n	8003e76 <memset+0xa>
 8003e74:	4770      	bx	lr
 8003e76:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7a:	e7f9      	b.n	8003e70 <memset+0x4>

08003e7c <__libc_init_array>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4d0d      	ldr	r5, [pc, #52]	; (8003eb4 <__libc_init_array+0x38>)
 8003e80:	4c0d      	ldr	r4, [pc, #52]	; (8003eb8 <__libc_init_array+0x3c>)
 8003e82:	1b64      	subs	r4, r4, r5
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	2600      	movs	r6, #0
 8003e88:	42a6      	cmp	r6, r4
 8003e8a:	d109      	bne.n	8003ea0 <__libc_init_array+0x24>
 8003e8c:	4d0b      	ldr	r5, [pc, #44]	; (8003ebc <__libc_init_array+0x40>)
 8003e8e:	4c0c      	ldr	r4, [pc, #48]	; (8003ec0 <__libc_init_array+0x44>)
 8003e90:	f000 f818 	bl	8003ec4 <_init>
 8003e94:	1b64      	subs	r4, r4, r5
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	2600      	movs	r6, #0
 8003e9a:	42a6      	cmp	r6, r4
 8003e9c:	d105      	bne.n	8003eaa <__libc_init_array+0x2e>
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea4:	4798      	blx	r3
 8003ea6:	3601      	adds	r6, #1
 8003ea8:	e7ee      	b.n	8003e88 <__libc_init_array+0xc>
 8003eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eae:	4798      	blx	r3
 8003eb0:	3601      	adds	r6, #1
 8003eb2:	e7f2      	b.n	8003e9a <__libc_init_array+0x1e>
 8003eb4:	0800addc 	.word	0x0800addc
 8003eb8:	0800addc 	.word	0x0800addc
 8003ebc:	0800addc 	.word	0x0800addc
 8003ec0:	0800ade0 	.word	0x0800ade0

08003ec4 <_init>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	bf00      	nop
 8003ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eca:	bc08      	pop	{r3}
 8003ecc:	469e      	mov	lr, r3
 8003ece:	4770      	bx	lr

08003ed0 <_fini>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr
