
Bai3_LCD_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000440c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ef8  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b48c  0800b48c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800b48c  0800b48c  0001b48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b494  0800b494  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b494  0800b494  0001b494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800b49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000194  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a8  200001a8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ee3a  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b6d  00000000  00000000  0002eec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec8  00000000  00000000  00031a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b34  00000000  00000000  000328f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000224d8  00000000  00000000  0003342c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012258  00000000  00000000  00055904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd019  00000000  00000000  00067b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003bb8  00000000  00000000  00134b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  00138730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800457c 	.word	0x0800457c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800457c 	.word	0x0800457c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <button_init>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void button_init() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d8:	2201      	movs	r2, #1
 80004da:	2108      	movs	r1, #8
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <button_init+0x14>)
 80004de:	f002 f865 	bl	80025ac <HAL_GPIO_WritePin>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40020c00 	.word	0x40020c00

080004ec <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2108      	movs	r1, #8
 80004f6:	482f      	ldr	r0, [pc, #188]	; (80005b4 <button_scan+0xc8>)
 80004f8:	f002 f858 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	482c      	ldr	r0, [pc, #176]	; (80005b4 <button_scan+0xc8>)
 8000502:	f002 f853 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 8000506:	230a      	movs	r3, #10
 8000508:	2202      	movs	r2, #2
 800050a:	492b      	ldr	r1, [pc, #172]	; (80005b8 <button_scan+0xcc>)
 800050c:	482b      	ldr	r0, [pc, #172]	; (80005bc <button_scan+0xd0>)
 800050e:	f002 fe90 	bl	8003232 <HAL_SPI_Receive>

	int button_index = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	e03f      	b.n	80005a2 <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2b00      	cmp	r3, #0
 8000526:	db06      	blt.n	8000536 <button_scan+0x4a>
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	dc03      	bgt.n	8000536 <button_scan+0x4a>
			button_index = i + 4;
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3304      	adds	r3, #4
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e018      	b.n	8000568 <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b03      	cmp	r3, #3
 800053a:	dd07      	ble.n	800054c <button_scan+0x60>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b07      	cmp	r3, #7
 8000540:	dc04      	bgt.n	800054c <button_scan+0x60>
			button_index = 7 - i;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	f1c3 0307 	rsb	r3, r3, #7
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e00d      	b.n	8000568 <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b07      	cmp	r3, #7
 8000550:	dd06      	ble.n	8000560 <button_scan+0x74>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0b      	cmp	r3, #11
 8000556:	dc03      	bgt.n	8000560 <button_scan+0x74>
			button_index = i + 4;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	3304      	adds	r3, #4
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	e003      	b.n	8000568 <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	f1c3 0317 	rsb	r3, r3, #23
 8000566:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <button_scan+0xcc>)
 800056a:	881a      	ldrh	r2, [r3, #0]
 800056c:	897b      	ldrh	r3, [r7, #10]
 800056e:	4013      	ands	r3, r2
 8000570:	b29b      	uxth	r3, r3
 8000572:	2b00      	cmp	r3, #0
 8000574:	d005      	beq.n	8000582 <button_scan+0x96>
			button_count[button_index] = 0;
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <button_scan+0xd4>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2100      	movs	r1, #0
 800057c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000580:	e009      	b.n	8000596 <button_scan+0xaa>
		else
			button_count[button_index]++;
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <button_scan+0xd4>)
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800058a:	3301      	adds	r3, #1
 800058c:	b299      	uxth	r1, r3
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <button_scan+0xd4>)
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	085b      	lsrs	r3, r3, #1
 800059a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	3301      	adds	r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	ddbc      	ble.n	8000522 <button_scan+0x36>
	}
}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020c00 	.word	0x40020c00
 80005b8:	20000050 	.word	0x20000050
 80005bc:	200000bc 	.word	0x200000bc
 80005c0:	20000030 	.word	0x20000030

080005c4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_FSMC_Init+0xec>)
 80005f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005f6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f8:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <MX_FSMC_Init+0xec>)
 80005fa:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <MX_FSMC_Init+0xf0>)
 80005fc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005fe:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800060a:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <MX_FSMC_Init+0xec>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000612:	2210      	movs	r2, #16
 8000614:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000616:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_FSMC_Init+0xec>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000622:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_FSMC_Init+0xec>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800062e:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_FSMC_Init+0xec>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000646:	2200      	movs	r2, #0
 8000648:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_FSMC_Init+0xec>)
 800064c:	2200      	movs	r2, #0
 800064e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000652:	2200      	movs	r2, #0
 8000654:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000656:	230f      	movs	r3, #15
 8000658:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800065a:	230f      	movs	r3, #15
 800065c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800065e:	233c      	movs	r3, #60	; 0x3c
 8000660:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000666:	2310      	movs	r3, #16
 8000668:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800066a:	2311      	movs	r3, #17
 800066c:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800066e:	2300      	movs	r3, #0
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000672:	2308      	movs	r3, #8
 8000674:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000676:	230f      	movs	r3, #15
 8000678:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800067a:	2309      	movs	r3, #9
 800067c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000682:	2310      	movs	r3, #16
 8000684:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000686:	2311      	movs	r3, #17
 8000688:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800068e:	463a      	mov	r2, r7
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_FSMC_Init+0xec>)
 8000698:	f003 f9ae 	bl	80039f8 <HAL_SRAM_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80006a2:	f001 f9a3 	bl	80019ec <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80006a6:	bf00      	nop
 80006a8:	3738      	adds	r7, #56	; 0x38
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000054 	.word	0x20000054
 80006b4:	a0000104 	.word	0xa0000104

080006b8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <HAL_FSMC_MspInit+0x88>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d131      	bne.n	8000738 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <HAL_FSMC_MspInit+0x88>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e2:	4a18      	ldr	r2, [pc, #96]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6393      	str	r3, [r2, #56]	; 0x38
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_FSMC_MspInit+0x8c>)
 80006ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006f6:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006fa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000708:	230c      	movs	r3, #12
 800070a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <HAL_FSMC_MspInit+0x90>)
 8000712:	f001 fdaf 	bl	8002274 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000716:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800071a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000728:	230c      	movs	r3, #12
 800072a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4619      	mov	r1, r3
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <HAL_FSMC_MspInit+0x94>)
 8000732:	f001 fd9f 	bl	8002274 <HAL_GPIO_Init>
 8000736:	e000      	b.n	800073a <HAL_FSMC_MspInit+0x82>
    return;
 8000738:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000a4 	.word	0x200000a4
 8000744:	40023800 	.word	0x40023800
 8000748:	40021000 	.word	0x40021000
 800074c:	40020c00 	.word	0x40020c00

08000750 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000758:	f7ff ffae 	bl	80006b8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <MX_GPIO_Init+0x1d8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a6e      	ldr	r2, [pc, #440]	; (800093c <MX_GPIO_Init+0x1d8>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b6c      	ldr	r3, [pc, #432]	; (800093c <MX_GPIO_Init+0x1d8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0310 	and.w	r3, r3, #16
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <MX_GPIO_Init+0x1d8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a67      	ldr	r2, [pc, #412]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b65      	ldr	r3, [pc, #404]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	4b61      	ldr	r3, [pc, #388]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a60      	ldr	r2, [pc, #384]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b5e      	ldr	r3, [pc, #376]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b5a      	ldr	r3, [pc, #360]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a59      	ldr	r2, [pc, #356]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b57      	ldr	r3, [pc, #348]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	4b53      	ldr	r3, [pc, #332]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a52      	ldr	r2, [pc, #328]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b50      	ldr	r3, [pc, #320]	; (800093c <MX_GPIO_Init+0x1d8>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MX_GPIO_Init+0x1d8>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a4b      	ldr	r2, [pc, #300]	; (800093c <MX_GPIO_Init+0x1d8>)
 8000810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b49      	ldr	r3, [pc, #292]	; (800093c <MX_GPIO_Init+0x1d8>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b45      	ldr	r3, [pc, #276]	; (800093c <MX_GPIO_Init+0x1d8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a44      	ldr	r2, [pc, #272]	; (800093c <MX_GPIO_Init+0x1d8>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b42      	ldr	r3, [pc, #264]	; (800093c <MX_GPIO_Init+0x1d8>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2170      	movs	r1, #112	; 0x70
 8000842:	483f      	ldr	r0, [pc, #252]	; (8000940 <MX_GPIO_Init+0x1dc>)
 8000844:	f001 feb2 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	483d      	ldr	r0, [pc, #244]	; (8000944 <MX_GPIO_Init+0x1e0>)
 8000850:	f001 feac 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	483b      	ldr	r0, [pc, #236]	; (8000948 <MX_GPIO_Init+0x1e4>)
 800085a:	f001 fea7 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000864:	4839      	ldr	r0, [pc, #228]	; (800094c <MX_GPIO_Init+0x1e8>)
 8000866:	f001 fea1 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2108      	movs	r1, #8
 800086e:	4838      	ldr	r0, [pc, #224]	; (8000950 <MX_GPIO_Init+0x1ec>)
 8000870:	f001 fe9c 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000874:	2370      	movs	r3, #112	; 0x70
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	482d      	ldr	r0, [pc, #180]	; (8000940 <MX_GPIO_Init+0x1dc>)
 800088c:	f001 fcf2 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4826      	ldr	r0, [pc, #152]	; (8000944 <MX_GPIO_Init+0x1e0>)
 80008aa:	f001 fce3 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80008ae:	23c0      	movs	r3, #192	; 0xc0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4822      	ldr	r0, [pc, #136]	; (800094c <MX_GPIO_Init+0x1e8>)
 80008c2:	f001 fcd7 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008c6:	2330      	movs	r3, #48	; 0x30
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <MX_GPIO_Init+0x1e0>)
 80008da:	f001 fccb 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008de:	2340      	movs	r3, #64	; 0x40
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	4814      	ldr	r0, [pc, #80]	; (8000948 <MX_GPIO_Init+0x1e4>)
 80008f6:	f001 fcbd 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <MX_GPIO_Init+0x1e8>)
 8000914:	f001 fcae 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000918:	2308      	movs	r3, #8
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	4619      	mov	r1, r3
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <MX_GPIO_Init+0x1ec>)
 8000930:	f001 fca0 	bl	8002274 <HAL_GPIO_Init>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	; 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40021800 	.word	0x40021800
 800094c:	40020000 	.word	0x40020000
 8000950:	40020c00 	.word	0x40020c00

08000954 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 800095e:	4a04      	ldr	r2, [pc, #16]	; (8000970 <LCD_WR_REG+0x1c>)
 8000960:	88fb      	ldrh	r3, [r7, #6]
 8000962:	8013      	strh	r3, [r2, #0]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	600ffffe 	.word	0x600ffffe

08000974 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <LCD_WR_DATA+0x1c>)
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	8053      	strh	r3, [r2, #2]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	600ffffe 	.word	0x600ffffe

08000994 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <LCD_RD_DATA+0x20>)
 800099c:	885b      	ldrh	r3, [r3, #2]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	b29b      	uxth	r3, r3
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	370c      	adds	r7, #12
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	600ffffe 	.word	0x600ffffe

080009b8 <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4604      	mov	r4, r0
 80009c0:	4608      	mov	r0, r1
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	4623      	mov	r3, r4
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	4603      	mov	r3, r0
 80009cc:	80bb      	strh	r3, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	807b      	strh	r3, [r7, #2]
 80009d2:	4613      	mov	r3, r2
 80009d4:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 80009d6:	202a      	movs	r0, #42	; 0x2a
 80009d8:	f7ff ffbc 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ffc6 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff ffc0 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff ffba 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	b29b      	uxth	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffb4 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8000a0c:	202b      	movs	r0, #43	; 0x2b
 8000a0e:	f7ff ffa1 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8000a12:	88bb      	ldrh	r3, [r7, #4]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ffab 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8000a1e:	88bb      	ldrh	r3, [r7, #4]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff ffa5 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 8000a2a:	883b      	ldrh	r3, [r7, #0]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff9f 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 8000a36:	883b      	ldrh	r3, [r7, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff99 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 8000a42:	202c      	movs	r0, #44	; 0x2c
 8000a44:	f7ff ff86 	bl	8000954 <LCD_WR_REG>
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}

08000a50 <lcd_clear>:
/**
 * @brief  Fill all pixels with a color
 * @param  color Color to fill the screen
 * @retval None
 */
void lcd_clear(uint16_t color) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	80fb      	strh	r3, [r7, #6]
	uint16_t i, j;
	lcd_set_address(0, 0, lcddev.width - 1, lcddev.height - 1);
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <lcd_clear+0x60>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <lcd_clear+0x60>)
 8000a64:	885b      	ldrh	r3, [r3, #2]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff ffa3 	bl	80009b8 <lcd_set_address>
	for (i = 0; i < lcddev.width; i++) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	81fb      	strh	r3, [r7, #14]
 8000a76:	e011      	b.n	8000a9c <lcd_clear+0x4c>
		for (j = 0; j < lcddev.height; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	81bb      	strh	r3, [r7, #12]
 8000a7c:	e006      	b.n	8000a8c <lcd_clear+0x3c>
			LCD_WR_DATA(color);
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff77 	bl	8000974 <LCD_WR_DATA>
		for (j = 0; j < lcddev.height; j++) {
 8000a86:	89bb      	ldrh	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	81bb      	strh	r3, [r7, #12]
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <lcd_clear+0x60>)
 8000a8e:	885b      	ldrh	r3, [r3, #2]
 8000a90:	89ba      	ldrh	r2, [r7, #12]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f3      	bcc.n	8000a7e <lcd_clear+0x2e>
	for (i = 0; i < lcddev.width; i++) {
 8000a96:	89fb      	ldrh	r3, [r7, #14]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	81fb      	strh	r3, [r7, #14]
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <lcd_clear+0x60>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	89fa      	ldrh	r2, [r7, #14]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d3e8      	bcc.n	8000a78 <lcd_clear+0x28>
		}
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200000a8 	.word	0x200000a8

08000ab4 <lcd_fill>:
 * @param  yend	End row
 * @param  color Color to fill
 * @retval None
 */
void lcd_fill(uint16_t xsta, uint16_t ysta, uint16_t xend, uint16_t yend,
		uint16_t color) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4604      	mov	r4, r0
 8000abc:	4608      	mov	r0, r1
 8000abe:	4611      	mov	r1, r2
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	80fb      	strh	r3, [r7, #6]
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80bb      	strh	r3, [r7, #4]
 8000aca:	460b      	mov	r3, r1
 8000acc:	807b      	strh	r3, [r7, #2]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	lcd_set_address(xsta, ysta, xend - 1, yend - 1);
 8000ad2:	887b      	ldrh	r3, [r7, #2]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	883b      	ldrh	r3, [r7, #0]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	88b9      	ldrh	r1, [r7, #4]
 8000ae0:	88f8      	ldrh	r0, [r7, #6]
 8000ae2:	f7ff ff69 	bl	80009b8 <lcd_set_address>
	for (i = ysta; i < yend; i++) {
 8000ae6:	88bb      	ldrh	r3, [r7, #4]
 8000ae8:	81fb      	strh	r3, [r7, #14]
 8000aea:	e010      	b.n	8000b0e <lcd_fill+0x5a>
		for (j = xsta; j < xend; j++) {
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	81bb      	strh	r3, [r7, #12]
 8000af0:	e006      	b.n	8000b00 <lcd_fill+0x4c>
			LCD_WR_DATA(color);
 8000af2:	8c3b      	ldrh	r3, [r7, #32]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff3d 	bl	8000974 <LCD_WR_DATA>
		for (j = xsta; j < xend; j++) {
 8000afa:	89bb      	ldrh	r3, [r7, #12]
 8000afc:	3301      	adds	r3, #1
 8000afe:	81bb      	strh	r3, [r7, #12]
 8000b00:	89ba      	ldrh	r2, [r7, #12]
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3f4      	bcc.n	8000af2 <lcd_fill+0x3e>
	for (i = ysta; i < yend; i++) {
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	81fb      	strh	r3, [r7, #14]
 8000b0e:	89fa      	ldrh	r2, [r7, #14]
 8000b10:	883b      	ldrh	r3, [r7, #0]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d3ea      	bcc.n	8000aec <lcd_fill+0x38>
		}
	}
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	80fb      	strh	r3, [r7, #6]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	80bb      	strh	r3, [r7, #4]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	88fa      	ldrh	r2, [r7, #6]
 8000b36:	88b9      	ldrh	r1, [r7, #4]
 8000b38:	88f8      	ldrh	r0, [r7, #6]
 8000b3a:	f7ff ff3d 	bl	80009b8 <lcd_set_address>
	LCD_WR_DATA(color);
 8000b3e:	887b      	ldrh	r3, [r7, #2]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff17 	bl	8000974 <LCD_WR_DATA>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <lcd_draw_line>:
 * @param  y2 Y coordinate of end point
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 8000b4e:	b590      	push	{r4, r7, lr}
 8000b50:	b08d      	sub	sp, #52	; 0x34
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4604      	mov	r4, r0
 8000b56:	4608      	mov	r0, r1
 8000b58:	4611      	mov	r1, r2
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4623      	mov	r3, r4
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	4603      	mov	r3, r0
 8000b62:	80bb      	strh	r3, [r7, #4]
 8000b64:	460b      	mov	r3, r1
 8000b66:	807b      	strh	r3, [r7, #2]
 8000b68:	4613      	mov	r3, r2
 8000b6a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1;
 8000b74:	887a      	ldrh	r2, [r7, #2]
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8000b7c:	883a      	ldrh	r2, [r7, #0]
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8000b88:	88bb      	ldrh	r3, [r7, #4]
 8000b8a:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	dd02      	ble.n	8000b98 <lcd_draw_line+0x4a>
		incx = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00b      	b.n	8000bb0 <lcd_draw_line+0x62>
	else if (delta_x == 0)
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <lcd_draw_line+0x56>
		incx = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e005      	b.n	8000bb0 <lcd_draw_line+0x62>
	else {
		incx = -1;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	425b      	negs	r3, r3
 8000bae:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	dd02      	ble.n	8000bbc <lcd_draw_line+0x6e>
		incy = 1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	e00b      	b.n	8000bd4 <lcd_draw_line+0x86>
	else if (delta_y == 0)
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d102      	bne.n	8000bc8 <lcd_draw_line+0x7a>
		incy = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	e005      	b.n	8000bd4 <lcd_draw_line+0x86>
	else {
		incy = -1;
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	425b      	negs	r3, r3
 8000bd2:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8000bd4:	6a3a      	ldr	r2, [r7, #32]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dd02      	ble.n	8000be2 <lcd_draw_line+0x94>
		distance = delta_x;
 8000bdc:	6a3b      	ldr	r3, [r7, #32]
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	e001      	b.n	8000be6 <lcd_draw_line+0x98>
	else
		distance = delta_y;
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	61bb      	str	r3, [r7, #24]
	for (t = 0; t < distance + 1; t++) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000bea:	e02b      	b.n	8000c44 <lcd_draw_line+0xf6>
		lcd_draw_point(uRow, uCol, color);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	b291      	uxth	r1, r2
 8000bf4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff91 	bl	8000b20 <lcd_draw_point>
		xerr += delta_x;
 8000bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	4413      	add	r3, r2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 8000c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8000c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dd07      	ble.n	8000c26 <lcd_draw_line+0xd8>
			xerr -= distance;
 8000c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8000c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	dd07      	ble.n	8000c3e <lcd_draw_line+0xf0>
			yerr -= distance;
 8000c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t < distance + 1; t++) {
 8000c3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c40:	3301      	adds	r3, #1
 8000c42:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000c44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dacf      	bge.n	8000bec <lcd_draw_line+0x9e>
		}
	}
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	3734      	adds	r7, #52	; 0x34
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd90      	pop	{r4, r7, pc}

08000c56 <lcd_draw_rectangle>:

void lcd_draw_rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 8000c56:	b590      	push	{r4, r7, lr}
 8000c58:	b085      	sub	sp, #20
 8000c5a:	af02      	add	r7, sp, #8
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	4608      	mov	r0, r1
 8000c60:	4611      	mov	r1, r2
 8000c62:	461a      	mov	r2, r3
 8000c64:	4623      	mov	r3, r4
 8000c66:	80fb      	strh	r3, [r7, #6]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	80bb      	strh	r3, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
 8000c70:	4613      	mov	r3, r2
 8000c72:	803b      	strh	r3, [r7, #0]
	lcd_draw_line(x1, y1, x2, y1, color);
 8000c74:	88bc      	ldrh	r4, [r7, #4]
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	88b9      	ldrh	r1, [r7, #4]
 8000c7a:	88f8      	ldrh	r0, [r7, #6]
 8000c7c:	8b3b      	ldrh	r3, [r7, #24]
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	4623      	mov	r3, r4
 8000c82:	f7ff ff64 	bl	8000b4e <lcd_draw_line>
	lcd_draw_line(x1, y1, x1, y2, color);
 8000c86:	883c      	ldrh	r4, [r7, #0]
 8000c88:	88fa      	ldrh	r2, [r7, #6]
 8000c8a:	88b9      	ldrh	r1, [r7, #4]
 8000c8c:	88f8      	ldrh	r0, [r7, #6]
 8000c8e:	8b3b      	ldrh	r3, [r7, #24]
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	4623      	mov	r3, r4
 8000c94:	f7ff ff5b 	bl	8000b4e <lcd_draw_line>
	lcd_draw_line(x1, y2, x2, y2, color);
 8000c98:	883c      	ldrh	r4, [r7, #0]
 8000c9a:	887a      	ldrh	r2, [r7, #2]
 8000c9c:	8839      	ldrh	r1, [r7, #0]
 8000c9e:	88f8      	ldrh	r0, [r7, #6]
 8000ca0:	8b3b      	ldrh	r3, [r7, #24]
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	4623      	mov	r3, r4
 8000ca6:	f7ff ff52 	bl	8000b4e <lcd_draw_line>
	lcd_draw_line(x2, y1, x2, y2, color);
 8000caa:	883c      	ldrh	r4, [r7, #0]
 8000cac:	887a      	ldrh	r2, [r7, #2]
 8000cae:	88b9      	ldrh	r1, [r7, #4]
 8000cb0:	8878      	ldrh	r0, [r7, #2]
 8000cb2:	8b3b      	ldrh	r3, [r7, #24]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	f7ff ff49 	bl	8000b4e <lcd_draw_line>
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd90      	pop	{r4, r7, pc}

08000cc4 <lcd_show_char>:

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4604      	mov	r4, r0
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80bb      	strh	r3, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	70fb      	strb	r3, [r7, #3]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 8000ce6:	88fb      	ldrh	r3, [r7, #6]
 8000ce8:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 8000cea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf14      	ite	ne
 8000d06:	2301      	movne	r3, #1
 8000d08:	2300      	moveq	r3, #0
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	4413      	add	r3, r2
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	fb12 f303 	smulbb	r3, r2, r3
 8000d1a:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	3b20      	subs	r3, #32
 8000d20:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4413      	add	r3, r2
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b29c      	uxth	r4, r3
 8000d30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	88bb      	ldrh	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	88b9      	ldrh	r1, [r7, #4]
 8000d42:	88f8      	ldrh	r0, [r7, #6]
 8000d44:	4622      	mov	r2, r4
 8000d46:	f7ff fe37 	bl	80009b8 <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	827b      	strh	r3, [r7, #18]
 8000d4e:	e07a      	b.n	8000e46 <lcd_show_char+0x182>
		if (sizey == 12)
 8000d50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d54:	2b0c      	cmp	r3, #12
 8000d56:	d028      	beq.n	8000daa <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000d58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d5c:	2b10      	cmp	r3, #16
 8000d5e:	d108      	bne.n	8000d72 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	8a7b      	ldrh	r3, [r7, #18]
 8000d64:	493c      	ldr	r1, [pc, #240]	; (8000e58 <lcd_show_char+0x194>)
 8000d66:	0112      	lsls	r2, r2, #4
 8000d68:	440a      	add	r2, r1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	75fb      	strb	r3, [r7, #23]
 8000d70:	e01b      	b.n	8000daa <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000d72:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d76:	2b18      	cmp	r3, #24
 8000d78:	d10b      	bne.n	8000d92 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 8000d7a:	78fa      	ldrb	r2, [r7, #3]
 8000d7c:	8a79      	ldrh	r1, [r7, #18]
 8000d7e:	4837      	ldr	r0, [pc, #220]	; (8000e5c <lcd_show_char+0x198>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	4403      	add	r3, r0
 8000d8a:	440b      	add	r3, r1
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	75fb      	strb	r3, [r7, #23]
 8000d90:	e00b      	b.n	8000daa <lcd_show_char+0xe6>
		else if (sizey == 32)
 8000d92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d96:	2b20      	cmp	r3, #32
 8000d98:	d15a      	bne.n	8000e50 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 8000d9a:	78fa      	ldrb	r2, [r7, #3]
 8000d9c:	8a7b      	ldrh	r3, [r7, #18]
 8000d9e:	4930      	ldr	r1, [pc, #192]	; (8000e60 <lcd_show_char+0x19c>)
 8000da0:	0192      	lsls	r2, r2, #6
 8000da2:	440a      	add	r2, r1
 8000da4:	4413      	add	r3, r2
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 8000daa:	2300      	movs	r3, #0
 8000dac:	75bb      	strb	r3, [r7, #22]
 8000dae:	e044      	b.n	8000e3a <lcd_show_char+0x176>
			if (!mode) {
 8000db0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d120      	bne.n	8000dfa <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 8000db8:	7dfa      	ldrb	r2, [r7, #23]
 8000dba:	7dbb      	ldrb	r3, [r7, #22]
 8000dbc:	fa42 f303 	asr.w	r3, r2, r3
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d004      	beq.n	8000dd2 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 8000dc8:	883b      	ldrh	r3, [r7, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fdd2 	bl	8000974 <LCD_WR_DATA>
 8000dd0:	e003      	b.n	8000dda <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 8000dd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fdcd 	bl	8000974 <LCD_WR_DATA>
				m++;
 8000dda:	7d7b      	ldrb	r3, [r7, #21]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 8000de0:	7d7b      	ldrb	r3, [r7, #21]
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000de8:	fb01 f202 	mul.w	r2, r1, r2
 8000dec:	1a9b      	subs	r3, r3, r2
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d11f      	bne.n	8000e34 <lcd_show_char+0x170>
					m = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	757b      	strb	r3, [r7, #21]
					break;
 8000df8:	e022      	b.n	8000e40 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 8000dfa:	7dfa      	ldrb	r2, [r7, #23]
 8000dfc:	7dbb      	ldrb	r3, [r7, #22]
 8000dfe:	fa42 f303 	asr.w	r3, r2, r3
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d005      	beq.n	8000e16 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 8000e0a:	883a      	ldrh	r2, [r7, #0]
 8000e0c:	88b9      	ldrh	r1, [r7, #4]
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fe85 	bl	8000b20 <lcd_draw_point>
				x++;
 8000e16:	88fb      	ldrh	r3, [r7, #6]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	8a3b      	ldrh	r3, [r7, #16]
 8000e20:	1ad2      	subs	r2, r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d105      	bne.n	8000e34 <lcd_show_char+0x170>
					x = x0;
 8000e28:	8a3b      	ldrh	r3, [r7, #16]
 8000e2a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000e2c:	88bb      	ldrh	r3, [r7, #4]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	80bb      	strh	r3, [r7, #4]
					break;
 8000e32:	e005      	b.n	8000e40 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8000e34:	7dbb      	ldrb	r3, [r7, #22]
 8000e36:	3301      	adds	r3, #1
 8000e38:	75bb      	strb	r3, [r7, #22]
 8000e3a:	7dbb      	ldrb	r3, [r7, #22]
 8000e3c:	2b07      	cmp	r3, #7
 8000e3e:	d9b7      	bls.n	8000db0 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000e40:	8a7b      	ldrh	r3, [r7, #18]
 8000e42:	3301      	adds	r3, #1
 8000e44:	827b      	strh	r3, [r7, #18]
 8000e46:	8a7a      	ldrh	r2, [r7, #18]
 8000e48:	89bb      	ldrh	r3, [r7, #12]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d380      	bcc.n	8000d50 <lcd_show_char+0x8c>
 8000e4e:	e000      	b.n	8000e52 <lcd_show_char+0x18e>
			return;
 8000e50:	bf00      	nop
				}
			}
		}
	}
}
 8000e52:	371c      	adds	r7, #28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	080045b4 	.word	0x080045b4
 8000e5c:	08004ba4 	.word	0x08004ba4
 8000e60:	08005d74 	.word	0x08005d74

08000e64 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000e78:	e004      	b.n	8000e84 <mypow+0x20>
		result *= m;
 8000e7a:	79fa      	ldrb	r2, [r7, #7]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	fb02 f303 	mul.w	r3, r2, r3
 8000e82:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000e84:	79bb      	ldrb	r3, [r7, #6]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	71ba      	strb	r2, [r7, #6]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f5      	bne.n	8000e7a <mypow+0x16>
	return result;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af04      	add	r7, sp, #16
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	4608      	mov	r0, r1
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4623      	mov	r3, r4
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80bb      	strh	r3, [r7, #4]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	807b      	strh	r3, [r7, #2]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 8000ebe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e059      	b.n	8000f80 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 8000ecc:	887c      	ldrh	r4, [r7, #2]
 8000ece:	787a      	ldrb	r2, [r7, #1]
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4619      	mov	r1, r3
 8000edc:	200a      	movs	r0, #10
 8000ede:	f7ff ffc1 	bl	8000e64 <mypow>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	fbb4 f1f3 	udiv	r1, r4, r3
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <lcd_show_int_num+0xf8>)
 8000eea:	fba3 2301 	umull	r2, r3, r3, r1
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	1aca      	subs	r2, r1, r3
 8000efa:	4613      	mov	r3, r2
 8000efc:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d121      	bne.n	8000f48 <lcd_show_int_num+0xac>
 8000f04:	7bfa      	ldrb	r2, [r7, #15]
 8000f06:	787b      	ldrb	r3, [r7, #1]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	da1c      	bge.n	8000f48 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8000f0e:	7b3b      	ldrb	r3, [r7, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d117      	bne.n	8000f44 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	fb12 f303 	smulbb	r3, r2, r3
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	88fb      	ldrh	r3, [r7, #6]
 8000f24:	4413      	add	r3, r2
 8000f26:	b298      	uxth	r0, r3
 8000f28:	8c3a      	ldrh	r2, [r7, #32]
 8000f2a:	88b9      	ldrh	r1, [r7, #4]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	9302      	str	r3, [sp, #8]
 8000f30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	f7ff fec1 	bl	8000cc4 <lcd_show_char>
				continue;
 8000f42:	e01a      	b.n	8000f7a <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	7b7b      	ldrb	r3, [r7, #13]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	fb12 f303 	smulbb	r3, r2, r3
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	4413      	add	r3, r2
 8000f5a:	b298      	uxth	r0, r3
 8000f5c:	7b3b      	ldrb	r3, [r7, #12]
 8000f5e:	3330      	adds	r3, #48	; 0x30
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	8c3c      	ldrh	r4, [r7, #32]
 8000f64:	88b9      	ldrh	r1, [r7, #4]
 8000f66:	2300      	movs	r3, #0
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	4623      	mov	r3, r4
 8000f76:	f7ff fea5 	bl	8000cc4 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	7bfa      	ldrb	r2, [r7, #15]
 8000f82:	787b      	ldrb	r3, [r7, #1]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d3a1      	bcc.n	8000ecc <lcd_show_int_num+0x30>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	cccccccd 	.word	0xcccccccd

08000f98 <lcd_show_picture>:
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
	}
}

void lcd_show_picture(uint16_t x, uint16_t y, uint16_t length, uint16_t width,
		const uint8_t pic[]) {
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	4603      	mov	r3, r0
 8000fac:	80bb      	strh	r3, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	807b      	strh	r3, [r7, #2]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	803b      	strh	r3, [r7, #0]
	uint8_t picH, picL;
	uint16_t i, j;
	uint32_t k = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
	lcd_set_address(x, y, x + length - 1, y + width - 1);
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	887b      	ldrh	r3, [r7, #2]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b29c      	uxth	r4, r3
 8000fc6:	88ba      	ldrh	r2, [r7, #4]
 8000fc8:	883b      	ldrh	r3, [r7, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	88b9      	ldrh	r1, [r7, #4]
 8000fd4:	88f8      	ldrh	r0, [r7, #6]
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	f7ff fcee 	bl	80009b8 <lcd_set_address>
	for (i = 0; i < length; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	82fb      	strh	r3, [r7, #22]
 8000fe0:	e027      	b.n	8001032 <lcd_show_picture+0x9a>
		for (j = 0; j < width; j++) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	82bb      	strh	r3, [r7, #20]
 8000fe6:	e01d      	b.n	8001024 <lcd_show_picture+0x8c>
			picH = pic[k * 2];
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	73fb      	strb	r3, [r7, #15]
			picL = pic[k * 2 + 1];
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH << 8 | picL);
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	021b      	lsls	r3, r3, #8
 8001006:	b21a      	sxth	r2, r3
 8001008:	7bbb      	ldrb	r3, [r7, #14]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	b21b      	sxth	r3, r3
 8001010:	b29b      	uxth	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fcae 	bl	8000974 <LCD_WR_DATA>
			k++;
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	3301      	adds	r3, #1
 800101c:	613b      	str	r3, [r7, #16]
		for (j = 0; j < width; j++) {
 800101e:	8abb      	ldrh	r3, [r7, #20]
 8001020:	3301      	adds	r3, #1
 8001022:	82bb      	strh	r3, [r7, #20]
 8001024:	8aba      	ldrh	r2, [r7, #20]
 8001026:	883b      	ldrh	r3, [r7, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3dd      	bcc.n	8000fe8 <lcd_show_picture+0x50>
	for (i = 0; i < length; i++) {
 800102c:	8afb      	ldrh	r3, [r7, #22]
 800102e:	3301      	adds	r3, #1
 8001030:	82fb      	strh	r3, [r7, #22]
 8001032:	8afa      	ldrh	r2, [r7, #22]
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	429a      	cmp	r2, r3
 8001038:	d3d3      	bcc.n	8000fe2 <lcd_show_picture+0x4a>
		}
	}
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}

08001044 <lcd_set_direction>:

void lcd_set_direction(uint8_t dir) {
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d007      	beq.n	800106e <lcd_set_direction+0x2a>
		lcddev.width = 320;
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <lcd_set_direction+0x44>)
 8001060:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001064:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <lcd_set_direction+0x44>)
 8001068:	22f0      	movs	r2, #240	; 0xf0
 800106a:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 800106c:	e006      	b.n	800107c <lcd_set_direction+0x38>
		lcddev.width = 240;
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <lcd_set_direction+0x44>)
 8001070:	22f0      	movs	r2, #240	; 0xf0
 8001072:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <lcd_set_direction+0x44>)
 8001076:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800107a:	805a      	strh	r2, [r3, #2]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	200000a8 	.word	0x200000a8

0800108c <lcd_init>:

void lcd_init(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	48aa      	ldr	r0, [pc, #680]	; (8001340 <lcd_init+0x2b4>)
 8001098:	f001 fa88 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800109c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a0:	f000 ffb2 	bl	8002008 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010aa:	48a5      	ldr	r0, [pc, #660]	; (8001340 <lcd_init+0x2b4>)
 80010ac:	f001 fa7e 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b4:	f000 ffa8 	bl	8002008 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ffc3 	bl	8001044 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 80010be:	20d3      	movs	r0, #211	; 0xd3
 80010c0:	f7ff fc48 	bl	8000954 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 80010c4:	f7ff fc66 	bl	8000994 <LCD_RD_DATA>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <lcd_init+0x2b8>)
 80010ce:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80010d0:	f7ff fc60 	bl	8000994 <LCD_RD_DATA>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b9a      	ldr	r3, [pc, #616]	; (8001344 <lcd_init+0x2b8>)
 80010da:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 80010dc:	f7ff fc5a 	bl	8000994 <LCD_RD_DATA>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b97      	ldr	r3, [pc, #604]	; (8001344 <lcd_init+0x2b8>)
 80010e6:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 80010e8:	4b96      	ldr	r3, [pc, #600]	; (8001344 <lcd_init+0x2b8>)
 80010ea:	889b      	ldrh	r3, [r3, #4]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b94      	ldr	r3, [pc, #592]	; (8001344 <lcd_init+0x2b8>)
 80010f2:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 80010f4:	f7ff fc4e 	bl	8000994 <LCD_RD_DATA>
 80010f8:	4603      	mov	r3, r0
 80010fa:	461a      	mov	r2, r3
 80010fc:	4b91      	ldr	r3, [pc, #580]	; (8001344 <lcd_init+0x2b8>)
 80010fe:	889b      	ldrh	r3, [r3, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	b29a      	uxth	r2, r3
 8001104:	4b8f      	ldr	r3, [pc, #572]	; (8001344 <lcd_init+0x2b8>)
 8001106:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001108:	20cf      	movs	r0, #207	; 0xcf
 800110a:	f7ff fc23 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fc30 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001114:	20c1      	movs	r0, #193	; 0xc1
 8001116:	f7ff fc2d 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800111a:	2030      	movs	r0, #48	; 0x30
 800111c:	f7ff fc2a 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001120:	20ed      	movs	r0, #237	; 0xed
 8001122:	f7ff fc17 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001126:	2064      	movs	r0, #100	; 0x64
 8001128:	f7ff fc24 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 800112c:	2003      	movs	r0, #3
 800112e:	f7ff fc21 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001132:	2012      	movs	r0, #18
 8001134:	f7ff fc1e 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001138:	2081      	movs	r0, #129	; 0x81
 800113a:	f7ff fc1b 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800113e:	20e8      	movs	r0, #232	; 0xe8
 8001140:	f7ff fc08 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001144:	2085      	movs	r0, #133	; 0x85
 8001146:	f7ff fc15 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800114a:	2010      	movs	r0, #16
 800114c:	f7ff fc12 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001150:	207a      	movs	r0, #122	; 0x7a
 8001152:	f7ff fc0f 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001156:	20cb      	movs	r0, #203	; 0xcb
 8001158:	f7ff fbfc 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800115c:	2039      	movs	r0, #57	; 0x39
 800115e:	f7ff fc09 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001162:	202c      	movs	r0, #44	; 0x2c
 8001164:	f7ff fc06 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fc03 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800116e:	2034      	movs	r0, #52	; 0x34
 8001170:	f7ff fc00 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001174:	2002      	movs	r0, #2
 8001176:	f7ff fbfd 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800117a:	20f7      	movs	r0, #247	; 0xf7
 800117c:	f7ff fbea 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001180:	2020      	movs	r0, #32
 8001182:	f7ff fbf7 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001186:	20ea      	movs	r0, #234	; 0xea
 8001188:	f7ff fbe4 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff fbf1 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001192:	2000      	movs	r0, #0
 8001194:	f7ff fbee 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001198:	20c0      	movs	r0, #192	; 0xc0
 800119a:	f7ff fbdb 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800119e:	201b      	movs	r0, #27
 80011a0:	f7ff fbe8 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011a4:	20c1      	movs	r0, #193	; 0xc1
 80011a6:	f7ff fbd5 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011aa:	2001      	movs	r0, #1
 80011ac:	f7ff fbe2 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011b0:	20c5      	movs	r0, #197	; 0xc5
 80011b2:	f7ff fbcf 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011b6:	2030      	movs	r0, #48	; 0x30
 80011b8:	f7ff fbdc 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011bc:	2030      	movs	r0, #48	; 0x30
 80011be:	f7ff fbd9 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011c2:	20c7      	movs	r0, #199	; 0xc7
 80011c4:	f7ff fbc6 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011c8:	20b7      	movs	r0, #183	; 0xb7
 80011ca:	f7ff fbd3 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011ce:	2036      	movs	r0, #54	; 0x36
 80011d0:	f7ff fbc0 	bl	8000954 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 80011d4:	2008      	movs	r0, #8
 80011d6:	f7ff fbcd 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80011da:	203a      	movs	r0, #58	; 0x3a
 80011dc:	f7ff fbba 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011e0:	2055      	movs	r0, #85	; 0x55
 80011e2:	f7ff fbc7 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011e6:	20b1      	movs	r0, #177	; 0xb1
 80011e8:	f7ff fbb4 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff fbc1 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80011f2:	201a      	movs	r0, #26
 80011f4:	f7ff fbbe 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80011f8:	20b6      	movs	r0, #182	; 0xb6
 80011fa:	f7ff fbab 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80011fe:	200a      	movs	r0, #10
 8001200:	f7ff fbb8 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001204:	20a2      	movs	r0, #162	; 0xa2
 8001206:	f7ff fbb5 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800120a:	20f2      	movs	r0, #242	; 0xf2
 800120c:	f7ff fba2 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fbaf 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001216:	2026      	movs	r0, #38	; 0x26
 8001218:	f7ff fb9c 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fba9 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001222:	20e0      	movs	r0, #224	; 0xe0
 8001224:	f7ff fb96 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001228:	200f      	movs	r0, #15
 800122a:	f7ff fba3 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800122e:	202a      	movs	r0, #42	; 0x2a
 8001230:	f7ff fba0 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001234:	2028      	movs	r0, #40	; 0x28
 8001236:	f7ff fb9d 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800123a:	2008      	movs	r0, #8
 800123c:	f7ff fb9a 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001240:	200e      	movs	r0, #14
 8001242:	f7ff fb97 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001246:	2008      	movs	r0, #8
 8001248:	f7ff fb94 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 800124c:	2054      	movs	r0, #84	; 0x54
 800124e:	f7ff fb91 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001252:	20a9      	movs	r0, #169	; 0xa9
 8001254:	f7ff fb8e 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001258:	2043      	movs	r0, #67	; 0x43
 800125a:	f7ff fb8b 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800125e:	200a      	movs	r0, #10
 8001260:	f7ff fb88 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001264:	200f      	movs	r0, #15
 8001266:	f7ff fb85 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800126a:	2000      	movs	r0, #0
 800126c:	f7ff fb82 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff fb7f 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fb7c 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fb79 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001282:	20e1      	movs	r0, #225	; 0xe1
 8001284:	f7ff fb66 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fb73 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800128e:	2015      	movs	r0, #21
 8001290:	f7ff fb70 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001294:	2017      	movs	r0, #23
 8001296:	f7ff fb6d 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800129a:	2007      	movs	r0, #7
 800129c:	f7ff fb6a 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012a0:	2011      	movs	r0, #17
 80012a2:	f7ff fb67 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012a6:	2006      	movs	r0, #6
 80012a8:	f7ff fb64 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012ac:	202b      	movs	r0, #43	; 0x2b
 80012ae:	f7ff fb61 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012b2:	2056      	movs	r0, #86	; 0x56
 80012b4:	f7ff fb5e 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012b8:	203c      	movs	r0, #60	; 0x3c
 80012ba:	f7ff fb5b 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012be:	2005      	movs	r0, #5
 80012c0:	f7ff fb58 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012c4:	2010      	movs	r0, #16
 80012c6:	f7ff fb55 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012ca:	200f      	movs	r0, #15
 80012cc:	f7ff fb52 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012d0:	203f      	movs	r0, #63	; 0x3f
 80012d2:	f7ff fb4f 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012d6:	203f      	movs	r0, #63	; 0x3f
 80012d8:	f7ff fb4c 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012dc:	200f      	movs	r0, #15
 80012de:	f7ff fb49 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012e2:	202b      	movs	r0, #43	; 0x2b
 80012e4:	f7ff fb36 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fb43 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff fb40 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fb3d 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80012fa:	203f      	movs	r0, #63	; 0x3f
 80012fc:	f7ff fb3a 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001300:	202a      	movs	r0, #42	; 0x2a
 8001302:	f7ff fb27 	bl	8000954 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fb34 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fb31 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fb2e 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001318:	20ef      	movs	r0, #239	; 0xef
 800131a:	f7ff fb2b 	bl	8000974 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 800131e:	2011      	movs	r0, #17
 8001320:	f7ff fb18 	bl	8000954 <LCD_WR_REG>
	HAL_Delay(120);
 8001324:	2078      	movs	r0, #120	; 0x78
 8001326:	f000 fe6f 	bl	8002008 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 800132a:	2029      	movs	r0, #41	; 0x29
 800132c:	f7ff fb12 	bl	8000954 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <lcd_init+0x2bc>)
 8001338:	f001 f938 	bl	80025ac <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40020800 	.word	0x40020800
 8001344:	200000a8 	.word	0x200000a8
 8001348:	40020000 	.word	0x40020000

0800134c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	603b      	str	r3, [r7, #0]
	lcd_draw_point(xc + x, yc + y, c);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	b29a      	uxth	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	b29b      	uxth	r3, r3
 8001362:	4413      	add	r3, r2
 8001364:	b298      	uxth	r0, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	b29a      	uxth	r2, r3
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	8b3a      	ldrh	r2, [r7, #24]
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fbd3 	bl	8000b20 <lcd_draw_point>

	lcd_draw_point(xc - x, yc + y, c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	b29a      	uxth	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	b29b      	uxth	r3, r3
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b298      	uxth	r0, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	b29a      	uxth	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4413      	add	r3, r2
 8001390:	b29b      	uxth	r3, r3
 8001392:	8b3a      	ldrh	r2, [r7, #24]
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fbc3 	bl	8000b20 <lcd_draw_point>

	lcd_draw_point(xc + x, yc - y, c);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	b29a      	uxth	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4413      	add	r3, r2
 80013a4:	b298      	uxth	r0, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fbb3 	bl	8000b20 <lcd_draw_point>

	lcd_draw_point(xc - x, yc - y, c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b298      	uxth	r0, r3
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	8b3a      	ldrh	r2, [r7, #24]
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fba3 	bl	8000b20 <lcd_draw_point>

	lcd_draw_point(xc + y, yc + x, c);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	b298      	uxth	r0, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	8b3a      	ldrh	r2, [r7, #24]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f7ff fb93 	bl	8000b20 <lcd_draw_point>

	lcd_draw_point(xc - y, yc + x, c);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	b298      	uxth	r0, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	8b3a      	ldrh	r2, [r7, #24]
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb83 	bl	8000b20 <lcd_draw_point>

	lcd_draw_point(xc + y, yc - x, c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	b29a      	uxth	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b29b      	uxth	r3, r3
 8001422:	4413      	add	r3, r2
 8001424:	b298      	uxth	r0, r3
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	b29a      	uxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	b29b      	uxth	r3, r3
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	8b3a      	ldrh	r2, [r7, #24]
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb73 	bl	8000b20 <lcd_draw_point>

	lcd_draw_point(xc - y, yc - x, c);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	b29a      	uxth	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b298      	uxth	r0, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	b29a      	uxth	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	b29b      	uxth	r3, r3
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	b29b      	uxth	r3, r3
 8001452:	8b3a      	ldrh	r2, [r7, #24]
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb63 	bl	8000b20 <lcd_draw_point>
}
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <lcd_draw_circle>:

void lcd_draw_circle(int xc, int yc, uint16_t c, int r, int fill)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b08a      	sub	sp, #40	; 0x28
 8001466:	af02      	add	r7, sp, #8
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4613      	mov	r3, r2
 8001470:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	f1c3 0303 	rsb	r3, r3, #3
 8001482:	613b      	str	r3, [r7, #16]

	if (fill) {
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	2b00      	cmp	r3, #0
 8001488:	d04f      	beq.n	800152a <lcd_draw_circle+0xc8>
		while (x <= y) {
 800148a:	e029      	b.n	80014e0 <lcd_draw_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <lcd_draw_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f7ff ff55 	bl	800134c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	ddf0      	ble.n	8001492 <lcd_draw_circle+0x30>

			if (d < 0) {
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da06      	bge.n	80014c4 <lcd_draw_circle+0x62>
				d = d + 4 * x + 6;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4413      	add	r3, r2
 80014be:	3306      	adds	r3, #6
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e00a      	b.n	80014da <lcd_draw_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	009a      	lsls	r2, r3, #2
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4413      	add	r3, r2
 80014d0:	330a      	adds	r3, #10
 80014d2:	613b      	str	r3, [r7, #16]
				y--;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	ddd1      	ble.n	800148c <lcd_draw_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80014e8:	e023      	b.n	8001532 <lcd_draw_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	68b9      	ldr	r1, [r7, #8]
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7ff ff29 	bl	800134c <_draw_circle_8>
			if (d < 0) {
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	da06      	bge.n	800150e <lcd_draw_circle+0xac>
				d = d + 4 * x + 6;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	009a      	lsls	r2, r3, #2
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4413      	add	r3, r2
 8001508:	3306      	adds	r3, #6
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	e00a      	b.n	8001524 <lcd_draw_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 800150e:	69fa      	ldr	r2, [r7, #28]
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	009a      	lsls	r2, r3, #2
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4413      	add	r3, r2
 800151a:	330a      	adds	r3, #10
 800151c:	613b      	str	r3, [r7, #16]
				y--;
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	3b01      	subs	r3, #1
 8001522:	61bb      	str	r3, [r7, #24]
			x++;
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	3301      	adds	r3, #1
 8001528:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	429a      	cmp	r2, r3
 8001530:	dddb      	ble.n	80014ea <lcd_draw_circle+0x88>
}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <lcd_show_string>:

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af04      	add	r7, sp, #16
 8001542:	60ba      	str	r2, [r7, #8]
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	81fb      	strh	r3, [r7, #14]
 800154a:	460b      	mov	r3, r1
 800154c:	81bb      	strh	r3, [r7, #12]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001552:	89fb      	ldrh	r3, [r7, #14]
 8001554:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800155a:	e048      	b.n	80015ee <lcd_show_string+0xb2>
		if (!bHz) {
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d145      	bne.n	80015ee <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001562:	89fa      	ldrh	r2, [r7, #14]
 8001564:	4b26      	ldr	r3, [pc, #152]	; (8001600 <lcd_show_string+0xc4>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800156e:	085b      	lsrs	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	1acb      	subs	r3, r1, r3
 8001574:	429a      	cmp	r2, r3
 8001576:	dc3f      	bgt.n	80015f8 <lcd_show_string+0xbc>
 8001578:	89ba      	ldrh	r2, [r7, #12]
 800157a:	4b21      	ldr	r3, [pc, #132]	; (8001600 <lcd_show_string+0xc4>)
 800157c:	885b      	ldrh	r3, [r3, #2]
 800157e:	4619      	mov	r1, r3
 8001580:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001584:	1acb      	subs	r3, r1, r3
 8001586:	429a      	cmp	r2, r3
 8001588:	dc36      	bgt.n	80015f8 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b80      	cmp	r3, #128	; 0x80
 8001590:	d902      	bls.n	8001598 <lcd_show_string+0x5c>
				bHz = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
 8001596:	e02a      	b.n	80015ee <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b0d      	cmp	r3, #13
 800159e:	d10b      	bne.n	80015b8 <lcd_show_string+0x7c>
					y += sizey;
 80015a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80015ac:	8abb      	ldrh	r3, [r7, #20]
 80015ae:	81fb      	strh	r3, [r7, #14]
					str++;
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	e017      	b.n	80015e8 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	88fc      	ldrh	r4, [r7, #6]
 80015be:	89b9      	ldrh	r1, [r7, #12]
 80015c0:	89f8      	ldrh	r0, [r7, #14]
 80015c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80015c6:	9302      	str	r3, [sp, #8]
 80015c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	4623      	mov	r3, r4
 80015d4:	f7ff fb76 	bl	8000cc4 <lcd_show_char>
					x += sizey / 2;
 80015d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	4413      	add	r3, r2
 80015e6:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3301      	adds	r3, #1
 80015ec:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1b2      	bne.n	800155c <lcd_show_string+0x20>
 80015f6:	e000      	b.n	80015fa <lcd_show_string+0xbe>
				return;
 80015f8:	bf00      	nop
			}
		}
	}
}
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd90      	pop	{r4, r7, pc}
 8001600:	200000a8 	.word	0x200000a8

08001604 <lcd_show_string_center>:

void lcd_show_string_center(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af04      	add	r7, sp, #16
 800160a:	60ba      	str	r2, [r7, #8]
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	81fb      	strh	r3, [r7, #14]
 8001612:	460b      	mov	r3, r1
 8001614:	81bb      	strh	r3, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	80fb      	strh	r3, [r7, #6]
	uint16_t len = strlen((const char*) str);
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f7fe fdd4 	bl	80001c8 <strlen>
 8001620:	4603      	mov	r3, r0
 8001622:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = (lcddev.width - len * 8) / 2;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <lcd_show_string_center+0x60>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	8afb      	ldrh	r3, [r7, #22]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	0fda      	lsrs	r2, r3, #31
 8001632:	4413      	add	r3, r2
 8001634:	105b      	asrs	r3, r3, #1
 8001636:	82bb      	strh	r3, [r7, #20]
	lcd_show_string(x + x1, y, str, fc, bc, sizey, mode);
 8001638:	89fa      	ldrh	r2, [r7, #14]
 800163a:	8abb      	ldrh	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	b298      	uxth	r0, r3
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	89b9      	ldrh	r1, [r7, #12]
 8001644:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	8c3b      	ldrh	r3, [r7, #32]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f7ff ff70 	bl	800153c <lcd_show_string>
}
 800165c:	bf00      	nop
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200000a8 	.word	0x200000a8

08001668 <led_7seg_init>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void led_7seg_init() {
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <led_7seg_init+0x14>)
 8001672:	f000 ff9b 	bl	80025ac <HAL_GPIO_WritePin>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021800 	.word	0x40021800

08001680 <led_7seg_display>:
 * @brief	Scan led 7 segment
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led_7seg_display() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001684:	4b3f      	ldr	r3, [pc, #252]	; (8001784 <led_7seg_display+0x104>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <led_7seg_display+0x104>)
 800168e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led_7seg[led_7seg_index] << 8;
 8001690:	4b3d      	ldr	r3, [pc, #244]	; (8001788 <led_7seg_display+0x108>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b3d      	ldr	r3, [pc, #244]	; (800178c <led_7seg_display+0x10c>)
 8001698:	5c9b      	ldrb	r3, [r3, r2]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	4b39      	ldr	r3, [pc, #228]	; (8001784 <led_7seg_display+0x104>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	4b36      	ldr	r3, [pc, #216]	; (8001784 <led_7seg_display+0x104>)
 80016ac:	801a      	strh	r2, [r3, #0]

	switch (led_7seg_index) {
 80016ae:	4b36      	ldr	r3, [pc, #216]	; (8001788 <led_7seg_display+0x108>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d846      	bhi.n	8001744 <led_7seg_display+0xc4>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <led_7seg_display+0x3c>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016eb 	.word	0x080016eb
 80016c4:	08001709 	.word	0x08001709
 80016c8:	08001727 	.word	0x08001727
	case 0:
		spi_buffer |= 0x00b0;
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <led_7seg_display+0x104>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b2b      	ldr	r3, [pc, #172]	; (8001784 <led_7seg_display+0x104>)
 80016d8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 80016da:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <led_7seg_display+0x104>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016e2:	b29a      	uxth	r2, r3
 80016e4:	4b27      	ldr	r3, [pc, #156]	; (8001784 <led_7seg_display+0x104>)
 80016e6:	801a      	strh	r2, [r3, #0]
		break;
 80016e8:	e02d      	b.n	8001746 <led_7seg_display+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <led_7seg_display+0x104>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <led_7seg_display+0x104>)
 80016f6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <led_7seg_display+0x104>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	f023 0320 	bic.w	r3, r3, #32
 8001700:	b29a      	uxth	r2, r3
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <led_7seg_display+0x104>)
 8001704:	801a      	strh	r2, [r3, #0]
		break;
 8001706:	e01e      	b.n	8001746 <led_7seg_display+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <led_7seg_display+0x104>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <led_7seg_display+0x104>)
 8001714:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <led_7seg_display+0x104>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	f023 0310 	bic.w	r3, r3, #16
 800171e:	b29a      	uxth	r2, r3
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <led_7seg_display+0x104>)
 8001722:	801a      	strh	r2, [r3, #0]
		break;
 8001724:	e00f      	b.n	8001746 <led_7seg_display+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <led_7seg_display+0x104>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800172e:	b29a      	uxth	r2, r3
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <led_7seg_display+0x104>)
 8001732:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <led_7seg_display+0x104>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800173c:	b29a      	uxth	r2, r3
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <led_7seg_display+0x104>)
 8001740:	801a      	strh	r2, [r3, #0]
		break;
 8001742:	e000      	b.n	8001746 <led_7seg_display+0xc6>
	default:
		break;
 8001744:	bf00      	nop
	}

	led_7seg_index = (led_7seg_index + 1) % 4;
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <led_7seg_display+0x108>)
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	425a      	negs	r2, r3
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	f002 0203 	and.w	r2, r2, #3
 8001756:	bf58      	it	pl
 8001758:	4253      	negpl	r3, r2
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <led_7seg_display+0x108>)
 800175e:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2140      	movs	r1, #64	; 0x40
 8001764:	480a      	ldr	r0, [pc, #40]	; (8001790 <led_7seg_display+0x110>)
 8001766:	f000 ff21 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*) &spi_buffer, 2, 1);
 800176a:	2301      	movs	r3, #1
 800176c:	2202      	movs	r2, #2
 800176e:	4905      	ldr	r1, [pc, #20]	; (8001784 <led_7seg_display+0x104>)
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <led_7seg_display+0x114>)
 8001772:	f001 fc22 	bl	8002fba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001776:	2201      	movs	r2, #1
 8001778:	2140      	movs	r1, #64	; 0x40
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <led_7seg_display+0x110>)
 800177c:	f000 ff16 	bl	80025ac <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000004 	.word	0x20000004
 8001788:	200000ae 	.word	0x200000ae
 800178c:	20000000 	.word	0x20000000
 8001790:	40021800 	.word	0x40021800
 8001794:	200000bc 	.word	0x200000bc

08001798 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800179c:	f000 fbc2 	bl	8001f24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017a0:	f000 f822 	bl	80017e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017a4:	f7fe ffde 	bl	8000764 <MX_GPIO_Init>
	MX_TIM2_Init();
 80017a8:	f000 fab4 	bl	8001d14 <MX_TIM2_Init>
	MX_TIM4_Init();
 80017ac:	f000 fafe 	bl	8001dac <MX_TIM4_Init>
	MX_SPI1_Init();
 80017b0:	f000 f9ba 	bl	8001b28 <MX_SPI1_Init>
	MX_FSMC_Init();
 80017b4:	f7fe ff06 	bl	80005c4 <MX_FSMC_Init>
	/* USER CODE BEGIN 2 */
	init_system();
 80017b8:	f000 f880 	bl	80018bc <init_system>

	lcd_clear(WHITE);
 80017bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017c0:	f7ff f946 	bl	8000a50 <lcd_clear>
	TestLcd();
 80017c4:	f000 f8c8 	bl	8001958 <TestLcd>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (!timer2_flag)
 80017c8:	bf00      	nop
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <main+0x4c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0fb      	beq.n	80017ca <main+0x32>
			;
		timer2_flag = 0;
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <main+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]

		button_scan();
 80017d8:	f7fe fe88 	bl	80004ec <button_scan>
		TestButtonMatrix();
 80017dc:	f000 f894 	bl	8001908 <TestButtonMatrix>
		while (!timer2_flag)
 80017e0:	e7f2      	b.n	80017c8 <main+0x30>
 80017e2:	bf00      	nop
 80017e4:	200000b0 	.word	0x200000b0

080017e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	; 0x50
 80017ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	; 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f002 fe94 	bl	8004524 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <SystemClock_Config+0xcc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <SystemClock_Config+0xcc>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <SystemClock_Config+0xcc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <SystemClock_Config+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <SystemClock_Config+0xd0>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <SystemClock_Config+0xd0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001858:	2308      	movs	r3, #8
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800185c:	23a8      	movs	r3, #168	; 0xa8
 800185e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001860:	2302      	movs	r3, #2
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001864:	2304      	movs	r3, #4
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f000 feb7 	bl	80025e0 <HAL_RCC_OscConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x94>
		Error_Handler();
 8001878:	f000 f8b8 	bl	80019ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800187c:	230f      	movs	r3, #15
 800187e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001880:	2302      	movs	r3, #2
 8001882:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001888:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800188c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800188e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001892:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2105      	movs	r1, #5
 800189a:	4618      	mov	r0, r3
 800189c:	f001 f918 	bl	8002ad0 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xc2>
		Error_Handler();
 80018a6:	f000 f8a1 	bl	80019ec <Error_Handler>
	}
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	; 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <init_system>:

/* USER CODE BEGIN 4 */
void init_system() {
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2120      	movs	r1, #32
 80018c4:	480f      	ldr	r0, [pc, #60]	; (8001904 <init_system+0x48>)
 80018c6:	f000 fe71 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	480d      	ldr	r0, [pc, #52]	; (8001904 <init_system+0x48>)
 80018d0:	f000 fe6c 	bl	80025ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2110      	movs	r1, #16
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <init_system+0x48>)
 80018da:	f000 fe67 	bl	80025ac <HAL_GPIO_WritePin>

	button_init();
 80018de:	f7fe fdf9 	bl	80004d4 <button_init>
	led_7seg_init();
 80018e2:	f7ff fec1 	bl	8001668 <led_7seg_init>
	lcd_init();
 80018e6:	f7ff fbd1 	bl	800108c <lcd_init>

	timer2_init();
 80018ea:	f000 f885 	bl	80019f8 <timer2_init>
	timer2_set(50);
 80018ee:	2032      	movs	r0, #50	; 0x32
 80018f0:	f000 f896 	bl	8001a20 <timer2_set>

	timer4_init();
 80018f4:	f000 f88a 	bl	8001a0c <timer4_init>
	timer4_set(1);
 80018f8:	2001      	movs	r0, #1
 80018fa:	f000 f8ad 	bl	8001a58 <timer4_set>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <TestButtonMatrix>:

void TestButtonMatrix() {
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af04      	add	r7, sp, #16
	for (int i = 0; i < 16; i++) {
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	e017      	b.n	8001944 <TestButtonMatrix+0x3c>
		if (button_count[i] != 0) {
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <TestButtonMatrix+0x4c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00e      	beq.n	800193e <TestButtonMatrix+0x36>
			lcd_show_int_num(140, 105, i, 2, BRED, WHITE, 32);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	b29a      	uxth	r2, r3
 8001924:	2320      	movs	r3, #32
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2302      	movs	r3, #2
 8001936:	2169      	movs	r1, #105	; 0x69
 8001938:	208c      	movs	r0, #140	; 0x8c
 800193a:	f7ff faaf 	bl	8000e9c <lcd_show_int_num>
	for (int i = 0; i < 16; i++) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	dde4      	ble.n	8001914 <TestButtonMatrix+0xc>
		}
	}
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000030 	.word	0x20000030

08001958 <TestLcd>:
void TestLcd() {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af04      	add	r7, sp, #16
	lcd_fill(0, 0, 240, 20, BLUE);
 800195e:	231f      	movs	r3, #31
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2314      	movs	r3, #20
 8001964:	22f0      	movs	r2, #240	; 0xf0
 8001966:	2100      	movs	r1, #0
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff f8a3 	bl	8000ab4 <lcd_fill>
	lcd_show_string_center(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 800196e:	2301      	movs	r3, #1
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2310      	movs	r3, #16
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	231f      	movs	r3, #31
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800197e:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <TestLcd+0x88>)
 8001980:	2102      	movs	r1, #2
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fe3e 	bl	8001604 <lcd_show_string_center>
	lcd_show_string(20, 30, "Test LCD Screen", WHITE, RED, 24, 0);
 8001988:	2300      	movs	r3, #0
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	2318      	movs	r3, #24
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199a:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <TestLcd+0x8c>)
 800199c:	211e      	movs	r1, #30
 800199e:	2014      	movs	r0, #20
 80019a0:	f7ff fdcc 	bl	800153c <lcd_show_string>
	lcd_draw_rectangle(20, 80, 100, 160, GREEN);
 80019a4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	23a0      	movs	r3, #160	; 0xa0
 80019ac:	2264      	movs	r2, #100	; 0x64
 80019ae:	2150      	movs	r1, #80	; 0x50
 80019b0:	2014      	movs	r0, #20
 80019b2:	f7ff f950 	bl	8000c56 <lcd_draw_rectangle>
	lcd_draw_circle(160, 120, BRED, 40, 0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2328      	movs	r3, #40	; 0x28
 80019bc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80019c0:	2178      	movs	r1, #120	; 0x78
 80019c2:	20a0      	movs	r0, #160	; 0xa0
 80019c4:	f7ff fd4d 	bl	8001462 <lcd_draw_circle>
	lcd_show_picture(80, 200, 90, 90, gImageLogo);
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <TestLcd+0x90>)
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	235a      	movs	r3, #90	; 0x5a
 80019ce:	225a      	movs	r2, #90	; 0x5a
 80019d0:	21c8      	movs	r1, #200	; 0xc8
 80019d2:	2050      	movs	r0, #80	; 0x50
 80019d4:	f7ff fae0 	bl	8000f98 <lcd_show_picture>
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	08004594 	.word	0x08004594
 80019e4:	080045a4 	.word	0x080045a4
 80019e8:	08007534 	.word	0x08007534

080019ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80019f4:	e7fe      	b.n	80019f4 <Error_Handler+0x8>
	...

080019f8 <timer2_init>:
/**
 * @brief  	Init timer interrupt
 * @param  	None
 * @retval 	None
 */
void timer2_init(void) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <timer2_init+0x10>)
 80019fe:	f002 f88f 	bl	8003b20 <HAL_TIM_Base_Start_IT>
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000114 	.word	0x20000114

08001a0c <timer4_init>:

void timer4_init(void) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <timer4_init+0x10>)
 8001a12:	f002 f885 	bl	8003b20 <HAL_TIM_Base_Start_IT>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000015c 	.word	0x2000015c

08001a20 <timer2_set>:
/**
 * @brief	Set duration of software timer interrupt
 * @param	duration Duration of software timer interrupt
 * @retval 	None
 */
void timer2_set(int ms) {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	timer2_mul = ms / TIMER_CYCLE_2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <timer2_set+0x2c>)
 8001a2e:	801a      	strh	r2, [r3, #0]
	timer2_counter = timer2_mul;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <timer2_set+0x2c>)
 8001a32:	881a      	ldrh	r2, [r3, #0]
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <timer2_set+0x30>)
 8001a36:	801a      	strh	r2, [r3, #0]
	timer2_flag = 0;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <timer2_set+0x34>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	200000b4 	.word	0x200000b4
 8001a50:	200000b2 	.word	0x200000b2
 8001a54:	200000b0 	.word	0x200000b0

08001a58 <timer4_set>:

void timer4_set(int ms) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	timer4_mul = ms / TIMER_CYCLE_4;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <timer4_set+0x2c>)
 8001a66:	801a      	strh	r2, [r3, #0]
	timer4_counter = timer4_mul;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <timer4_set+0x2c>)
 8001a6a:	881a      	ldrh	r2, [r3, #0]
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <timer4_set+0x30>)
 8001a6e:	801a      	strh	r2, [r3, #0]
	timer4_flag = 0;
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <timer4_set+0x34>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200000ba 	.word	0x200000ba
 8001a88:	200000b8 	.word	0x200000b8
 8001a8c:	200000b6 	.word	0x200000b6

08001a90 <HAL_TIM_PeriodElapsedCallback>:
 * @brief  	Timer interrupt routine
 * @param  	htim TIM Base handle
 * @note	This callback function is called by system
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa0:	d114      	bne.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x3c>
		if (timer2_counter > 0) {
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ab4:	801a      	strh	r2, [r3, #0]
			if (timer2_counter == 0) {
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_TIM_PeriodElapsedCallback+0x3c>
				timer2_flag = 1;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
				timer2_counter = timer2_mul;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001aca:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	if (htim->Instance == TIM4) {
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a11      	ldr	r2, [pc, #68]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d116      	bne.n	8001b04 <HAL_TIM_PeriodElapsedCallback+0x74>
		if (timer4_counter > 0) {
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d010      	beq.n	8001b00 <HAL_TIM_PeriodElapsedCallback+0x70>
			timer4_counter--;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001ae8:	801a      	strh	r2, [r3, #0]
			if (timer4_counter == 0) {
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_PeriodElapsedCallback+0x70>
				timer4_flag = 1;
 8001af2:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
				timer4_counter = timer4_mul;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001afa:	881a      	ldrh	r2, [r3, #0]
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001afe:	801a      	strh	r2, [r3, #0]
			}
		}

		led_7seg_display();
 8001b00:	f7ff fdbe 	bl	8001680 <led_7seg_display>
	}
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200000b2 	.word	0x200000b2
 8001b10:	200000b0 	.word	0x200000b0
 8001b14:	200000b4 	.word	0x200000b4
 8001b18:	40000800 	.word	0x40000800
 8001b1c:	200000b8 	.word	0x200000b8
 8001b20:	200000b6 	.word	0x200000b6
 8001b24:	200000ba 	.word	0x200000ba

08001b28 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b2e:	4a18      	ldr	r2, [pc, #96]	; (8001b90 <MX_SPI1_Init+0x68>)
 8001b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b74:	220a      	movs	r2, #10
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_SPI1_Init+0x64>)
 8001b7a:	f001 f995 	bl	8002ea8 <HAL_SPI_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b84:	f7ff ff32 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200000bc 	.word	0x200000bc
 8001b90:	40013000 	.word	0x40013000

08001b94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a19      	ldr	r2, [pc, #100]	; (8001c18 <HAL_SPI_MspInit+0x84>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d12b      	bne.n	8001c0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a10      	ldr	r2, [pc, #64]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <HAL_SPI_MspInit+0x88>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bee:	2338      	movs	r3, #56	; 0x38
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bfe:	2305      	movs	r3, #5
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <HAL_SPI_MspInit+0x8c>)
 8001c0a:	f000 fb33 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40013000 	.word	0x40013000
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40020400 	.word	0x40020400

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a0f      	ldr	r2, [pc, #60]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a08      	ldr	r2, [pc, #32]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_MspInit+0x4c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler+0x4>

08001c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7e:	e7fe      	b.n	8001c7e <HardFault_Handler+0x4>

08001c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <MemManage_Handler+0x4>

08001c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c8a:	e7fe      	b.n	8001c8a <BusFault_Handler+0x4>

08001c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <UsageFault_Handler+0x4>

08001c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c92:	b480      	push	{r7}
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cc0:	f000 f982 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM2_IRQHandler+0x10>)
 8001cce:	f001 ff97 	bl	8003c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000114 	.word	0x20000114

08001cdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <TIM4_IRQHandler+0x10>)
 8001ce2:	f001 ff8d 	bl	8003c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000015c 	.word	0x2000015c

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d3a:	f240 3247 	movw	r2, #839	; 0x347
 8001d3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d48:	2263      	movs	r2, #99	; 0x63
 8001d4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d58:	4813      	ldr	r0, [pc, #76]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d5a:	f001 fe91 	bl	8003a80 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d64:	f7ff fe42 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	4619      	mov	r1, r3
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d76:	f002 f84b 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d80:	f7ff fe34 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_TIM2_Init+0x94>)
 8001d92:	f002 fa67 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d9c:	f7ff fe26 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000114 	.word	0x20000114

08001dac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0308 	add.w	r3, r7, #8
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <MX_TIM4_Init+0x98>)
 8001dcc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dd0:	f240 3247 	movw	r2, #839	; 0x347
 8001dd4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dde:	2263      	movs	r2, #99	; 0x63
 8001de0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001dee:	4814      	ldr	r0, [pc, #80]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001df0:	f001 fe46 	bl	8003a80 <HAL_TIM_Base_Init>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001dfa:	f7ff fdf7 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e04:	f107 0308 	add.w	r3, r7, #8
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001e0c:	f002 f800 	bl	8003e10 <HAL_TIM_ConfigClockSource>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e16:	f7ff fde9 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e22:	463b      	mov	r3, r7
 8001e24:	4619      	mov	r1, r3
 8001e26:	4806      	ldr	r0, [pc, #24]	; (8001e40 <MX_TIM4_Init+0x94>)
 8001e28:	f002 fa1c 	bl	8004264 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001e32:	f7ff fddb 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000015c 	.word	0x2000015c
 8001e44:	40000800 	.word	0x40000800

08001e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d116      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <HAL_TIM_Base_MspInit+0x80>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_TIM_Base_MspInit+0x80>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <HAL_TIM_Base_MspInit+0x80>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f000 f9c3 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e80:	201c      	movs	r0, #28
 8001e82:	f000 f9dc 	bl	800223e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001e86:	e01a      	b.n	8001ebe <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_TIM_Base_MspInit+0x84>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d115      	bne.n	8001ebe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_TIM_Base_MspInit+0x80>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_TIM_Base_MspInit+0x80>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_TIM_Base_MspInit+0x80>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	201e      	movs	r0, #30
 8001eb4:	f000 f9a7 	bl	8002206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eb8:	201e      	movs	r0, #30
 8001eba:	f000 f9c0 	bl	800223e <HAL_NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001efa:	f7ff fef9 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f002 fb19 	bl	8004534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff fc49 	bl	8001798 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001f14:	0800b49c 	.word	0x0800b49c
  ldr r2, =_sbss
 8001f18:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001f1c:	200001a8 	.word	0x200001a8

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f94f 	bl	80021f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fe64 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f967 	bl	800225a <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 f92f 	bl	8002206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000010 	.word	0x20000010
 8001fc4:	2000000c 	.word	0x2000000c

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000010 	.word	0x20000010
 8001fec:	200001a4 	.word	0x200001a4

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	200001a4 	.word	0x200001a4

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_Delay+0x44>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000010 	.word	0x20000010

08002050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800207c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002082:	4a04      	ldr	r2, [pc, #16]	; (8002094 <__NVIC_SetPriorityGrouping+0x44>)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	60d3      	str	r3, [r2, #12]
}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800209c:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <__NVIC_GetPriorityGrouping+0x18>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	0a1b      	lsrs	r3, r3, #8
 80020a2:	f003 0307 	and.w	r3, r3, #7
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db0b      	blt.n	80020de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	4907      	ldr	r1, [pc, #28]	; (80020ec <__NVIC_EnableIRQ+0x38>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000e100 	.word	0xe000e100

080020f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	6039      	str	r1, [r7, #0]
 80020fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002100:	2b00      	cmp	r3, #0
 8002102:	db0a      	blt.n	800211a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	b2da      	uxtb	r2, r3
 8002108:	490c      	ldr	r1, [pc, #48]	; (800213c <__NVIC_SetPriority+0x4c>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	0112      	lsls	r2, r2, #4
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	440b      	add	r3, r1
 8002114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002118:	e00a      	b.n	8002130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	4908      	ldr	r1, [pc, #32]	; (8002140 <__NVIC_SetPriority+0x50>)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	3b04      	subs	r3, #4
 8002128:	0112      	lsls	r2, r2, #4
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	440b      	add	r3, r1
 800212e:	761a      	strb	r2, [r3, #24]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000e100 	.word	0xe000e100
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002144:	b480      	push	{r7}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f1c3 0307 	rsb	r3, r3, #7
 800215e:	2b04      	cmp	r3, #4
 8002160:	bf28      	it	cs
 8002162:	2304      	movcs	r3, #4
 8002164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3304      	adds	r3, #4
 800216a:	2b06      	cmp	r3, #6
 800216c:	d902      	bls.n	8002174 <NVIC_EncodePriority+0x30>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b03      	subs	r3, #3
 8002172:	e000      	b.n	8002176 <NVIC_EncodePriority+0x32>
 8002174:	2300      	movs	r3, #0
 8002176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	401a      	ands	r2, r3
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800218c:	f04f 31ff 	mov.w	r1, #4294967295
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	43d9      	mvns	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800219c:	4313      	orrs	r3, r2
         );
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021bc:	d301      	bcc.n	80021c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021be:	2301      	movs	r3, #1
 80021c0:	e00f      	b.n	80021e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <SysTick_Config+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ca:	210f      	movs	r1, #15
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	f7ff ff8e 	bl	80020f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <SysTick_Config+0x40>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021da:	4b04      	ldr	r3, [pc, #16]	; (80021ec <SysTick_Config+0x40>)
 80021dc:	2207      	movs	r2, #7
 80021de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	e000e010 	.word	0xe000e010

080021f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff29 	bl	8002050 <__NVIC_SetPriorityGrouping>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002218:	f7ff ff3e 	bl	8002098 <__NVIC_GetPriorityGrouping>
 800221c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68b9      	ldr	r1, [r7, #8]
 8002222:	6978      	ldr	r0, [r7, #20]
 8002224:	f7ff ff8e 	bl	8002144 <NVIC_EncodePriority>
 8002228:	4602      	mov	r2, r0
 800222a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff5d 	bl	80020f0 <__NVIC_SetPriority>
}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	4603      	mov	r3, r0
 8002246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff31 	bl	80020b4 <__NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff ffa2 	bl	80021ac <SysTick_Config>
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e16b      	b.n	8002568 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 815a 	bne.w	8002562 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d017      	beq.n	8002364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d123      	bne.n	80023b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80b4 	beq.w	8002562 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b60      	ldr	r3, [pc, #384]	; (8002580 <HAL_GPIO_Init+0x30c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a5f      	ldr	r2, [pc, #380]	; (8002580 <HAL_GPIO_Init+0x30c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <HAL_GPIO_Init+0x30c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002416:	4a5b      	ldr	r2, [pc, #364]	; (8002584 <HAL_GPIO_Init+0x310>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_GPIO_Init+0x314>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d02b      	beq.n	800249a <HAL_GPIO_Init+0x226>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a51      	ldr	r2, [pc, #324]	; (800258c <HAL_GPIO_Init+0x318>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d025      	beq.n	8002496 <HAL_GPIO_Init+0x222>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a50      	ldr	r2, [pc, #320]	; (8002590 <HAL_GPIO_Init+0x31c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d01f      	beq.n	8002492 <HAL_GPIO_Init+0x21e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4f      	ldr	r2, [pc, #316]	; (8002594 <HAL_GPIO_Init+0x320>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d019      	beq.n	800248e <HAL_GPIO_Init+0x21a>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4e      	ldr	r2, [pc, #312]	; (8002598 <HAL_GPIO_Init+0x324>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d013      	beq.n	800248a <HAL_GPIO_Init+0x216>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_GPIO_Init+0x328>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d00d      	beq.n	8002486 <HAL_GPIO_Init+0x212>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4c      	ldr	r2, [pc, #304]	; (80025a0 <HAL_GPIO_Init+0x32c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d007      	beq.n	8002482 <HAL_GPIO_Init+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4b      	ldr	r2, [pc, #300]	; (80025a4 <HAL_GPIO_Init+0x330>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_GPIO_Init+0x20a>
 800247a:	2307      	movs	r3, #7
 800247c:	e00e      	b.n	800249c <HAL_GPIO_Init+0x228>
 800247e:	2308      	movs	r3, #8
 8002480:	e00c      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002482:	2306      	movs	r3, #6
 8002484:	e00a      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002486:	2305      	movs	r3, #5
 8002488:	e008      	b.n	800249c <HAL_GPIO_Init+0x228>
 800248a:	2304      	movs	r3, #4
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x228>
 800248e:	2303      	movs	r3, #3
 8002490:	e004      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002492:	2302      	movs	r3, #2
 8002494:	e002      	b.n	800249c <HAL_GPIO_Init+0x228>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x228>
 800249a:	2300      	movs	r3, #0
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	0092      	lsls	r2, r2, #2
 80024a4:	4093      	lsls	r3, r2
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ac:	4935      	ldr	r1, [pc, #212]	; (8002584 <HAL_GPIO_Init+0x310>)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ba:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <HAL_GPIO_Init+0x334>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <HAL_GPIO_Init+0x334>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_GPIO_Init+0x334>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002538:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_GPIO_Init+0x334>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <HAL_GPIO_Init+0x334>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3301      	adds	r3, #1
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b0f      	cmp	r3, #15
 800256c:	f67f ae90 	bls.w	8002290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40023800 	.word	0x40023800
 8002584:	40013800 	.word	0x40013800
 8002588:	40020000 	.word	0x40020000
 800258c:	40020400 	.word	0x40020400
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00
 8002598:	40021000 	.word	0x40021000
 800259c:	40021400 	.word	0x40021400
 80025a0:	40021800 	.word	0x40021800
 80025a4:	40021c00 	.word	0x40021c00
 80025a8:	40013c00 	.word	0x40013c00

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e267      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d075      	beq.n	80026ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d00c      	beq.n	8002624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260a:	4b85      	ldr	r3, [pc, #532]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002612:	2b08      	cmp	r3, #8
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b82      	ldr	r3, [pc, #520]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002622:	d10b      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	4b7e      	ldr	r3, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d05b      	beq.n	80026e8 <HAL_RCC_OscConfig+0x108>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d157      	bne.n	80026e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e242      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x74>
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e01d      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a6f      	ldr	r2, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a6c      	ldr	r2, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002678:	4b69      	ldr	r3, [pc, #420]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a68      	ldr	r2, [pc, #416]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b66      	ldr	r3, [pc, #408]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a65      	ldr	r2, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff fcaa 	bl	8001ff0 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7ff fca6 	bl	8001ff0 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e207      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b5b      	ldr	r3, [pc, #364]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0xc0>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff fc96 	bl	8001ff0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff fc92 	bl	8001ff0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1f3      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	4b51      	ldr	r3, [pc, #324]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0xe8>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d063      	beq.n	80027be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270a:	2b08      	cmp	r3, #8
 800270c:	d11c      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b44      	ldr	r3, [pc, #272]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d116      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1c7      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b3b      	ldr	r3, [pc, #236]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	e03a      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_RCC_OscConfig+0x244>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff fc4b 	bl	8001ff0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff fc47 	bl	8001ff0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e1a8      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4925      	ldr	r1, [pc, #148]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <HAL_RCC_OscConfig+0x244>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff fc2a 	bl	8001ff0 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7ff fc26 	bl	8001ff0 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e187      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d036      	beq.n	8002838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_RCC_OscConfig+0x248>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7ff fc0a 	bl	8001ff0 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7ff fc06 	bl	8001ff0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e167      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_OscConfig+0x240>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x200>
 80027fe:	e01b      	b.n	8002838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_OscConfig+0x248>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7ff fbf3 	bl	8001ff0 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	e00e      	b.n	800282c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280e:	f7ff fbef 	bl	8001ff0 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d907      	bls.n	800282c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e150      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
 8002820:	40023800 	.word	0x40023800
 8002824:	42470000 	.word	0x42470000
 8002828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282c:	4b88      	ldr	r3, [pc, #544]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1ea      	bne.n	800280e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8097 	beq.w	8002974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002846:	2300      	movs	r3, #0
 8002848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284a:	4b81      	ldr	r3, [pc, #516]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	4b7d      	ldr	r3, [pc, #500]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a7c      	ldr	r2, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b7a      	ldr	r3, [pc, #488]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b77      	ldr	r3, [pc, #476]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b74      	ldr	r3, [pc, #464]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a73      	ldr	r2, [pc, #460]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7ff fbaf 	bl	8001ff0 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7ff fbab 	bl	8001ff0 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e10c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b6a      	ldr	r3, [pc, #424]	; (8002a54 <HAL_RCC_OscConfig+0x474>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x2ea>
 80028bc:	4b64      	ldr	r3, [pc, #400]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c0:	4a63      	ldr	r2, [pc, #396]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	; 0x70
 80028c8:	e01c      	b.n	8002904 <HAL_RCC_OscConfig+0x324>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x30c>
 80028d2:	4b5f      	ldr	r3, [pc, #380]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d6:	4a5e      	ldr	r2, [pc, #376]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6713      	str	r3, [r2, #112]	; 0x70
 80028de:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0x324>
 80028ec:	4b58      	ldr	r3, [pc, #352]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	4b55      	ldr	r3, [pc, #340]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fc:	4a54      	ldr	r2, [pc, #336]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80028fe:	f023 0304 	bic.w	r3, r3, #4
 8002902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7ff fb70 	bl	8001ff0 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002912:	e00a      	b.n	800292a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002914:	f7ff fb6c 	bl	8001ff0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0cb      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0ee      	beq.n	8002914 <HAL_RCC_OscConfig+0x334>
 8002936:	e014      	b.n	8002962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7ff fb5a 	bl	8001ff0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7ff fb56 	bl	8001ff0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e0b5      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	4b3e      	ldr	r3, [pc, #248]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ee      	bne.n	8002940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d105      	bne.n	8002974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002968:	4b39      	ldr	r3, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	4a38      	ldr	r2, [pc, #224]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 800296e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a1 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297e:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b08      	cmp	r3, #8
 8002988:	d05c      	beq.n	8002a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d141      	bne.n	8002a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7ff fb2a 	bl	8001ff0 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7ff fb26 	bl	8001ff0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e087      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	019b      	lsls	r3, r3, #6
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	3b01      	subs	r3, #1
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	491b      	ldr	r1, [pc, #108]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7ff faff 	bl	8001ff0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f7ff fafb 	bl	8001ff0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e05c      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0f0      	beq.n	80029f6 <HAL_RCC_OscConfig+0x416>
 8002a14:	e054      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <HAL_RCC_OscConfig+0x478>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1c:	f7ff fae8 	bl	8001ff0 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a24:	f7ff fae4 	bl	8001ff0 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e045      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x470>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x444>
 8002a42:	e03d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e038      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40007000 	.word	0x40007000
 8002a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a5c:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <HAL_RCC_OscConfig+0x4ec>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d028      	beq.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d121      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d111      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d001      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0cc      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d90c      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d044      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d119      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e067      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4934      	ldr	r1, [pc, #208]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7ff fa16 	bl	8001ff0 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7ff fa12 	bl	8001ff0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e04f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d20c      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f821 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff f976 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	0800b47c 	.word	0x0800b47c
 8002c94:	20000008 	.word	0x20000008
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca0:	b094      	sub	sp, #80	; 0x50
 8002ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca8:	2300      	movs	r3, #0
 8002caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cac:	2300      	movs	r3, #0
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb4:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d00d      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x40>
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	f200 80e1 	bhi.w	8002e88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cce:	e0db      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b73      	ldr	r3, [pc, #460]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cd4:	e0db      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cd6:	4b73      	ldr	r3, [pc, #460]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cda:	e0d8      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cdc:	4b6f      	ldr	r3, [pc, #444]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d063      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	099b      	lsrs	r3, r3, #6
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
 8002d06:	2300      	movs	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d0e:	4622      	mov	r2, r4
 8002d10:	462b      	mov	r3, r5
 8002d12:	f04f 0000 	mov.w	r0, #0
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	0159      	lsls	r1, r3, #5
 8002d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d20:	0150      	lsls	r0, r2, #5
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4621      	mov	r1, r4
 8002d28:	1a51      	subs	r1, r2, r1
 8002d2a:	6139      	str	r1, [r7, #16]
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d40:	4659      	mov	r1, fp
 8002d42:	018b      	lsls	r3, r1, #6
 8002d44:	4651      	mov	r1, sl
 8002d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	018a      	lsls	r2, r1, #6
 8002d4e:	4651      	mov	r1, sl
 8002d50:	ebb2 0801 	subs.w	r8, r2, r1
 8002d54:	4659      	mov	r1, fp
 8002d56:	eb63 0901 	sbc.w	r9, r3, r1
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d6e:	4690      	mov	r8, r2
 8002d70:	4699      	mov	r9, r3
 8002d72:	4623      	mov	r3, r4
 8002d74:	eb18 0303 	adds.w	r3, r8, r3
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	462b      	mov	r3, r5
 8002d7c:	eb49 0303 	adc.w	r3, r9, r3
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d8e:	4629      	mov	r1, r5
 8002d90:	024b      	lsls	r3, r1, #9
 8002d92:	4621      	mov	r1, r4
 8002d94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d98:	4621      	mov	r1, r4
 8002d9a:	024a      	lsls	r2, r1, #9
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da2:	2200      	movs	r2, #0
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dac:	f7fd fa14 	bl	80001d8 <__aeabi_uldivmod>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4613      	mov	r3, r2
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db8:	e058      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	099b      	lsrs	r3, r3, #6
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dca:	623b      	str	r3, [r7, #32]
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	f04f 0000 	mov.w	r0, #0
 8002ddc:	f04f 0100 	mov.w	r1, #0
 8002de0:	0159      	lsls	r1, r3, #5
 8002de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002de6:	0150      	lsls	r0, r2, #5
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4641      	mov	r1, r8
 8002dee:	ebb2 0a01 	subs.w	sl, r2, r1
 8002df2:	4649      	mov	r1, r9
 8002df4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e0c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e10:	eb63 050b 	sbc.w	r5, r3, fp
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	464b      	mov	r3, r9
 8002e30:	eb45 0303 	adc.w	r3, r5, r3
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e42:	4629      	mov	r1, r5
 8002e44:	028b      	lsls	r3, r1, #10
 8002e46:	4621      	mov	r1, r4
 8002e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	028a      	lsls	r2, r1, #10
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e56:	2200      	movs	r2, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	61fa      	str	r2, [r7, #28]
 8002e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e60:	f7fd f9ba 	bl	80001d8 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	3301      	adds	r3, #1
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e86:	e002      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3750      	adds	r7, #80	; 0x50
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	007a1200 	.word	0x007a1200

08002ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e07b      	b.n	8002fb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d108      	bne.n	8002ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eca:	d009      	beq.n	8002ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
 8002ed2:	e005      	b.n	8002ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fe4a 	bl	8001b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	431a      	orrs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	ea42 0103 	orr.w	r1, r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0104 	and.w	r1, r3, #4
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0210 	and.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	69da      	ldr	r2, [r3, #28]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b088      	sub	sp, #32
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_SPI_Transmit+0x22>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e126      	b.n	800322a <HAL_SPI_Transmit+0x270>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe4:	f7ff f804 	bl	8001ff0 <HAL_GetTick>
 8002fe8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d002      	beq.n	8003000 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ffe:	e10b      	b.n	8003218 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_SPI_Transmit+0x52>
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003010:	e102      	b.n	8003218 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2203      	movs	r2, #3
 8003016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	88fa      	ldrh	r2, [r7, #6]
 800302a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	88fa      	ldrh	r2, [r7, #6]
 8003030:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003058:	d10f      	bne.n	800307a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003068:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003078:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b40      	cmp	r3, #64	; 0x40
 8003086:	d007      	beq.n	8003098 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003096:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a0:	d14b      	bne.n	800313a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0xf6>
 80030aa:	8afb      	ldrh	r3, [r7, #22]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d13e      	bne.n	800312e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	1c9a      	adds	r2, r3, #2
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030d4:	e02b      	b.n	800312e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d112      	bne.n	800310a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	881a      	ldrh	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	1c9a      	adds	r2, r3, #2
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	86da      	strh	r2, [r3, #54]	; 0x36
 8003108:	e011      	b.n	800312e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800310a:	f7fe ff71 	bl	8001ff0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d803      	bhi.n	8003122 <HAL_SPI_Transmit+0x168>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d102      	bne.n	8003128 <HAL_SPI_Transmit+0x16e>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d102      	bne.n	800312e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800312c:	e074      	b.n	8003218 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1ce      	bne.n	80030d6 <HAL_SPI_Transmit+0x11c>
 8003138:	e04c      	b.n	80031d4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d002      	beq.n	8003148 <HAL_SPI_Transmit+0x18e>
 8003142:	8afb      	ldrh	r3, [r7, #22]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d140      	bne.n	80031ca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800316e:	e02c      	b.n	80031ca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d113      	bne.n	80031a6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80031a4:	e011      	b.n	80031ca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a6:	f7fe ff23 	bl	8001ff0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d803      	bhi.n	80031be <HAL_SPI_Transmit+0x204>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d102      	bne.n	80031c4 <HAL_SPI_Transmit+0x20a>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d102      	bne.n	80031ca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031c8:	e026      	b.n	8003218 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1cd      	bne.n	8003170 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fbcb 	bl	8003974 <SPI_EndRxTxTransaction>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031f2:	2300      	movs	r3, #0
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e000      	b.n	8003218 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003216:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003228:	7ffb      	ldrb	r3, [r7, #31]
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b088      	sub	sp, #32
 8003236:	af02      	add	r7, sp, #8
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800324e:	d112      	bne.n	8003276 <HAL_SPI_Receive+0x44>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10e      	bne.n	8003276 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2204      	movs	r2, #4
 800325c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f8f1 	bl	8003454 <HAL_SPI_TransmitReceive>
 8003272:	4603      	mov	r3, r0
 8003274:	e0ea      	b.n	800344c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_SPI_Receive+0x52>
 8003280:	2302      	movs	r3, #2
 8003282:	e0e3      	b.n	800344c <HAL_SPI_Receive+0x21a>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800328c:	f7fe feb0 	bl	8001ff0 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032a2:	e0ca      	b.n	800343a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Receive+0x7e>
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80032b4:	e0c1      	b.n	800343a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2204      	movs	r2, #4
 80032ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	88fa      	ldrh	r2, [r7, #6]
 80032ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032fc:	d10f      	bne.n	800331e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800331c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d007      	beq.n	800333c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d162      	bne.n	800340a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003344:	e02e      	b.n	80033a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d115      	bne.n	8003380 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f103 020c 	add.w	r2, r3, #12
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800337e:	e011      	b.n	80033a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003380:	f7fe fe36 	bl	8001ff0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d803      	bhi.n	8003398 <HAL_SPI_Receive+0x166>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003396:	d102      	bne.n	800339e <HAL_SPI_Receive+0x16c>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80033a2:	e04a      	b.n	800343a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1cb      	bne.n	8003346 <HAL_SPI_Receive+0x114>
 80033ae:	e031      	b.n	8003414 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d113      	bne.n	80033e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	b292      	uxth	r2, r2
 80033ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033e4:	e011      	b.n	800340a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e6:	f7fe fe03 	bl	8001ff0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d803      	bhi.n	80033fe <HAL_SPI_Receive+0x1cc>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d102      	bne.n	8003404 <HAL_SPI_Receive+0x1d2>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003408:	e017      	b.n	800343a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1cd      	bne.n	80033b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	6839      	ldr	r1, [r7, #0]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fa45 	bl	80038a8 <SPI_EndRxTransaction>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d002      	beq.n	800342a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	75fb      	strb	r3, [r7, #23]
 8003436:	e000      	b.n	800343a <HAL_SPI_Receive+0x208>
  }

error :
 8003438:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800344a:	7dfb      	ldrb	r3, [r7, #23]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08c      	sub	sp, #48	; 0x30
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003462:	2301      	movs	r3, #1
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_SPI_TransmitReceive+0x26>
 8003476:	2302      	movs	r3, #2
 8003478:	e18a      	b.n	8003790 <HAL_SPI_TransmitReceive+0x33c>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003482:	f7fe fdb5 	bl	8001ff0 <HAL_GetTick>
 8003486:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800348e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800349c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d00f      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0x70>
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034aa:	d107      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x68>
 80034b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d003      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034c2:	e15b      	b.n	800377c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x82>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x82>
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034dc:	e14e      	b.n	800377c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d003      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2205      	movs	r2, #5
 80034ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	887a      	ldrh	r2, [r7, #2]
 8003502:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	887a      	ldrh	r2, [r7, #2]
 8003508:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	887a      	ldrh	r2, [r7, #2]
 800351a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b40      	cmp	r3, #64	; 0x40
 8003534:	d007      	beq.n	8003546 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800354e:	d178      	bne.n	8003642 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_SPI_TransmitReceive+0x10a>
 8003558:	8b7b      	ldrh	r3, [r7, #26]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d166      	bne.n	800362c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	881a      	ldrh	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003582:	e053      	b.n	800362c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d11b      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x176>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	d016      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x176>
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d113      	bne.n	80035ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	881a      	ldrh	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	1c9a      	adds	r2, r3, #2
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d119      	bne.n	800360c <HAL_SPI_TransmitReceive+0x1b8>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035dc:	b29b      	uxth	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d014      	beq.n	800360c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68da      	ldr	r2, [r3, #12]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ec:	b292      	uxth	r2, r2
 80035ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f4:	1c9a      	adds	r2, r3, #2
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003608:	2301      	movs	r3, #1
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800360c:	f7fe fcf0 	bl	8001ff0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003618:	429a      	cmp	r2, r3
 800361a:	d807      	bhi.n	800362c <HAL_SPI_TransmitReceive+0x1d8>
 800361c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003622:	d003      	beq.n	800362c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800362a:	e0a7      	b.n	800377c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1a6      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x130>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363a:	b29b      	uxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1a1      	bne.n	8003584 <HAL_SPI_TransmitReceive+0x130>
 8003640:	e07c      	b.n	800373c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_SPI_TransmitReceive+0x1fc>
 800364a:	8b7b      	ldrh	r3, [r7, #26]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d16b      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366c:	b29b      	uxth	r3, r3
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003676:	e057      	b.n	8003728 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b02      	cmp	r3, #2
 8003684:	d11c      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x26c>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d017      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x26c>
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003692:	2b01      	cmp	r3, #1
 8003694:	d114      	bne.n	80036c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d119      	bne.n	8003702 <HAL_SPI_TransmitReceive+0x2ae>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d014      	beq.n	8003702 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80036fe:	2301      	movs	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003702:	f7fe fc75 	bl	8001ff0 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800370e:	429a      	cmp	r2, r3
 8003710:	d803      	bhi.n	800371a <HAL_SPI_TransmitReceive+0x2c6>
 8003712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d102      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x2cc>
 800371a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003726:	e029      	b.n	800377c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1a2      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x224>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d19d      	bne.n	8003678 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800373c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f917 	bl	8003974 <SPI_EndRxTxTransaction>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d006      	beq.n	800375a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003758:	e010      	b.n	800377c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003762:	2300      	movs	r3, #0
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	e000      	b.n	800377c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800377a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800378c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003790:	4618      	mov	r0, r3
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037a8:	f7fe fc22 	bl	8001ff0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037b8:	f7fe fc1a 	bl	8001ff0 <HAL_GetTick>
 80037bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	015b      	lsls	r3, r3, #5
 80037c4:	0d1b      	lsrs	r3, r3, #20
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ce:	e054      	b.n	800387a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d050      	beq.n	800387a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037d8:	f7fe fc0a 	bl	8001ff0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d902      	bls.n	80037ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13d      	bne.n	800386a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d111      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d004      	beq.n	800381c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	d107      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003834:	d10f      	bne.n	8003856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e017      	b.n	800389a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3b01      	subs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d19b      	bne.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000008 	.word	0x20000008

080038a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038bc:	d111      	bne.n	80038e2 <SPI_EndRxTransaction+0x3a>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c6:	d004      	beq.n	80038d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d0:	d107      	bne.n	80038e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ea:	d12a      	bne.n	8003942 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f4:	d012      	beq.n	800391c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2200      	movs	r2, #0
 80038fe:	2180      	movs	r1, #128	; 0x80
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff ff49 	bl	8003798 <SPI_WaitFlagStateUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d02d      	beq.n	8003968 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e026      	b.n	800396a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2200      	movs	r2, #0
 8003924:	2101      	movs	r1, #1
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff ff36 	bl	8003798 <SPI_WaitFlagStateUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d01a      	beq.n	8003968 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e013      	b.n	800396a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2200      	movs	r2, #0
 800394a:	2101      	movs	r1, #1
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff ff23 	bl	8003798 <SPI_WaitFlagStateUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d007      	beq.n	8003968 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395c:	f043 0220 	orr.w	r2, r3, #32
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e000      	b.n	800396a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <SPI_EndRxTxTransaction+0x7c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1b      	ldr	r2, [pc, #108]	; (80039f4 <SPI_EndRxTxTransaction+0x80>)
 8003986:	fba2 2303 	umull	r2, r3, r2, r3
 800398a:	0d5b      	lsrs	r3, r3, #21
 800398c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003990:	fb02 f303 	mul.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800399e:	d112      	bne.n	80039c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2200      	movs	r2, #0
 80039a8:	2180      	movs	r1, #128	; 0x80
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff fef4 	bl	8003798 <SPI_WaitFlagStateUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0220 	orr.w	r2, r3, #32
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e00f      	b.n	80039e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d00a      	beq.n	80039e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b80      	cmp	r3, #128	; 0x80
 80039de:	d0f2      	beq.n	80039c6 <SPI_EndRxTxTransaction+0x52>
 80039e0:	e000      	b.n	80039e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80039e2:	bf00      	nop
  }

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000008 	.word	0x20000008
 80039f4:	165e9f81 	.word	0x165e9f81

080039f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e034      	b.n	8003a78 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7fc fe94 	bl	8000750 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3308      	adds	r3, #8
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 fca6 	bl	8004384 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	461a      	mov	r2, r3
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	f000 fcf0 	bl	8004428 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6858      	ldr	r0, [r3, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	f000 fd25 	bl	80044a4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6892      	ldr	r2, [r2, #8]
 8003a62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	6892      	ldr	r2, [r2, #8]
 8003a6e:	f041 0101 	orr.w	r1, r1, #1
 8003a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e041      	b.n	8003b16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7fe f9ce 	bl	8001e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f000 fa96 	bl	8003ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e04e      	b.n	8003bd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68da      	ldr	r2, [r3, #12]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a23      	ldr	r2, [pc, #140]	; (8003be4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d022      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d01d      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1f      	ldr	r2, [pc, #124]	; (8003be8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d018      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_TIM_Base_Start_IT+0xcc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d013      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d009      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x80>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a18      	ldr	r2, [pc, #96]	; (8003bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d010      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc2:	e007      	b.n	8003bd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40010400 	.word	0x40010400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40001800 	.word	0x40001800

08003c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d122      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d11b      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0202 	mvn.w	r2, #2
 8003c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f9b5 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9a7 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f9b8 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d122      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d11b      	bne.n	8003cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0204 	mvn.w	r2, #4
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f98b 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f97d 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f98e 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d122      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d11b      	bne.n	8003d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f06f 0208 	mvn.w	r2, #8
 8003cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2204      	movs	r2, #4
 8003cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f961 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003cf0:	e005      	b.n	8003cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f953 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f964 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d122      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d11b      	bne.n	8003d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0210 	mvn.w	r2, #16
 8003d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2208      	movs	r2, #8
 8003d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f937 	bl	8003fb2 <HAL_TIM_IC_CaptureCallback>
 8003d44:	e005      	b.n	8003d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f929 	bl	8003f9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f93a 	bl	8003fc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f06f 0201 	mvn.w	r2, #1
 8003d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fd fe86 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d10e      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d107      	bne.n	8003db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fae0 	bl	8004370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b40      	cmp	r3, #64	; 0x40
 8003dca:	d107      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f8ff 	bl	8003fda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d10e      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d107      	bne.n	8003e08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0220 	mvn.w	r2, #32
 8003e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 faaa 	bl	800435c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_ConfigClockSource+0x1c>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e0b4      	b.n	8003f96 <HAL_TIM_ConfigClockSource+0x186>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e64:	d03e      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	f200 8087 	bhi.w	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	f000 8086 	beq.w	8003f82 <HAL_TIM_ConfigClockSource+0x172>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7a:	d87f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b70      	cmp	r3, #112	; 0x70
 8003e7e:	d01a      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d87b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b60      	cmp	r3, #96	; 0x60
 8003e86:	d050      	beq.n	8003f2a <HAL_TIM_ConfigClockSource+0x11a>
 8003e88:	2b60      	cmp	r3, #96	; 0x60
 8003e8a:	d877      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d03c      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xfa>
 8003e90:	2b50      	cmp	r3, #80	; 0x50
 8003e92:	d873      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b40      	cmp	r3, #64	; 0x40
 8003e96:	d058      	beq.n	8003f4a <HAL_TIM_ConfigClockSource+0x13a>
 8003e98:	2b40      	cmp	r3, #64	; 0x40
 8003e9a:	d86f      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b30      	cmp	r3, #48	; 0x30
 8003e9e:	d064      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea0:	2b30      	cmp	r3, #48	; 0x30
 8003ea2:	d86b      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b20      	cmp	r3, #32
 8003ea6:	d060      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d867      	bhi.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb0:	2b10      	cmp	r3, #16
 8003eb2:	d05a      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb4:	e062      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6899      	ldr	r1, [r3, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f000 f9ad 	bl	8004224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ed8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	609a      	str	r2, [r3, #8]
      break;
 8003ee2:	e04f      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f000 f996 	bl	8004224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e03c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	461a      	mov	r2, r3
 8003f18:	f000 f90a 	bl	8004130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2150      	movs	r1, #80	; 0x50
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f963 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003f28:	e02c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f000 f929 	bl	800418e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2160      	movs	r1, #96	; 0x60
 8003f42:	4618      	mov	r0, r3
 8003f44:	f000 f953 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003f48:	e01c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	6859      	ldr	r1, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f000 f8ea 	bl	8004130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2140      	movs	r1, #64	; 0x40
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f943 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003f68:	e00c      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4619      	mov	r1, r3
 8003f74:	4610      	mov	r0, r2
 8003f76:	f000 f93a 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a40      	ldr	r2, [pc, #256]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d013      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400e:	d00f      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a3d      	ldr	r2, [pc, #244]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00b      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a3c      	ldr	r2, [pc, #240]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d007      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d003      	beq.n	8004030 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a3a      	ldr	r2, [pc, #232]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d108      	bne.n	8004042 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <TIM_Base_SetConfig+0x114>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004050:	d027      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <TIM_Base_SetConfig+0x118>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d023      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a2b      	ldr	r2, [pc, #172]	; (800410c <TIM_Base_SetConfig+0x11c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0x120>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d01b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0x124>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d017      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_Base_SetConfig+0x128>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d013      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a27      	ldr	r2, [pc, #156]	; (800411c <TIM_Base_SetConfig+0x12c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d00f      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <TIM_Base_SetConfig+0x130>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d00b      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <TIM_Base_SetConfig+0x134>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d007      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a24      	ldr	r2, [pc, #144]	; (8004128 <TIM_Base_SetConfig+0x138>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d003      	beq.n	80040a2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <TIM_Base_SetConfig+0x13c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d108      	bne.n	80040b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a0a      	ldr	r2, [pc, #40]	; (8004104 <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d003      	beq.n	80040e8 <TIM_Base_SetConfig+0xf8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <TIM_Base_SetConfig+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40010400 	.word	0x40010400
 8004118:	40014000 	.word	0x40014000
 800411c:	40014400 	.word	0x40014400
 8004120:	40014800 	.word	0x40014800
 8004124:	40001800 	.word	0x40001800
 8004128:	40001c00 	.word	0x40001c00
 800412c:	40002000 	.word	0x40002000

08004130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0201 	bic.w	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 030a 	bic.w	r3, r3, #10
 800416c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418e:	b480      	push	{r7}
 8004190:	b087      	sub	sp, #28
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	f043 0307 	orr.w	r3, r3, #7
 8004210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800423e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	431a      	orrs	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004278:	2302      	movs	r3, #2
 800427a:	e05a      	b.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d022      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d01d      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d018      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a1b      	ldr	r2, [pc, #108]	; (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00e      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a18      	ldr	r2, [pc, #96]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a15      	ldr	r2, [pc, #84]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d10c      	bne.n	8004320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800430c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4313      	orrs	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40010000 	.word	0x40010000
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800
 800434c:	40000c00 	.word	0x40000c00
 8004350:	40010400 	.word	0x40010400
 8004354:	40014000 	.word	0x40014000
 8004358:	40001800 	.word	0x40001800

0800435c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800439c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <FSMC_NORSRAM_Init+0xa0>)
 80043a2:	4013      	ands	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043ae:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80043b4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80043ba:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80043c0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80043c6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80043cc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80043d2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80043d8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80043de:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80043e4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80043ea:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80043f0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d103      	bne.n	8004408 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004406:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	fff00080 	.word	0xfff00080

08004428 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004442:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800444a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004456:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800445e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004466:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	3b01      	subs	r3, #1
 800446e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004470:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	3b02      	subs	r3, #2
 8004478:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800447a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004480:	4313      	orrs	r3, r2
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6979      	ldr	r1, [r7, #20]
 8004490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
	...

080044a4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044bc:	d122      	bne.n	8004504 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4b15      	ldr	r3, [pc, #84]	; (8004520 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044da:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044e2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80044ea:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044f0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6979      	ldr	r1, [r7, #20]
 80044fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004502:	e005      	b.n	8004510 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800450c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	cff00000 	.word	0xcff00000

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <__libc_init_array>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4d0d      	ldr	r5, [pc, #52]	; (800456c <__libc_init_array+0x38>)
 8004538:	4c0d      	ldr	r4, [pc, #52]	; (8004570 <__libc_init_array+0x3c>)
 800453a:	1b64      	subs	r4, r4, r5
 800453c:	10a4      	asrs	r4, r4, #2
 800453e:	2600      	movs	r6, #0
 8004540:	42a6      	cmp	r6, r4
 8004542:	d109      	bne.n	8004558 <__libc_init_array+0x24>
 8004544:	4d0b      	ldr	r5, [pc, #44]	; (8004574 <__libc_init_array+0x40>)
 8004546:	4c0c      	ldr	r4, [pc, #48]	; (8004578 <__libc_init_array+0x44>)
 8004548:	f000 f818 	bl	800457c <_init>
 800454c:	1b64      	subs	r4, r4, r5
 800454e:	10a4      	asrs	r4, r4, #2
 8004550:	2600      	movs	r6, #0
 8004552:	42a6      	cmp	r6, r4
 8004554:	d105      	bne.n	8004562 <__libc_init_array+0x2e>
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	f855 3b04 	ldr.w	r3, [r5], #4
 800455c:	4798      	blx	r3
 800455e:	3601      	adds	r6, #1
 8004560:	e7ee      	b.n	8004540 <__libc_init_array+0xc>
 8004562:	f855 3b04 	ldr.w	r3, [r5], #4
 8004566:	4798      	blx	r3
 8004568:	3601      	adds	r6, #1
 800456a:	e7f2      	b.n	8004552 <__libc_init_array+0x1e>
 800456c:	0800b494 	.word	0x0800b494
 8004570:	0800b494 	.word	0x0800b494
 8004574:	0800b494 	.word	0x0800b494
 8004578:	0800b498 	.word	0x0800b498

0800457c <_init>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr

08004588 <_fini>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr
